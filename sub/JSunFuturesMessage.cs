// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JSunFuturesMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jsunfutures.Messages {

  /// <summary>Holder for reflection information generated from JSunFuturesMessage.proto</summary>
  public static partial class JSunFuturesMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for JSunFuturesMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static JSunFuturesMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhKU3VuRnV0dXJlc01lc3NhZ2UucHJvdG8SFGpzdW5mdXR1cmVzLm1lc3Nh",
            "Z2VzIvwFCg1BY2NvdW50RGV0YWlsEg8KB2FjY291bnQYASABKAkSCgoCSUQY",
            "AiABKAkSKQoCZGYYAyABKA4yHS5qc3VuZnV0dXJlcy5tZXNzYWdlcy5ETUFG",
            "bGFnEikKAnZmGAQgASgOMh0uanN1bmZ1dHVyZXMubWVzc2FnZXMuVklQRmxh",
            "ZxIvCgNkdGYYBSABKA4yIi5qc3VuZnV0dXJlcy5tZXNzYWdlcy5EYXlUcmFk",
            "ZUZsYWcSKQoCYWYYBiABKA4yHS5qc3VuZnV0dXJlcy5tZXNzYWdlcy5BcGlG",
            "bGFnEjcKA2FnZhgHIAEoDjIqLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLkFjY291",
            "bnRHcm91cENvZGVGbGFnEgoKAmliGAggASgJEhAKCGJyb2tlcmlkGAkgASgJ",
            "EgwKBGFlaWQYCiABKAkSMAoDc3RmGAsgASgOMiMuanN1bmZ1dHVyZXMubWVz",
            "c2FnZXMuU3RvcFRyYWRlRmxhZxI5CgR0b21mGAwgASgOMisuanN1bmZ1dHVy",
            "ZXMubWVzc2FnZXMuVGFuZGVtT3JkZXJNYXJrZXRGbGFnEhMKC1N1YkFjY291",
            "bnRzGA0gAygJEg0KBWRtYUlQGA4gASgJEi0KBkluZm9BZhgPIAEoDjIdLmpz",
            "dW5mdXR1cmVzLm1lc3NhZ2VzLkFwaUZsYWcSMwoGYmxmQXBpGBAgASgOMiMu",
            "anN1bmZ1dHVyZXMubWVzc2FnZXMuQmxhY2tMaXN0RmxhZxIyCgVibGZNbBgR",
            "IAEoDjIjLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLkJsYWNrTGlzdEZsYWcSLAoC",
            "Y2YYEiABKA4yIC5qc3VuZnV0dXJlcy5tZXNzYWdlcy5DbGllbnRGbGFnEi0K",
            "AmdmGBMgASgOMiEuanN1bmZ1dHVyZXMubWVzc2FnZXMuR2F0ZXdheUZsYWcS",
            "MQoDZGxmGBQgASgOMiQuanN1bmZ1dHVyZXMubWVzc2FnZXMuRGlyZWN0TGlu",
            "ZUZsYWci+QEKFFNwZWNpYWxBY2NvdW50RGV0YWlsEjcKA2FnZhgBIAEoDjIq",
            "LmpzdW5mdXR1cmVzLm1lc3NhZ2VzLkFjY291bnRHcm91cENvZGVGbGFnEhAK",
            "CGJyb2tlcmlkGAIgASgJEjkKBHRvbWYYAyABKA4yKy5qc3VuZnV0dXJlcy5t",
            "ZXNzYWdlcy5UYW5kZW1PcmRlck1hcmtldEZsYWcSLQoCZ2YYBCABKA4yIS5q",
            "c3VuZnV0dXJlcy5tZXNzYWdlcy5HYXRld2F5RmxhZxIsCgJjZhgFIAEoDjIg",
            "LmpzdW5mdXR1cmVzLm1lc3NhZ2VzLkNsaWVudEZsYWcisgEKCkNvbm5TdGF0",
            "dXMSCgoCSUQYASABKAkSEAoISWRlbmRpdHkYAiABKAkSLgoGc3RhdHVzGAMg",
            "ASgOMh4uanN1bmZ1dHVyZXMubWVzc2FnZXMuQ29ubkZsYWcSEQoJRXJyb3JD",
            "b2RlGAQgASgJEhAKCEVycm9yTXNnGAUgASgJEjEKBE1vZGUYBiABKA4yIy5q",
            "c3VuZnV0dXJlcy5tZXNzYWdlcy5PbXNBU01vZGVGbGFnIk8KCUhlYXJ0QmVh",
            "dBIuCgZTdGF0dXMYASABKA4yHi5qc3VuZnV0dXJlcy5tZXNzYWdlcy5Db25u",
            "RmxhZxISCgpPbXNWZXJzaW9uGAIgASgJIooBCgpSZXBvcnRMaXN0Eg8KB2Fj",
            "Y291bnQYASABKAkSEAoIaWRlbnRpZHkYAiABKAkSCgoCaWQYAyABKAkSDwoH",
            "c3RhcnRObxgEIAEoBRINCgVlbmRObxgFIAEoBRItCgdyZXBvcnRzGAYgAygL",
            "MhwuanN1bmZ1dHVyZXMubWVzc2FnZXMuUmVwb3J0Ij4KCVBvc2l0aW9ucxIx",
            "Cglwb3NpdGlvbnMYASADKAsyHi5qc3VuZnV0dXJlcy5tZXNzYWdlcy5Qb3Np",
            "dGlvbiI1CgZPcmRlcnMSKwoGb3JkZXJzGAEgAygLMhsuanN1bmZ1dHVyZXMu",
            "bWVzc2FnZXMuT3JkZXIikwwKBU9yZGVyEg8KB0FjY291bnQYASABKAkSEAoI",
            "QnJva2VySUQYAiABKAkSJAoCQnMYAyABKA4yGC5qc3VuZnV0dXJlcy5tZXNz",
            "YWdlcy5CUxIRCglDQW1lc3NhZ2UYBCABKAkSNAoKQ2xpZW50RmxhZxgFIAEo",
            "DjIgLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLkNsaWVudEZsYWcSEwoLQ2xpZW50",
            "T3JkTm8YBiABKAkSCwoDQ250GAcgASgJEjIKCkN1cnJlbmN5SU4YCCABKA4y",
            "Hi5qc3VuZnV0dXJlcy5tZXNzYWdlcy5DdXJyZW5jeRIzCgtDdXJyZW5jeU91",
            "dBgJIAEoDjIeLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLkN1cnJlbmN5EjQKCEV4",
            "Y2hhbmdlGAogASgOMiIuanN1bmZ1dHVyZXMubWVzc2FnZXMuRXhjaGFuZ2VG",
            "bGFnEgoKAklEGAsgASgJEhgKEExvY2FsbWFjaGluZVRpbWUYDCABKAMSNAoK",
            "TWFya2V0ZmxhZxgNIAEoDjIgLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLk1hcmtl",
            "dEZsYWcSEgoKT01TX1Jlc3VsdBgOIAEoCRI0CgpPcHRpb25mbGFnGA8gASgO",
            "MiAuanN1bmZ1dHVyZXMubWVzc2FnZXMuT3B0aW9uRmxhZxI3CgxPcmRlckdh",
            "dGVXYXkYECABKA4yIS5qc3VuZnV0dXJlcy5tZXNzYWdlcy5HYXRld2F5Rmxh",
            "ZxIPCgdPcmRlcklQGBEgASgJEg8KB09yZGVyTm8YEiABKAkSMgoJT3JkZXJ0",
            "eXBlGBMgASgOMh8uanN1bmZ1dHVyZXMubWVzc2FnZXMuT3JkZXJUeXBlEj4K",
            "D3Bvc2l0aW9uX2VmZmVjdBgUIAEoDjIlLmpzdW5mdXR1cmVzLm1lc3NhZ2Vz",
            "LlBvc2l0aW9uX0VmZmVjdBINCgVQcmljZRgVIAEoARIyCglQcmljZWZsYWcY",
            "FiABKA4yHy5qc3VuZnV0dXJlcy5tZXNzYWdlcy5QcmljZUZsYWcSCwoDUVRZ",
            "GBcgASgFEhEKCVJlcXVlc3RJRBgYIAEoCRIKCgJTVBgZIAEoCRISCgpTdWJB",
            "Y2NvdW50GBogASgJEg4KBlN5bWJvbBgbIAEoCRImCgNUaWYYHCABKA4yGS5q",
            "c3VuZnV0dXJlcy5tZXNzYWdlcy5USUYSGwoTVHJhY2VySURfU2VydmVyTWFr",
            "ZRgdIAEoAxINCgVXZWJJRBgeIAEoCRINCgVDQUtleRgfIAEoCRI3CgNhZ2YY",
            "ICABKA4yKi5qc3VuZnV0dXJlcy5tZXNzYWdlcy5BY2NvdW50R3JvdXBDb2Rl",
            "RmxhZxIMCgRJYk5vGCEgASgJEkIKEVN0b3BDb25kaXRpb25mbGFnGCIgASgO",
            "MicuanN1bmZ1dHVyZXMubWVzc2FnZXMuU3RvcENvbmRpdGlvbkZsYWcSEQoJ",
            "U3RvcFByaWNlGCMgASgBEhQKDEd0ZEV4cGlyZWRheRgkIAEoBRIvCgNmdGYY",
            "JSABKA4yIi5qc3VuZnV0dXJlcy5tZXNzYWdlcy5GaWxsVHlwZUZsYWcSDgoG",
            "TWluUXR5GCYgASgFEjQKClRpbWVQZXJpb2QYJyABKA4yIC5qc3VuZnV0dXJl",
            "cy5tZXNzYWdlcy5UaW1lUGVyaW9kEhAKCFByaWNlRGVuGCggASgBEhAKCFBy",
            "aWNlTnVtGCkgASgBEhQKDFN0b3BQcmljZURlbhgqIAEoARIUCgxTdG9wUHJp",
            "Y2VOdW0YKyABKAESOQoEdG9tZhgsIAEoDjIrLmpzdW5mdXR1cmVzLm1lc3Nh",
            "Z2VzLlRhbmRlbU9yZGVyTWFya2V0RmxhZxIyCgNzdWYYLSABKA4yJS5qc3Vu",
            "ZnV0dXJlcy5tZXNzYWdlcy5TcGVjaWFsVXNlckZsYWcSDQoFQjJCSUQYLiAB",
            "KAkSGAoQQ2hlY2tDb2RlRnJvbVNTTxgvIAEoCRIUCgxUb1RhbEFjY291bnQY",
            "MCABKAkSDwoHQVBfS2luZBgxIAEoCRISCgpUcmFkZXJQQVNTGDIgASgJIjgK",
            "B1JlcG9ydHMSLQoHcmVwb3J0cxgBIAMoCzIcLmpzdW5mdXR1cmVzLm1lc3Nh",
            "Z2VzLlJlcG9ydCKfCwoGUmVwb3J0Eg8KB0FjY291bnQYASABKAkSEAoIQWZ0",
            "ZXJRdHkYAiABKAUSEQoJQmVmb3JlUXR5GAMgASgFEhAKCEJyb2tlcklEGAQg",
            "ASgJEiQKAkJzGAUgASgOMhguanN1bmZ1dHVyZXMubWVzc2FnZXMuQlMSNAoK",
            "Q2xpZW50RmxhZxgGIAEoDjIgLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLkNsaWVu",
            "dEZsYWcSEwoLQ2xpZW50T3JkTm8YByABKAkSCwoDQ250GAggASgJEjIKCkN1",
            "cnJlbmN5SU4YCSABKA4yHi5qc3VuZnV0dXJlcy5tZXNzYWdlcy5DdXJyZW5j",
            "eRIzCgtDdXJyZW5jeU91dBgKIAEoDjIeLmpzdW5mdXR1cmVzLm1lc3NhZ2Vz",
            "LkN1cnJlbmN5Eg4KBkVyck1zZxgLIAEoCRIRCglFcnJvckNvZGUYDCABKAkS",
            "NAoIRXhjaGFuZ2UYDSABKA4yIi5qc3VuZnV0dXJlcy5tZXNzYWdlcy5FeGNo",
            "YW5nZUZsYWcSFAoMRXhjaGFuZ2VSYXRlGA4gASgBEiEKGUV4Y2hhbmdlU2Vy",
            "dmVyUmV2ZWl2ZVRpbWUYDyABKAMSJQodRXhjaGFuZ2VTZXJ2ZXJSZXZlaXZl",
            "VGltZV9VVEMYECABKAMSNAoKTWFya2V0ZmxhZxgRIAEoDjIgLmpzdW5mdXR1",
            "cmVzLm1lc3NhZ2VzLk1hcmtldEZsYWcSEAoITWF0Y2hRdHkYEiABKAUSMgoJ",
            "T3JkZXJmdW5jGBMgASgOMh8uanN1bmZ1dHVyZXMubWVzc2FnZXMuT3JkZXJU",
            "eXBlEjcKDE9yZGVyR2F0ZVdheRgUIAEoDjIhLmpzdW5mdXR1cmVzLm1lc3Nh",
            "Z2VzLkdhdGV3YXlGbGFnEg8KB09yZGVySVAYFSABKAkSDwoHT3JkZXJObxgW",
            "IAEoCRI+Cg9Qb3NpdGlvbl9lZmZlY3QYFyABKA4yJS5qc3VuZnV0dXJlcy5t",
            "ZXNzYWdlcy5Qb3NpdGlvbl9FZmZlY3QSDQoFUHJpY2UYGCABKAESMgoJUHJp",
            "Y2VmbGFnGBkgASgOMh8uanN1bmZ1dHVyZXMubWVzc2FnZXMuUHJpY2VGbGFn",
            "EgsKA1FUWRgaIAEoBRIWCg5SZXBvcnRTZXF1ZW5jZRgbIAEoAxIRCglSZXF1",
            "ZXN0SUQYHCABKAkSEgoKU3ViQWNjb3VudBgdIAEoCRIKCgJTVBgeIAEoCRIO",
            "CgZTeW1ib2wYHyABKAkSJgoDVGlmGCAgASgOMhkuanN1bmZ1dHVyZXMubWVz",
            "c2FnZXMuVElGEhAKCFRyYWNlcklEGCEgASgJEh4KFlRyYWRlU2VydmVyUmVj",
            "ZWl2ZVRpbWUYIiABKAMSIgoaVHJhZGVTZXJ2ZXJSZWNlaXZlVGltZV9VVEMY",
            "IyABKAMSDgoGVHJhZGVyGCQgASgJEg0KBVdlYklEGCUgASgJEgwKBEliTm8Y",
            "JiABKAkSGQoRQ2xpZW50TWFjaGluZVRpbWUYJyABKAMSNAoKVGltZVBlcmlv",
            "ZBgoIAEoDjIgLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLlRpbWVQZXJpb2QSEQoJ",
            "U3RvcFByaWNlGCkgASgBEi8KA2Z0ZhgqIAEoDjIiLmpzdW5mdXR1cmVzLm1l",
            "c3NhZ2VzLkZpbGxUeXBlRmxhZxIUCgxHdGRFeHBpcmVkYXkYKyABKAUSDwoH",
            "TWluaVF0eRgsIAEoBRI0CgNzY2YYLSABKA4yJy5qc3VuZnV0dXJlcy5tZXNz",
            "YWdlcy5TdG9wQ29uZGl0aW9uRmxhZxIQCghQcmljZURlbhguIAEoARIQCghQ",
            "cmljZU51bRgvIAEoARIUCgxTdG9wUHJpY2VEZW4YMCABKAESFAoMU3RvcFBy",
            "aWNlTnVtGDEgASgBIjUKBlRyYWRlcxIrCgZ0cmFkZXMYASADKAsyGy5qc3Vu",
            "ZnV0dXJlcy5tZXNzYWdlcy5UcmFkZSKXCQoFVHJhZGUSDwoHQWNjb3VudBgB",
            "IAEoCRIQCghCcm9rZXJJRBgCIAEoCRITCgtCcm9rZXJJRFNlcRgDIAEoCRIk",
            "CgJCcxgEIAEoDjIYLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLkJTEiUKA0JzMRgF",
            "IAEoDjIYLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLkJTEiUKA0JzMhgGIAEoDjIY",
            "LmpzdW5mdXR1cmVzLm1lc3NhZ2VzLkJTEjQKCkNsaWVudEZsYWcYByABKA4y",
            "IC5qc3VuZnV0dXJlcy5tZXNzYWdlcy5DbGllbnRGbGFnEhUKDUNsaWVudE9y",
            "ZGVyTm8YCCABKAkSMgoKQ3VycmVuY3lJThgJIAEoDjIeLmpzdW5mdXR1cmVz",
            "Lm1lc3NhZ2VzLkN1cnJlbmN5EjMKC0N1cnJlbmN5T3V0GAogASgOMh4uanN1",
            "bmZ1dHVyZXMubWVzc2FnZXMuQ3VycmVuY3kSEAoIRGVhbFRpbWUYCyABKAMS",
            "FAoMRGVhbFRpbWVfVVRDGAwgASgDEjQKCEV4Y2hhbmdlGA0gASgOMiIuanN1",
            "bmZ1dHVyZXMubWVzc2FnZXMuRXhjaGFuZ2VGbGFnEhQKDEV4Y2hhbmdlUmF0",
            "ZRgOIAEoARI0CgpNYXJrZXRmbGFnGA8gASgOMiAuanN1bmZ1dHVyZXMubWVz",
            "c2FnZXMuTWFya2V0RmxhZxI3CgxPcmRlckdhdGVXYXkYECABKA4yIS5qc3Vu",
            "ZnV0dXJlcy5tZXNzYWdlcy5HYXRld2F5RmxhZxIPCgdPcmRlcklQGBEgASgJ",
            "Eg8KB09yZGVyTm8YEiABKAkSPgoPUG9zaXRpb25fZWZmZWN0GBMgASgOMiUu",
            "anN1bmZ1dHVyZXMubWVzc2FnZXMuUG9zaXRpb25fRWZmZWN0Eg0KBVByaWNl",
            "GBQgASgBEg4KBlByaWNlMRgVIAEoARIOCgZQcmljZTIYFiABKAESMgoJUHJp",
            "Y2VmbGFnGBcgASgOMh8uanN1bmZ1dHVyZXMubWVzc2FnZXMuUHJpY2VGbGFn",
            "EgsKA1F0eRgYIAEoBRIMCgRRdHkxGBkgASgFEgwKBFF0eTIYGiABKAUSFgoO",
            "UmVwb3J0U2VxdWVuY2UYGyABKAMSCgoCU1QYHCABKAkSDgoGU3ltYm9sGB0g",
            "ASgJEg8KB1N5bWJvbDEYHiABKAkSDwoHU3ltYm9sMhgfIAEoCRISCgpTdWJB",
            "Y2NvdW50GCAgASgJEiYKA1RpZhghIAEoDjIZLmpzdW5mdXR1cmVzLm1lc3Nh",
            "Z2VzLlRJRhIQCghUb2xrZW5JRBgiIAEoAxIQCghUcmFkZXJJRBgjIAEoCRIP",
            "CgdUcmFkZU5vGCQgASgJEgwKBEliTm8YJSABKAkSGQoRQ2xpZW50TWFjaGlu",
            "ZVRpbWUYJiABKAMSNAoKVGltZVBlcmlvZBgnIAEoDjIgLmpzdW5mdXR1cmVz",
            "Lm1lc3NhZ2VzLlRpbWVQZXJpb2QSEQoJUmVxdWVzdElEGCggASgJEhAKCFBy",
            "aWNlRGVuGCkgASgBEhAKCFByaWNlTnVtGCogASgBIoQECgVRdWVyeRIQCghJ",
            "ZGVuZGl0eRgBIAEoCRIPCgdBY2NvdW50GAIgASgJEgoKAklEGAMgASgJEisK",
            "AnFmGAQgASgOMh8uanN1bmZ1dHVyZXMubWVzc2FnZXMuUXVlcnlGbGFnEjQK",
            "CEV4Y2hhbmdlGAUgASgOMiIuanN1bmZ1dHVyZXMubWVzc2FnZXMuRXhjaGFu",
            "Z2VGbGFnEhIKClN0YXJ0T3JkTm8YBiABKAkSEAoIRW5kT3Jkbm8YByABKAkS",
            "DAoERGF0ZRgIIAEoCRIMCgRJYk5vGAkgASgJEhIKCnN1YmFjY291bnQYCiAB",
            "KAkSEAoIQnJva2VySUQYCyABKAkSOQoEdG9tZhgMIAEoDjIrLmpzdW5mdXR1",
            "cmVzLm1lc3NhZ2VzLlRhbmRlbU9yZGVyTWFya2V0RmxhZxI0CgpUaW1lUGVy",
            "aW9kGA0gASgOMiAuanN1bmZ1dHVyZXMubWVzc2FnZXMuVGltZVBlcmlvZBI0",
            "CgpDbGllbnRGbGFnGA4gASgOMiAuanN1bmZ1dHVyZXMubWVzc2FnZXMuQ2xp",
            "ZW50RmxhZxItCgdyZXBvcnRzGA8gAygLMhwuanN1bmZ1dHVyZXMubWVzc2Fn",
            "ZXMuUmVwb3J0EisKBnRyYWRlcxgQIAMoCzIbLmpzdW5mdXR1cmVzLm1lc3Nh",
            "Z2VzLlRyYWRlIt0GCghGRVBRdWVyeRIQCghJZGVuZGl0eRgBIAEoCRIPCgdB",
            "Y2NvdW50GAIgASgJEhAKCEJyb2tlcklEGAMgASgJEjUKDGZlcHF1ZXJ5Zmxh",
            "ZxgEIAEoDjIfLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLlF1ZXJ5RmxhZxI0CghF",
            "eGNoYW5nZRgFIAEoDjIiLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLkV4Y2hhbmdl",
            "RmxhZxIMCgRJYk5vGAYgASgJEhIKClN1YkFjY291bnQYByABKAkSOQoEdG9t",
            "ZhgIIAEoDjIrLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLlRhbmRlbU9yZGVyTWFy",
            "a2V0RmxhZxI0CgpUaW1lUGVyaW9kGAkgASgOMiAuanN1bmZ1dHVyZXMubWVz",
            "c2FnZXMuVGltZVBlcmlvZBI0CgxGcm9tQ3VycmVuY3kYCiABKA4yHi5qc3Vu",
            "ZnV0dXJlcy5tZXNzYWdlcy5DdXJyZW5jeRIyCgpUb0N1cnJlbmN5GAsgASgO",
            "Mh4uanN1bmZ1dHVyZXMubWVzc2FnZXMuQ3VycmVuY3kSDgoGQW1vdW50GAwg",
            "ASgBEhAKCFBhc3N3b3JkGA0gASgJEhIKCkZyb21UeERhdGUYDiABKAkSEAoI",
            "VG9UeERhdGUYDyABKAkSMwoLU2V0Q3VycmVuY3kYECABKA4yHi5qc3VuZnV0",
            "dXJlcy5tZXNzYWdlcy5DdXJyZW5jeRISCgpJZGVuZGl0eUlEGBEgASgJEjsK",
            "D1NldFRyYW5zZmVyRmxhZxgSIAEoDjIiLmpzdW5mdXR1cmVzLm1lc3NhZ2Vz",
            "LlRyYW5zZmVyRmxhZxIwCghTRVFOT0lEWBgTIAMoCzIeLmpzdW5mdXR1cmVz",
            "Lm1lc3NhZ2VzLmZ1dHNlcW5vEjcKDVdSX1FVRV9ERVRBSUwYFCADKAsyIC5q",
            "c3VuZnV0dXJlcy5tZXNzYWdlcy5xdWVfZGV0YWlsEkMKCmNhbmNlbExpc3QY",
            "FSADKAsyLy5qc3VuZnV0dXJlcy5tZXNzYWdlcy5XaXRoZHJhd01hcmdpbkNh",
            "bmNlbFF1ZXJ5EjQKCkNsaWVudEZsYWcYFiABKA4yIC5qc3VuZnV0dXJlcy5t",
            "ZXNzYWdlcy5DbGllbnRGbGFnIo4FCglGRVBSZXN1bHQSEAoISWRlbmRpdHkY",
            "ASABKAkSDwoHQWNjb3VudBgCIAEoCRIQCghCcm9rZXJJRBgDIAEoCRI1Cgxm",
            "ZXBxdWVyeWZsYWcYBCABKA4yHy5qc3VuZnV0dXJlcy5tZXNzYWdlcy5RdWVy",
            "eUZsYWcSLAoGZXF1aXR5GAUgASgLMhwuanN1bmZ1dHVyZXMubWVzc2FnZXMu",
            "RXF1aXR5EjEKCXBvc2l0aW9ucxgGIAMoCzIeLmpzdW5mdXR1cmVzLm1lc3Nh",
            "Z2VzLlBvc2l0aW9uEjsKCWVycm9yQ29kZRgHIAEoDjIoLmpzdW5mdXR1cmVz",
            "Lm1lc3NhZ2VzLkZFUFJlc3VsdEVycm9yQ29kZRIQCghlcnJvck1zZxgIIAEo",
            "CRIMCgRJYk5vGAkgASgJEhIKClN1YkFjY291bnQYCiABKAkSOQoEdG9tZhgL",
            "IAEoDjIrLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLlRhbmRlbU9yZGVyTWFya2V0",
            "RmxhZxJQChV3aXRoZHJhd01hcmdpbklucXVpcmUYDCADKAsyMS5qc3VuZnV0",
            "dXJlcy5tZXNzYWdlcy5XaXRoZHJhd01hcmdpbklucXVpcmVSZXN1bHQSHAoU",
            "d2l0aGRyYXdNYXJnaW5SZXN1bHQYDSABKAkSTgoUd2l0aGRyYXdNYXJnaW5D",
            "YW5jZWwYDiADKAsyMC5qc3VuZnV0dXJlcy5tZXNzYWdlcy5XaXRoZHJhd01h",
            "cmdpbkNhbmNlbFJlc3VsdBJIChR0cmFuc2Zlck1hcmdpblJlc3VsdBgPIAMo",
            "CzIqLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLlRyYW5zZmVyTWFyZ2luUmVzdWx0",
            "Ir4BCgVFcnJvchIQCghpZGVuZGl0eRgBIAEoCRIPCgdBY2NvdW50GAIgASgJ",
            "EgoKAklEGAMgASgJEisKAnFmGAQgASgOMh8uanN1bmZ1dHVyZXMubWVzc2Fn",
            "ZXMuUXVlcnlGbGFnEjQKCEV4Y2hhbmdlGAUgASgOMiIuanN1bmZ1dHVyZXMu",
            "bWVzc2FnZXMuRXhjaGFuZ2VGbGFnEhEKCUVycm9yQ29kZRgGIAEoCRIQCghF",
            "cnJvck1zZxgHIAEoCSKkAwoIUG9zaXRpb24SJAoCQlMYASABKA4yGC5qc3Vu",
            "ZnV0dXJlcy5tZXNzYWdlcy5CUxIOCgZTeW1ib2wYAiABKAkSOQoNRXhjaGFu",
            "Z2VfZmxhZxgDIAEoDjIiLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLkV4Y2hhbmdl",
            "RmxhZxIUCgxFeGNoYW5nZVJhdGUYBCABKAESNAoKTWFya2V0ZmxhZxgFIAEo",
            "DjIgLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLk1hcmtldEZsYWcSEgoKQl9BdmdQ",
            "cmljZRgGIAEoARISCgpCX1RvdGFsUXR5GAcgASgFEhIKClNfQXZnUHJpY2UY",
            "CCABKAESEgoKU19Ub3RhbFF0eRgJIAEoBRIwCghDdXJyZW5jeRgKIAEoDjIe",
            "LmpzdW5mdXR1cmVzLm1lc3NhZ2VzLkN1cnJlbmN5EjQKCm9wdGlvbmZsYWcY",
            "CyABKA4yIC5qc3VuZnV0dXJlcy5tZXNzYWdlcy5PcHRpb25GbGFnEg4KBnl5",
            "eXlNTRgMIAEoBRITCgtTdHJpa2VQcmljZRgNIAEoASLDCQoGRXF1aXR5EhgK",
            "EFdSX01BSU5UQUlOX1JBVEUYASABKAkSGQoRV1JfQUNDT1VOVF9FUVVJVFkY",
            "AiABKAESFQoNV1JfSU5fT1VUX0FNVBgDIAEoARIYChBXUl9VU0FCTEVfTUFS",
            "R0lOGAQgASgBEhcKD1dSX0NPVkVSX0lOQ09NRRgFIAEoARIZChFXUl9JTklU",
            "SUFMX01BUkdJThgGIAEoARIaChJXUl9NQUlOVEFJTl9NQVJHSU4YByABKAES",
            "FQoNV1JfVkFSX0lOQ09NRRgIIAEoARIaChJXUl9BQ0NPVU5UX0JBTEFOQ0UY",
            "CSABKAESGgoSV1JfUkVBTElaRV9QUkVNSVVOGAogASgBEhwKFFdSX1VOUkVB",
            "TElaRV9QUkVNSVVNGAsgASgBEhkKEVdSX0JfT1BUSU9OX1ZBTFVFGAwgASgB",
            "EhkKEVdSX1NfT1BUSU9OX1ZBTFVFGA0gASgBEhIKCldSX1lFU19FUVUYDiAB",
            "KAESHgoWV1JfWUVTX0FDQ09VTlRfQkFMQU5DRRgPIAEoARIUCgxXUl9UT0RB",
            "WV9UT1QYECABKAESFAoMV1JfVE9EQVlfVEFYGBEgASgBEhEKCVdSX0VRVUlU",
            "WRgSIAEoARIUCgxXUl9SSVNLX1JBVEUYEyABKAkSFQoNV1JfQ09WRVJfUkFU",
            "RRgUIAEoARIWCg5XUl9GVUxMX01BUkdJThgVIAEoARIfChdXUl9GVUxMX01B",
            "SU5UQUlOX01BUkdJThgWIAEoARIdChVXUl9GVUxMX1VTQUJMRV9NQVJHSU4Y",
            "FyABKAESFAoMV1JfRlVMTF9SQVRFGBggASgJEhkKEVdSX0ZVTExfUklTS19S",
            "QVRFGBkgASgJEhkKEVdSX0RBWV9UUkFERV9GTEFHGBogASgJEhMKC1dSX0lP",
            "UF9GTEFHGBsgASgJEhkKEVdSX1lFU19UT1RfRVFVSVRZGBwgASgBEhAKCFdS",
            "X0lCX05PGB0gASgJEhYKDldSX0NPVkVSRURfQU1UGB4gASgBEhUKDVdSX0FE",
            "RF9NQVJHSU4YHyABKAESFgoOV1JfQ0FTSF9VU0FCTEUYICABKAESGwoTV1Jf",
            "RlVMTF9DQVNIX1VTQUJMRRghIAEoARIcChRXUl9VTlJFQUxJWkVEX0lOQ09N",
            "RRgiIAEoARIbChNXUl9PX0lOSVRJQUxfTUFSR0lOGCMgASgBEhwKFFdSX09f",
            "TUFJTlRBSU5fTUFSR0lOGCQgASgBEiAKGFdSX09fRlVMTF9JTklUSUFMX01B",
            "UkdJThglIAEoARIhChlXUl9PX0ZVTExfTUFJTlRBSU5fTUFSR0lOGCYgASgB",
            "EhoKEldSX0FERElUSU9OX01BUkdJThgnIAEoARIUCgxXUl9OT19NQVJHSU4Y",
            "KCABKAESFQoNV1JfUFJPTVBUX0FNVBgpIAEoARIaChJXUl9CUF9PUFRJT05f",
            "VkFMVUUYKiABKAESGgoSV1JfU1BfT1BUSU9OX1ZBTFVFGCsgASgBEhoKEldS",
            "X0JDX09QVElPTl9WQUxVRRgsIAEoARIaChJXUl9TQ19PUFRJT05fVkFMVUUY",
            "LSABKAESHwoXV1JfQURESVRJT05fTUFSR0lOX1JBVEUYLiABKAEihgYKA1NT",
            "TxIKCgJJRBgBIAEoCRIMCgRQQVNTGAIgASgJEgoKAklQGAMgASgJEiwKAmNm",
            "GAQgASgOMiAuanN1bmZ1dHVyZXMubWVzc2FnZXMuQ2xpZW50RmxhZxIQCghF",
            "TkRQb2ludBgFIAEoCRISCgpRdWVyeVBvaW50GAYgASgJEhAKCElkZW5kaXR5",
            "GAcgASgJEjUKCGFjY291bnRzGAggAygLMiMuanN1bmZ1dHVyZXMubWVzc2Fn",
            "ZXMuQWNjb3VudERldGFpbBIXCg9yZXNwb25zZU1lc3NhZ2UYCSABKAkSEAoI",
            "VXNlck5hbWUYCiABKAkSKAoCb2YYCyABKA4yHC5qc3VuZnV0dXJlcy5tZXNz",
            "YWdlcy5Pc0ZsYWcSPAoEb3RsZhgMIAEoDjIuLmpzdW5mdXR1cmVzLm1lc3Nh",
            "Z2VzLk9yZGVyVHJpZ2dlckxhbmd1YWdlRmxhZxISCgpvbXNWZXJzaW9uGA0g",
            "ASgJEjcKBW9tcHNmGA4gASgOMiguanN1bmZ1dHVyZXMubWVzc2FnZXMuT3Jk",
            "ZXJNYXhQZXJTZWNGbGFnEhEKCWVycm9yQ29kZRgPIAEoBRINCgVDQUtleRgQ",
            "IAEoCRIYChBDaGVja0NvZGVGcm9tU1NPGBEgASgJEhQKDFRvVGFsQWNjb3Vu",
            "dBgSIAEoCRI3CgxPcmRlckdhdGVXYXkYEyABKA4yIS5qc3VuZnV0dXJlcy5t",
            "ZXNzYWdlcy5HYXRld2F5RmxhZxIQCghDbGllbnRJUBgUIAEoCRIyCgNzdWYY",
            "FSABKA4yJS5qc3VuZnV0dXJlcy5tZXNzYWdlcy5TcGVjaWFsVXNlckZsYWcS",
            "QwoPc3BlY2lhbEFjY291bnRzGBYgAygLMiouanN1bmZ1dHVyZXMubWVzc2Fn",
            "ZXMuU3BlY2lhbEFjY291bnREZXRhaWwSMwoFamZhdWYYFyABKA4yJC5qc3Vu",
            "ZnV0dXJlcy5tZXNzYWdlcy5Kc3VuRkFVc2VyRmxhZxIRCglUcmFkZVBBU1MY",
            "GCABKAkizwcKC1RhbmRlbVF1ZXJ5Eg8KB0FjY291bnQYASABKAkSEAoIQnJv",
            "a2VySUQYAiABKAkSMgoDdHFmGAMgASgOMiUuanN1bmZ1dHVyZXMubWVzc2Fn",
            "ZXMuVGFuZGVtUXVlcnlGbGFnEhYKDklQTV9SRVBMWV9DT0RFGAQgASgJEhYK",
            "DklQTV9UUkFOU19DT0RFGAUgASgJEhkKEUlQTV9GVU5DVElPTl9DT0RFGAYg",
            "ASgBEhMKC0lQTV9URVJNX0lEGAcgASgJEhUKDUlQTV9CUk9LRVJfSUQYCCAB",
            "KAkSEQoJSVBNX0lCX05PGAkgASgJEhcKD0lQTV9CUk9LRVJfTkFNRRgKIAEo",
            "CRISCgpJUE1fVEVMX05PGAsgASgFEhEKCUlQTV9UT0RBWRgMIAEoAxIPCgdG",
            "SUxMRVIxGA0gASgJEhYKDlNFTkRfREFUQV9BUkVBGA4gASgJEhYKDlNFTkRf",
            "S0VFUF9EQVRBGA8gASgJEhQKDFdTX0JST0tFUl9JRBgQIAEoCRIQCghXU19J",
            "Ql9OTxgRIAEoCRIYChBXU19JTlZFU1RPUl9BQ05PGBIgASgDEhIKCldTX1NL",
            "X0FDTk8YEyABKAMSDwoHV1NfS0lORBgUIAEoCRITCgtXU19TUE9PTF9OTxgV",
            "IAEoCRIRCglXU19DT1BJRVMYFiABKAUSFQoNV1NfQ0xPU0VfTUFSSxgXIAEo",
            "CRITCgtXU19QQVNTV09SRBgYIAEoCRIVCg1XU19UUkFERV9EQVRFGBkgASgD",
            "EhIKCldTX0VYQ0hfSUQYGiABKAkSDgoGV1NfS0VZGBsgASgJEhoKEldTX0tF",
            "WV9DT05UUkFDVF9JRBgcIAEoCRIZChFXU19LRVlfTUFUQ0hfREFURRgdIAEo",
            "AxISCgpXU19LRVlfU1BPGB4gASgBEhMKC1dTX0tFWV9LSU5EGB8gASgFEhwK",
            "FFdTX0tFWV9CVVlfU0VMTF9LSU5EGCAgASgJEhQKDFdTX0tFWV9TRVFOTxgh",
            "IAEoBRIXCg9XU19LRVlfT1JERVJfTk8YIiABKAkSFAoMV1NfS0VZX1RSX0lE",
            "GCMgASgJEhIKCldTX0tFWV8yTkQYJCABKAkSFwoPV1NfS0VZX01BVF9GTEFH",
            "GCUgASgJEhcKD1dTX0tFWV9DVVJSRU5DWRgmIAEoCRIUCgxXU19NT0RFX0tJ",
            "TkQYJyABKAkSHgoWV1NfUVVFUllfVVNBQkxFX01BUkdJThgoIAEoCRIPCgdG",
            "SUxMRVIyGCkgASgJEhgKEFdTX1NUUkFURUdZX0NPREUYKiABKAkirAYKDFRh",
            "bmRlbVJlc3VsdBIPCgdBY2NvdW50GAEgASgJEhAKCEJyb2tlcklEGAIgASgJ",
            "EjIKA3RxZhgDIAEoDjIlLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLlRhbmRlbVF1",
            "ZXJ5RmxhZxI+Cg90YW5kZW1SZXBseUFyZWEYBCABKAsyJS5qc3VuZnV0dXJl",
            "cy5tZXNzYWdlcy5UYW5kZW1SZXBseUFyZWESPwoJYWdncmVnYXRlGAUgAygL",
            "MiwuanN1bmZ1dHVyZXMubWVzc2FnZXMuVGFuZGVtUmVzdWx0X0FHR1JFR0FU",
            "RRI5CgZkZXRhaWwYBiADKAsyKS5qc3VuZnV0dXJlcy5tZXNzYWdlcy5UYW5k",
            "ZW1SZXN1bHRfREVUQUlMEksKD3RvZGF5X2FnZ3JlZ2F0ZRgHIAMoCzIyLmpz",
            "dW5mdXR1cmVzLm1lc3NhZ2VzLlRhbmRlbVJlc3VsdF9UT0RBWV9BR0dSRUdB",
            "VEUSRQoMdG9kYXlfZGV0YWlsGAggAygLMi8uanN1bmZ1dHVyZXMubWVzc2Fn",
            "ZXMuVGFuZGVtUmVzdWx0X1RPREFZX0RFVEFJTBJDCgt0b2RheV90cmFkZRgJ",
            "IAMoCzIuLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLlRhbmRlbVJlc3VsdF9UT0RB",
            "WV9UUkFERRJVChRlcXVpdHlfY2FsbF9zZWxsc2lkZRgKIAMoCzI3LmpzdW5m",
            "dXR1cmVzLm1lc3NhZ2VzLlRhbmRlbVJlc3VsdF9FUVVJVFlfQ0FMTF9TRUxM",
            "U0lERRI9CghjdXJyZW5jeRgLIAEoCzIrLmpzdW5mdXR1cmVzLm1lc3NhZ2Vz",
            "LlRhbmRlbVJlc3VsdF9DVVJSRU5DWRJRChJkYXl0cmFkZV9hZ2dyZWdhdGUY",
            "DCADKAsyNS5qc3VuZnV0dXJlcy5tZXNzYWdlcy5UYW5kZW1SZXN1bHRfREFZ",
            "VFJBREVfQUdHUkVHQVRFEkcKDWJlc3RfcG9zaXRpb24YDSABKAsyMC5qc3Vu",
            "ZnV0dXJlcy5tZXNzYWdlcy5UYW5kZW1SZXN1bHRfQkVTVF9QT1NJVElPTiLf",
            "DgoPVGFuZGVtUmVwbHlBcmVhEhUKDVdSX1JFUExZX0NPREUYASABKAUSEwoL",
            "V1JfQURWSVNPUlkYAiABKAkSGgoSV1JfS0VZX0NPTlRSQUNUX0lEGAMgASgJ",
            "EhkKEVdSX0tFWV9NQVRDSF9EQVRFGAQgASgJEhIKCldSX0tFWV9TUE8YBSAB",
            "KAkSMgoLV1JfS0VZX0tJTkQYBiABKA4yHS5qc3VuZnV0dXJlcy5tZXNzYWdl",
            "cy5GZXBLaW5kEjYKFFdSX0tFWV9CVVlfU0VMTF9LSU5EGAcgASgOMhguanN1",
            "bmZ1dHVyZXMubWVzc2FnZXMuQlMSFAoMV1JfS0VZX1NFUU5PGAggASgFEhcK",
            "D1dSX0tFWV9PUkRFUl9OTxgJIAEoCRIUCgxXUl9LRVlfVFJfSUQYCiABKAkS",
            "EgoKV1JfS0VZXzJORBgLIAEoCRIXCg9XUl9LRVlfTUFUX0ZMQUcYDCABKAkS",
            "NwoPV1JfS0VZX0NVUlJFTkNZGA0gASgOMh4uanN1bmZ1dHVyZXMubWVzc2Fn",
            "ZXMuQ3VycmVuY3kSDwoHRklMTEVSMRgOIAEoCRIUCgxXUl9URUxMRVJfTk8Y",
            "DyABKAkSDwoHV1JfQUNOTxgQIAEoCRISCgpXUl9TS19BQ05PGBEgASgJEg8K",
            "B0ZJTExFUjIYEiABKAkSFQoNV1JfQ0xPU0VfTUFSSxgTIAEoCRIYChBXUl9N",
            "QUlOVEFJTl9SQVRFGBQgASgJEhkKEVdSX0FDQ09VTlRfRVFVSVRZGBUgASgB",
            "EhUKDVdSX0lOX09VVF9BTVQYFiABKAESGAoQV1JfVVNBQkxFX01BUkdJThgX",
            "IAEoARIXCg9XUl9DT1ZFUl9JTkNPTUUYGCABKAESGQoRV1JfSU5JVElBTF9N",
            "QVJHSU4YGSABKAESGgoSV1JfTUFJTlRBSU5fTUFSR0lOGBogASgBEhUKDVdS",
            "X1ZBUl9JTkNPTUUYGyABKAESGgoSV1JfQUNDT1VOVF9CQUxBTkNFGBwgASgB",
            "EhoKEldSX1JFQUxJWkVfUFJFTUlVThgdIAEoARIcChRXUl9VTlJFQUxJWkVf",
            "UFJFTUlVTRgeIAEoARIZChFXUl9CX09QVElPTl9WQUxVRRgfIAEoARIZChFX",
            "Ul9TX09QVElPTl9WQUxVRRggIAEoARISCgpXUl9ZRVNfRVFVGCEgASgBEh4K",
            "FldSX1lFU19BQ0NPVU5UX0JBTEFOQ0UYIiABKAESFAoMV1JfVE9EQVlfVE9U",
            "GCMgASgBEhQKDFdSX1RPREFZX1RBWBgkIAEoARIRCglXUl9FUVVJVFkYJSAB",
            "KAESFwoPV1JfREVUX1RFTF9NQVJLGCYgASgJEhQKDFdSX1JJU0tfUkFURRgn",
            "IAEoCRIVCg1XUl9DT1ZFUl9SQVRFGCggASgBEhYKDldSX0ZVTExfTUFSR0lO",
            "GCkgASgBEh8KF1dSX0ZVTExfTUFJTlRBSU5fTUFSR0lOGCogASgBEh0KFVdS",
            "X0ZVTExfVVNBQkxFX01BUkdJThgrIAEoARIUCgxXUl9GVUxMX1JBVEUYLCAB",
            "KAkSGQoRV1JfRlVMTF9SSVNLX1JBVEUYLSABKAkSGQoRV1JfREFZX1RSQURF",
            "X0ZMQUcYLiABKAkSEwoLV1JfSU9QX0ZMQUcYLyABKAkSGQoRV1JfWUVTX1RP",
            "VF9FUVVJVFkYMCABKAESDwoHRklMTEVSMxgxIAEoCRIQCghXUl9JQl9OTxgy",
            "IAEoCRIUCgxXUl9DT1ZFUl9BTVQYMyABKAESFQoNV1JfQUREX01BUkdJThg0",
            "IAEoARIWCg5XUl9DQVNIX1VTQUJMRRg1IAEoARIbChNXUl9GVUxMX0NBU0hf",
            "VVNBQkxFGDYgASgBEhwKFFdSX1VOUkVBTElaRURfSU5DT01FGDcgASgBEhsK",
            "E1dSX09fSU5JVElBTF9NQVJHSU4YOCABKAESHAoUV1JfT19NQUlOVEFJTl9N",
            "QVJHSU4YOSABKAESIAoYV1JfT19GVUxMX0lOSVRJQUxfTUFSR0lOGDogASgB",
            "EiEKGVdSX09fRlVMTF9NQUlOVEFJTl9NQVJHSU4YOyABKAESGgoSV1JfQURE",
            "SVRJT05fTUFSR0lOGDwgASgBEhQKDFdSX05PX01BUkdJThg9IAEoARIVCg1X",
            "Ul9QUk9NUFRfQU1UGD4gASgBEhoKEldSX0JQX09QVElPTl9WQUxVRRg/IAEo",
            "ARIaChJXUl9TUF9PUFRJT05fVkFMVUUYQCABKAESGgoSV1JfQkNfT1BUSU9O",
            "X1ZBTFVFGEEgASgBEhoKEldSX1NDX09QVElPTl9WQUxVRRhCIAEoARIfChdX",
            "Ul9BRERJVElPTl9NQVJHSU5fUkFURRhDIAEoARIPCgdGSUxMRVI0GEQgASgJ",
            "EhAKCFdSX0NPVU5UGEUgASgFEhYKDldSX0RBVEFfRkxBR18xGEYgASgJEhYK",
            "DldSX0RBVEFfRkxBR18yGEcgASgJEhQKDFdSX1JFQURfREFUQRhIIAEoCSK9",
            "DgoWVGFuZGVtUmVzdWx0X0FHR1JFR0FURRIXCg9XUjFfREFUQV9GTEFHXzEY",
            "ASABKAkSFwoPV1IxX0RBVEFfRkxBR18yGAIgASgJEhEKCVdSMV9UUl9JRBgD",
            "IAEoCRIVCg1XUjFfQl9UUl9JRF8xGAQgASgJEh4KFldSMV9CX0NPTU1PRElU",
            "WV9OQU1FXzEYBSABKAkSHAoUV1IxX0JfQ09NTU9ESVRZX0lEXzEYBiABKAkS",
            "IAoYV1IxX0JfU0VUVExFTUVOVF9NT05USF8xGAcgASgFEhwKFFdSMV9CX1NU",
            "UklLRV9QUklDRV8xGAggASgBEh0KFVdSMV9CX0JVWV9TRUxMX0tJTkRfMRgJ",
            "IAEoCRIaChJXUjFfQl9TVE9DS19DT0RFXzEYCiABKAkSFQoNV1IxX0JfVFJf",
            "SURfMhgLIAEoCRIeChZXUjFfQl9DT01NT0RJVFlfTkFNRV8yGAwgASgJEhwK",
            "FFdSMV9CX0NPTU1PRElUWV9JRF8yGA0gASgJEiAKGFdSMV9CX1NFVFRMRU1F",
            "TlRfTU9OVEhfMhgOIAEoBRIcChRXUjFfQl9TVFJJS0VfUFJJQ0VfMhgPIAEo",
            "ARIdChVXUjFfQl9CVVlfU0VMTF9LSU5EXzIYECABKAkSGgoSV1IxX0JfU1RP",
            "Q0tfQ09ERV8yGBEgASgJEhUKDVdSMV9TX1RSX0lEXzEYEiABKAkSHgoWV1Ix",
            "X1NfQ09NTU9ESVRZX05BTUVfMRgTIAEoCRIcChRXUjFfU19DT01NT0RJVFlf",
            "SURfMRgUIAEoCRIgChhXUjFfU19TRVRUTEVNRU5UX01PTlRIXzEYFSABKAUS",
            "HAoUV1IxX1NfU1RSSUtFX1BSSUNFXzEYFiABKAESHQoVV1IxX1NfQlVZX1NF",
            "TExfS0lORF8xGBcgASgJEhoKEldSMV9TX1NUT0NLX0NPREVfMRgYIAEoCRIV",
            "Cg1XUjFfU19UUl9JRF8yGBkgASgJEh4KFldSMV9TX0NPTU1PRElUWV9OQU1F",
            "XzIYGiABKAkSHAoUV1IxX1NfQ09NTU9ESVRZX0lEXzIYGyABKAkSIAoYV1Ix",
            "X1NfU0VUVExFTUVOVF9NT05USF8yGBwgASgFEhwKFFdSMV9TX1NUUklLRV9Q",
            "UklDRV8yGB0gASgBEh0KFVdSMV9TX0JVWV9TRUxMX0tJTkRfMhgeIAEoCRIa",
            "ChJXUjFfU19TVE9DS19DT0RFXzIYHyABKAkSFAoMV1IxX05DX0JfUVRZGCAg",
            "ASgDEhoKEldSMV9OQ19CX0FWR19QUklDRRghIAEoARIUCgxXUjFfTkNfU19R",
            "VFkYIiABKAMSGgoSV1IxX05DX1NfQVZHX1BSSUNFGCMgASgBEhUKDVdSMV9O",
            "T1dfUFJJQ0UYJCABKAESFAoMV1IxX0NPUl9LSU5EGCUgASgJEhYKDldSMV9W",
            "QVJfSU5DT01FGCYgASgBEhcKD1dSMV9PUkRFUl9CX1FUWRgnIAEoAxIXCg9X",
            "UjFfT1JERVJfU19RVFkYKCABKAMSGgoSV1IxX1REX1NfTkVXX09fUVRZGCkg",
            "ASgDEhsKE1dSMV9ZRVNURVJEQVlfUFJJQ0UYKiABKAkSGQoRV1IxX1NUUkFU",
            "RUdZX0NPREUYKyABKAkSHwoXV1IxX1ZBUl9JTkNPTUVfQ1VSUkVOQ1kYLCAB",
            "KAkSFgoOV1IxX0ZfTkNfQl9RVFkYLSABKAMSFgoOV1IxX0ZfTkNfU19RVFkY",
            "LiABKAMSGgoSV1IxX1RSQURFX05DX0JfUVRZGC8gASgDEhoKEldSMV9UUkFE",
            "RV9OQ19TX1FUWRgwIAEoAxIaChJXUjFfU1VCX1ZBUl9JTkNPTUUYMSABKAES",
            "HQoVV1IxX1lFU1RFUkRBWV9QUklDRV8yGDIgASgBEhwKFFdSMV9OQ19CX0FW",
            "R19QUklDRV80GDMgASgBEhwKFFdSMV9OQ19TX0FWR19QUklDRV80GDQgASgB",
            "EhcKD1dSMV9TT1VSQ0VfRkxBRxg1IAEoCRIOCgZGSUxMRVIYNiABKAkSGgoS",
            "V1IxX0JfVkFSX0lOQ09NRV8xGDcgASgBEhoKEldSMV9CX1ZBUl9JTkNPTUVf",
            "Mhg4IAEoARIZChFXUjFfQl9BVkdfUFJJQ0VfMRg5IAEoARIZChFXUjFfQl9B",
            "VkdfUFJJQ0VfMhg6IAEoARIZChFXUjFfQl9OT1dfUFJJQ0VfMRg7IAEoARIZ",
            "ChFXUjFfQl9OT1dfUFJJQ0VfMhg8IAEoARIaChJXUjFfU19WQVJfSU5DT01F",
            "XzEYPSABKAESGgoSV1IxX1NfVkFSX0lOQ09NRV8yGD4gASgBEhkKEVdSMV9T",
            "X0FWR19QUklDRV8xGD8gASgBEhkKEVdSMV9TX0FWR19QUklDRV8yGEAgASgB",
            "EhkKEVdSMV9TX05PV19QUklDRV8xGEEgASgBEhkKEVdSMV9TX05PV19QUklD",
            "RV8yGEIgASgBIvsEChNUYW5kZW1SZXN1bHRfREVUQUlMEhcKD1dSMl9EQVRB",
            "X0ZMQUdfMRgBIAEoCRIXCg9XUjJfREFUQV9GTEFHXzIYAiABKAkSFgoOV1Iy",
            "X01BVENIX0RBVEUYAyABKAkSEwoLV1IyX1RSX0lEXzEYBCABKAkSHAoUV1Iy",
            "X0NPTU1PRElUWV9OQU1FXzEYBSABKAkSGgoSV1IyX0NPTU1PRElUWV9JRF8x",
            "GAYgASgJEh4KFldSMl9TRVRUTEVNRU5UX01PTlRIXzEYByABKAMSGgoSV1Iy",
            "X1NUUklLRV9QUklDRV8xGAggASgBEhsKE1dSMl9CVVlfU0VMTF9LSU5EXzEY",
            "CSABKAkSGAoQV1IyX1NUT0NLX0NPREVfMRgKIAEoCRIVCg1XUjJfTUFUQ0hf",
            "UVRZGAsgASgDEhkKEVdSMl9OT05fQ09WRVJfUVRZGAwgASgDEhcKD1dSMl9N",
            "QVRDSF9QUklDRRgNIAEoARIVCg1XUjJfTk9XX1BSSUNFGA4gASgBEhYKDldS",
            "Ml9WQVJfSU5DT01FGA8gASgBEhYKDldSMl9PUkRFUl9OT19GGBAgASgJEhYK",
            "DldSMl9PUkRFUl9OT19MGBEgASgJEhQKDFdSMl9TUE9fS0lORBgSIAEoCRIZ",
            "ChFXUjJfU1RSQVRFR1lfQ09ERRgTIAEoCRIfChdXUjJfVkFSX0lOQ09NRV9D",
            "VVJSRU5DWRgUIAEoCRIYChBXUjJfREFZX1RSQURFX0lEGBUgASgJEg4KBkZJ",
            "TExFUhgWIAEoCRIZChFXUjJfTUFUQ0hfUFJJQ0VfORgXIAEoARIXCg9XUjJf",
            "Tk9XX1BSSUNFXzkYGCABKAEilw0KHFRhbmRlbVJlc3VsdF9UT0RBWV9BR0dS",
            "RUdBVEUSFwoPV1IzX0RBVEFfRkxBR18xGAEgASgJEhcKD1dSM19EQVRBX0ZM",
            "QUdfMhgCIAEoCRIRCglXUjNfVFJfSUQYAyABKAkSFQoNV1IzX0JfVFJfSURf",
            "MRgEIAEoCRIeChZXUjNfQl9DT01NT0RJVFlfTkFNRV8xGAUgASgJEhwKFFdS",
            "M19CX0NPTU1PRElUWV9JRF8xGAYgASgJEiAKGFdSM19CX1NFVFRMRU1FTlRf",
            "TU9OVEhfMRgHIAEoCRIcChRXUjNfQl9TVFJJS0VfUFJJQ0VfMRgIIAEoCRId",
            "ChVXUjNfQl9CVVlfU0VMTF9LSU5EXzEYCSABKAkSGgoSV1IzX0JfU1RPQ0tf",
            "Q09ERV8xGAogASgJEhUKDVdSM19CX1RSX0lEXzIYCyABKAkSHgoWV1IzX0Jf",
            "Q09NTU9ESVRZX05BTUVfMhgMIAEoCRIcChRXUjNfQl9DT01NT0RJVFlfSURf",
            "MhgNIAEoCRIgChhXUjNfQl9TRVRUTEVNRU5UX01PTlRIXzIYDiABKAkSHAoU",
            "V1IzX0JfU1RSSUtFX1BSSUNFXzIYDyABKAkSHQoVV1IzX0JfQlVZX1NFTExf",
            "S0lORF8yGBAgASgJEhoKEldSM19CX1NUT0NLX0NPREVfMhgRIAEoCRIVCg1X",
            "UjNfU19UUl9JRF8xGBIgASgJEh4KFldSM19TX0NPTU1PRElUWV9OQU1FXzEY",
            "EyABKAkSHAoUV1IzX1NfQ09NTU9ESVRZX0lEXzEYFCABKAkSIAoYV1IzX1Nf",
            "U0VUVExFTUVOVF9NT05USF8xGBUgASgJEhwKFFdSM19TX1NUUklLRV9QUklD",
            "RV8xGBYgASgJEh0KFVdSM19TX0JVWV9TRUxMX0tJTkRfMRgXIAEoCRIaChJX",
            "UjNfU19TVE9DS19DT0RFXzEYGCABKAkSFQoNV1IzX1NfVFJfSURfMhgZIAEo",
            "CRIeChZXUjNfU19DT01NT0RJVFlfTkFNRV8yGBogASgJEhwKFFdSM19TX0NP",
            "TU1PRElUWV9JRF8yGBsgASgJEiAKGFdSM19TX1NFVFRMRU1FTlRfTU9OVEhf",
            "MhgcIAEoCRIcChRXUjNfU19TVFJJS0VfUFJJQ0VfMhgdIAEoCRIdChVXUjNf",
            "U19CVVlfU0VMTF9LSU5EXzIYHiABKAkSGgoSV1IzX1NfU1RPQ0tfQ09ERV8y",
            "GB8gASgJEhQKDFdSM19OQ19CX1FUWRggIAEoCRIaChJXUjNfTkNfQl9BVkdf",
            "UFJJQ0UYISABKAkSFAoMV1IzX05DX1NfUVRZGCIgASgJEhoKEldSM19OQ19T",
            "X0FWR19QUklDRRgjIAEoCRIXCg9XUjNfQl9PUkRFUl9RVFkYJCABKAkSEQoJ",
            "V1IzX0JfUVRZGCUgASgJEhcKD1dSM19CX0FWR19QUklDRRgmIAEoCRIXCg9X",
            "UjNfU19PUkRFUl9RVFkYJyABKAkSEQoJV1IzX1NfUVRZGCggASgJEhcKD1dS",
            "M19TX0FWR19QUklDRRgpIAEoCRIYChBXUjNfQ09WRVJfSU5DT01FGCogASgJ",
            "EhkKEVdSM19TVFJBVEVHWV9DT0RFGCsgASgJEiEKGVdSM19DT1ZFUl9JTkNP",
            "TUVfQ1VSUkVOQ1kYLCABKAkSGwoTV1IzX0JfVFJBX09SREVSX1FUWRgtIAEo",
            "CRIVCg1XUjNfQl9UUkFfUVRZGC4gASgJEhgKEFdSM19CX1RSQV9OQ19RVFkY",
            "LyABKAkSGwoTV1IzX0JfVFJBX0FWR19QUklDRRgwIAEoCRIbChNXUjNfU19U",
            "UkFfT1JERVJfUVRZGDEgASgJEhUKDVdSM19TX1RSQV9RVFkYMiABKAkSGAoQ",
            "V1IzX1NfVFJBX05DX1FUWRgzIAEoCRIbChNXUjNfU19UUkFfQVZHX1BSSUNF",
            "GDQgASgJEhYKDldSM19UUkFfSU5DT01FGDUgASgJEhwKFFdSM19OQ19CX0FW",
            "R19QUklDRV80GDYgASgJEhwKFFdSM19OQ19TX0FWR19QUklDRV80GDcgASgJ",
            "Eh0KFVdSM19CX1RSQV9BVkdfUFJJQ0VfNBg4IAEoCRIdChVXUjNfU19UUkFf",
            "QVZHX1BSSUNFXzQYOSABKAkSGQoRV1IzX0JfQVZHX1BSSUNFXzQYOiABKAkS",
            "GQoRV1IzX1NfQVZHX1BSSUNFXzQYOyABKAkSDgoGRklMTEVSGDwgASgJIqQF",
            "ChlUYW5kZW1SZXN1bHRfVE9EQVlfREVUQUlMEhcKD1dSNF9EQVRBX0ZMQUdf",
            "MRgBIAEoCRIXCg9XUjRfREFUQV9GTEFHXzIYAiABKAkSFgoOV1I0X01BVENI",
            "X0RBVEUYAyABKAkSEwoLV1I0X1RSX0lEXzEYBCABKAkSHAoUV1I0X0NPTU1P",
            "RElUWV9OQU1FXzEYBSABKAkSGgoSV1I0X0NPTU1PRElUWV9JRF8xGAYgASgJ",
            "Eh4KFldSNF9TRVRUTEVNRU5UX01PTlRIXzEYByABKAkSGgoSV1I0X1NUUklL",
            "RV9QUklDRV8xGAggASgJEhsKE1dSNF9CVVlfU0VMTF9LSU5EXzEYCSABKAkS",
            "GAoQV1I0X1NUT0NLX0NPREVfMRgKIAEoCRIVCg1XUjRfTUFUQ0hfUVRZGAsg",
            "ASgJEhkKEVdSNF9OT05fQ09WRVJfUVRZGAwgASgJEhcKD1dSNF9NQVRDSF9Q",
            "UklDRRgNIAEoCRIVCg1XUjRfTk9XX1BSSUNFGA4gASgJEhYKDldSNF9WQVJf",
            "SU5DT01FGA8gASgJEhYKDldSNF9PUkRFUl9OT19GGBAgASgJEhYKDldSNF9P",
            "UkRFUl9OT19MGBEgASgJEhQKDFdSNF9TUE9fS0lORBgSIAEoCRIZChFXUjRf",
            "U1RSQVRFR1lfQ09ERRgTIAEoCRIfChdXUjRfVkFSX0lOQ09NRV9DVVJSRU5D",
            "WRgUIAEoCRIYChBXUjRfREFZX1RSQURFX0lEGBUgASgJEg8KB0ZJTExFUjEY",
            "FiABKAkSGQoRV1I0X01BVENIX1BSSUNFXzkYFyABKAkSFwoPV1I0X05PV19Q",
            "UklDRV85GBggASgJEg8KB0ZJTExFUjIYGSABKAkSDwoHRklMTEVSMxgaIAEo",
            "CSLQBAoYVGFuZGVtUmVzdWx0X1RPREFZX1RSQURFEhcKD1dSNV9EQVRBX0ZM",
            "QUdfMRgBIAEoCRIXCg9XUjVfREFUQV9GTEFHXzIYAiABKAkSFgoOV1I1X09S",
            "REVSX05PX0YYAyABKAkSFgoOV1I1X09SREVSX05PX0wYBCABKAkSGAoQV1I1",
            "X0RBWV9UUkFERV9JRBgFIAEoCRITCgtXUjVfVFJfSURfMRgGIAEoCRIcChRX",
            "UjVfQ09NTU9ESVRZX05BTUVfMRgHIAEoCRIaChJXUjVfQ09NTU9ESVRZX0lE",
            "XzEYCCABKAkSHgoWV1I1X1NFVFRMRU1FTlRfTU9OVEhfMRgJIAEoCRIaChJX",
            "UjVfU1RSSUtFX1BSSUNFXzEYCiABKAkSGwoTV1I1X0JVWV9TRUxMX0tJTkRf",
            "MRgLIAEoCRIYChBXUjVfU1RPQ0tfQ09ERV8xGAwgASgJEhUKDVdSNV9PUkRF",
            "Ul9RVFkYDSABKAkSFwoPV1I1X09SREVSX1BSSUNFGA4gASgJEhUKDVdSNV9N",
            "QVRDSF9RVFkYDyABKAkSFwoPV1I1X01BVENIX1BSSUNFGBAgASgJEhIKCldS",
            "NV9SRU1BUksYESABKAkSGQoRV1I1X1NUUkFURUdZX0NPREUYEiABKAkSDwoH",
            "RklMTEVSMRgTIAEoCRIZChFXUjVfT1JERVJfUFJJQ0VfORgUIAEoCRIZChFX",
            "UjVfTUFUQ0hfUFJJQ0VfORgVIAEoCRIPCgdGSUxMRVIyGBYgASgJEg8KB0ZJ",
            "TExFUjMYFyABKAkiwgkKIVRhbmRlbVJlc3VsdF9FUVVJVFlfQ0FMTF9TRUxM",
            "U0lERRIXCg9XUjdfREFUQV9GTEFHXzEYASABKAkSFwoPV1I3X0RBVEFfRkxB",
            "R18yGAIgASgJEhEKCVdSN19UUl9JRBgDIAEoCRIOCgZGSUxMRVIYBCABKAkS",
            "EQoJV1I3X0JfUVRZGAUgASgJEhEKCVdSN19TX1FUWRgGIAEoCRIPCgdGSUxM",
            "RVIxGAcgASgJEg8KB1dSN19RVFkYCCABKAkSDwoHV1I3X05PUxgJIAEoCRIZ",
            "ChFXUjdfU1RSQVRFR1lfQ09ERRgKIAEoCRIPCgdGSUxMRVIyGAsgASgJEhUK",
            "DVdSN19CX1RSX0lEXzEYDCABKAkSHgoWV1I3X0JfQ09NTU9ESVRZX05BTUVf",
            "MRgNIAEoCRIcChRXUjdfQl9DT01NT0RJVFlfSURfMRgOIAEoCRIgChhXUjdf",
            "Ql9TRVRUTEVNRU5UX01PTlRIXzEYDyABKAkSHAoUV1I3X0JfU1RSSUtFX1BS",
            "SUNFXzEYECABKAkSHQoVV1I3X0JfQlVZX1NFTExfS0lORF8xGBEgASgJEhoK",
            "EldSN19CX1NUT0NLX0NPREVfMRgSIAEoCRIVCg1XUjdfQl9UUl9JRF8yGBMg",
            "ASgJEh4KFldSN19CX0NPTU1PRElUWV9OQU1FXzIYFCABKAkSHAoUV1I3X0Jf",
            "Q09NTU9ESVRZX0lEXzIYFSABKAkSIAoYV1I3X0JfU0VUVExFTUVOVF9NT05U",
            "SF8yGBYgASgJEhwKFFdSN19CX1NUUklLRV9QUklDRV8yGBcgASgJEh0KFVdS",
            "N19CX0JVWV9TRUxMX0tJTkRfMhgYIAEoCRIaChJXUjdfQl9TVE9DS19DT0RF",
            "XzIYGSABKAkSFQoNV1I3X1NfVFJfSURfMRgaIAEoCRIeChZXUjdfU19DT01N",
            "T0RJVFlfTkFNRV8xGBsgASgJEhwKFFdSN19TX0NPTU1PRElUWV9JRF8xGBwg",
            "ASgJEiAKGFdSN19TX1NFVFRMRU1FTlRfTU9OVEhfMRgdIAEoCRIcChRXUjdf",
            "U19TVFJJS0VfUFJJQ0VfMRgeIAEoCRIdChVXUjdfU19CVVlfU0VMTF9LSU5E",
            "XzEYHyABKAkSGgoSV1I3X1NfU1RPQ0tfQ09ERV8xGCAgASgJEhUKDVdSN19T",
            "X1RSX0lEXzIYISABKAkSHgoWV1I3X1NfQ09NTU9ESVRZX05BTUVfMhgiIAEo",
            "CRIcChRXUjdfU19DT01NT0RJVFlfSURfMhgjIAEoCRIgChhXUjdfU19TRVRU",
            "TEVNRU5UX01PTlRIXzIYJCABKAkSHAoUV1I3X1NfU1RSSUtFX1BSSUNFXzIY",
            "JSABKAkSHQoVV1I3X1NfQlVZX1NFTExfS0lORF8yGCYgASgJEhoKEldSN19T",
            "X1NUT0NLX0NPREVfMhgnIAEoCRITCgtXUjdfU1VCX05PUxgoIAEoCRIUCgxX",
            "UjdfTUFSR0lOXzEYKSABKAkSFAoMV1I3X01BUkdJTl8yGCogASgJEhQKDFdS",
            "N19UX01BUkdJThgrIAEoCRIbChNXUjdfTUFSR0lOX0NVUlJFTkNZGCwgASgJ",
            "Eg8KB0ZJTExFUjMYLSABKAkingkKFVRhbmRlbVJlc3VsdF9DVVJSRU5DWRIX",
            "Cg9XUjhfREFUQV9GTEFHXzEYASABKAkSFwoPV1I4X0RBVEFfRkxBR18yGAIg",
            "ASgJEhUKDVdSOF9UUkFOX1JBVEUYAyABKAkSFAoMV1I4X0NVUlJFTkNZGAQg",
            "ASgJEhkKEVdSOF9NQUlOVEFJTl9SQVRFGAUgASgJEhoKEldSOF9BQ0NPVU5U",
            "X0VRVUlUWRgGIAEoCRIWCg5XUjhfSU5fT1VUX0FNVBgHIAEoCRIZChFXUjhf",
            "VVNBQkxFX01BUkdJThgIIAEoCRIYChBXUjhfQ09WRVJfSU5DT01FGAkgASgJ",
            "EhoKEldSOF9JTklUSUFMX01BUkdJThgKIAEoCRIbChNXUjhfTUFJTlRBSU5f",
            "TUFSR0lOGAsgASgJEhYKDldSOF9WQVJfSU5DT01FGAwgASgJEhsKE1dSOF9B",
            "Q0NPVU5UX0JBTEFOQ0UYDSABKAkSGwoTV1I4X1JFQUxJWkVfUFJFTUlVTRgO",
            "IAEoCRIdChVXUjhfVU5SRUFMSVpFX1BSRU1JVU0YDyABKAkSGgoSV1I4X0Jf",
            "T1BUSU9OX1ZBTFVFGBAgASgJEhoKEldSOF9TX09QVElPTl9WQUxVRRgRIAEo",
            "CRITCgtXUjhfWUVTX0VRVRgSIAEoCRIfChdXUjhfWUVTX0FDQ09VTlRfQkFM",
            "QU5DRRgTIAEoCRIVCg1XUjhfVE9EQVlfRkVFGBQgASgJEhUKDVdSOF9UT0RB",
            "WV9UQVgYFSABKAkSEgoKV1I4X0VRVUlUWRgWIAEoCRIVCg1XUjhfUklTS19S",
            "QVRFGBcgASgJEhYKDldSOF9DT1ZFUl9SQVRFGBggASgJEhcKD1dSOF9GVUxM",
            "X01BUkdJThgZIAEoCRIgChhXUjhfRlVMTF9NQUlOVEFJTl9NQVJHSU4YGiAB",
            "KAkSHgoWV1I4X0ZVTExfVVNBQkxFX01BUkdJThgbIAEoCRIVCg1XUjhfRlVM",
            "TF9SQVRFGBwgASgJEhoKEldSOF9GVUxMX1JJU0tfUkFURRgdIAEoCRIXCg9X",
            "UjhfVFJBTl9SQVRFXzYYHiABKAkSFwoPV1I4X0NPVkVSRURfQU1UGB8gASgJ",
            "EiAKGFdSOF9BX0FERF9DT1ZFUkVEX1VTQUJMRRggIAEoCRIZChFXUjhfQV9D",
            "QVNIX1VTQUJMRRghIAEoCRIaChJXUjhfWUVTX1RPVF9FUVVJVFkYIiABKAkS",
            "HQoVV1I4X1VOUkVBTElaRURfSU5DT01FGCMgASgJEh0KFVdSOF9PX09MRF9V",
            "U0VEX01BUkdJThgkIAEoCRIdChVXUjhfT19NQUlOVEFJTl9NQVJHSU4YJSAB",
            "KAkSGQoRV1I4X09fRlVMTF9NQVJHSU4YJiABKAkSGwoTV1I4X09fRlVMTF9N",
            "QUlOVEFJThgnIAEoCRIbChNXUjhfQURESVRJT05fTUFSR0lOGCggASgJEhUK",
            "DVdSOF9OT19NQVJHSU4YKSABKAkSFgoOV1I4X1BST01QVF9BTVQYKiABKAkS",
            "DgoGRklMTEVSGCsgASgJEg8KB0ZJTExFUjIYLCABKAkinQQKH1RhbmRlbVJl",
            "c3VsdF9EQVlUUkFERV9BR0dSRUdBVEUSFwoPV1I5X0RBVEFfRkxBR18xGAEg",
            "ASgJEhcKD1dSOV9EQVRBX0ZMQUdfMhgCIAEoCRIRCglXUjlfVFJfSUQYAyAB",
            "KAkSHAoUV1I5X0NPTU1PRElUWV9OQU1FXzEYBCABKAkSGgoSV1I5X0NPTU1P",
            "RElUWV9JRF8xGAUgASgJEh4KFldSOV9TRVRUTEVNRU5UX01PTlRIXzEYBiAB",
            "KAkSGgoSV1I5X1NUUklLRV9QUklDRV8xGAcgASgJEhsKE1dSOV9CVVlfU0VM",
            "TF9LSU5EXzEYCCABKAkSGAoQV1I5X1NUT0NLX0NPREVfMRgJIAEoCRIVCg1X",
            "UjlfVFJBX0JfUVRZGAogASgJEhcKD1dSOV9UUkFfQl9QUklDRRgLIAEoCRIV",
            "Cg1XUjlfVFJBX1NfUVRZGAwgASgJEhcKD1dSOV9UUkFfU19QUklDRRgNIAEo",
            "CRIaChJXUjlfVFJBX1ZBUl9JTkNPTUUYDiABKAkSFwoPV1I5X1RSQV9PX0Jf",
            "UVRZGA8gASgJEhcKD1dSOV9UUkFfT19TX1FUWRgQIAEoCRIUCgxXUjlfVFJB",
            "X1JBVEUYESABKAkSDgoGRklMTEVSGBIgASgJEhkKEVdSOV9UUkFfQl9QUklD",
            "RV80GBMgASgJEhkKEVdSOV9UUkFfU19QUklDRV80GBQgASgJIrEBChpUYW5k",
            "ZW1SZXN1bHRfQkVTVF9QT1NJVElPThIXCg9XUjBfREFUQV9GTEFHXzEYASAB",
            "KAkSFwoPV1IwX0RBVEFfRkxBR18yGAIgASgJEhEKCVdSMF9UUl9JRBgDIAEo",
            "CRIRCglXUjBfQl9RVFkYBCABKAkSEwoLV1IwX0JfT19RVFkYBSABKAkSEQoJ",
            "V1IwX1NfUVRZGAYgASgJEhMKC1dSMF9TX09fUVRZGAcgASgJIoIPChpUYW5k",
            "ZW1SZXN1bHRfQUdHUkVHQVRFX05FVxIYChBXUjUxX0RBVEFfRkxBR18xGAEg",
            "ASgJEhgKEFdSNTFfREFUQV9GTEFHXzIYAiABKAkSEgoKV1I1MV9UUl9JRBgD",
            "IAEoCRIWCg5XUjUxX0JfVFJfSURfMRgEIAEoCRIfChdXUjUxX0JfQ09NTU9E",
            "SVRZX05BTUVfMRgFIAEoCRIdChVXUjUxX0JfQ09NTU9ESVRZX0lEXzEYBiAB",
            "KAkSIQoZV1I1MV9CX1NFVFRMRU1FTlRfTU9OVEhfMRgHIAEoCRIdChVXUjUx",
            "X0JfU1RSSUtFX1BSSUNFXzEYCCABKAkSHgoWV1I1MV9CX0JVWV9TRUxMX0tJ",
            "TkRfMRgJIAEoCRIbChNXUjUxX0JfU1RPQ0tfQ09ERV8xGAogASgJEhYKDldS",
            "NTFfQl9UUl9JRF8yGAsgASgJEh8KF1dSNTFfQl9DT01NT0RJVFlfTkFNRV8y",
            "GAwgASgJEh0KFVdSNTFfQl9DT01NT0RJVFlfSURfMhgNIAEoCRIhChlXUjUx",
            "X0JfU0VUVExFTUVOVF9NT05USF8yGA4gASgJEh0KFVdSNTFfQl9TVFJJS0Vf",
            "UFJJQ0VfMhgPIAEoCRIeChZXUjUxX0JfQlVZX1NFTExfS0lORF8yGBAgASgJ",
            "EhsKE1dSNTFfQl9TVE9DS19DT0RFXzIYESABKAkSFgoOV1I1MV9TX1RSX0lE",
            "XzEYEiABKAkSHwoXV1I1MV9TX0NPTU1PRElUWV9OQU1FXzEYEyABKAkSHQoV",
            "V1I1MV9TX0NPTU1PRElUWV9JRF8xGBQgASgJEiEKGVdSNTFfU19TRVRUTEVN",
            "RU5UX01PTlRIXzEYFSABKAkSHQoVV1I1MV9TX1NUUklLRV9QUklDRV8xGBYg",
            "ASgJEh4KFldSNTFfU19CVVlfU0VMTF9LSU5EXzEYFyABKAkSGwoTV1I1MV9T",
            "X1NUT0NLX0NPREVfMRgYIAEoCRIWCg5XUjUxX1NfVFJfSURfMhgZIAEoCRIf",
            "ChdXUjUxX1NfQ09NTU9ESVRZX05BTUVfMhgaIAEoCRIdChVXUjUxX1NfQ09N",
            "TU9ESVRZX0lEXzIYGyABKAkSIQoZV1I1MV9TX1NFVFRMRU1FTlRfTU9OVEhf",
            "MhgcIAEoCRIdChVXUjUxX1NfU1RSSUtFX1BSSUNFXzIYHSABKAkSHgoWV1I1",
            "MV9TX0JVWV9TRUxMX0tJTkRfMhgeIAEoCRIbChNXUjUxX1NfU1RPQ0tfQ09E",
            "RV8yGB8gASgJEhUKDVdSNTFfTkNfQl9RVFkYICABKAkSGwoTV1I1MV9OQ19C",
            "X0FWR19QUklDRRghIAEoCRIVCg1XUjUxX05DX1NfUVRZGCIgASgJEhsKE1dS",
            "NTFfTkNfU19BVkdfUFJJQ0UYIyABKAkSFgoOV1I1MV9OT1dfUFJJQ0UYJCAB",
            "KAkSFQoNV1I1MV9DT1JfS0lORBglIAEoCRIXCg9XUjUxX1ZBUl9JTkNPTUUY",
            "JiABKAkSGAoQV1I1MV9PUkRFUl9CX1FUWRgnIAEoCRIYChBXUjUxX09SREVS",
            "X1NfUVRZGCggASgJEhsKE1dSNTFfVERfU19ORVdfT19RVFkYKSABKAkSHAoU",
            "V1I1MV9ZRVNURVJEQVlfUFJJQ0UYKiABKAkSGgoSV1I1MV9TVFJBVEVHWV9D",
            "T0RFGCsgASgJEiAKGFdSNTFfVkFSX0lOQ09NRV9DVVJSRU5DWRgsIAEoCRIX",
            "Cg9XUjUxX0ZfTkNfQl9RVFkYLSABKAkSFwoPV1I1MV9GX05DX1NfUVRZGC4g",
            "ASgJEhsKE1dSNTFfVFJBREVfTkNfQl9RVFkYLyABKAkSGwoTV1I1MV9UUkFE",
            "RV9OQ19TX1FUWRgwIAEoCRIbChNXUjUxX1NVQl9WQVJfSU5DT01FGDEgASgJ",
            "Eh4KFldSNTFfWUVTVEVSREFZX1BSSUNFXzIYMiABKAkSHQoVV1I1MV9OQ19C",
            "X0FWR19QUklDRV80GDMgASgJEh0KFVdSNTFfTkNfU19BVkdfUFJJQ0VfNBg0",
            "IAEoCRIYChBXUjUxX1NPVVJDRV9GTEFHGDUgASgJEg4KBkZJTExFUhg2IAEo",
            "CRIbChNXUjUxX0JfVkFSX0lOQ09NRV8xGDcgASgJEhsKE1dSNTFfQl9WQVJf",
            "SU5DT01FXzIYOCABKAkSGgoSV1I1MV9CX0FWR19QUklDRV8xGDkgASgJEhoK",
            "EldSNTFfQl9BVkdfUFJJQ0VfMhg6IAEoCRIaChJXUjUxX0JfTk9XX1BSSUNF",
            "XzEYOyABKAkSGgoSV1I1MV9CX05PV19QUklDRV8yGDwgASgJEhsKE1dSNTFf",
            "U19WQVJfSU5DT01FXzEYPSABKAkSGwoTV1I1MV9TX1ZBUl9JTkNPTUVfMhg+",
            "IAEoCRIaChJXUjUxX1NfQVZHX1BSSUNFXzEYPyABKAkSGgoSV1I1MV9TX0FW",
            "R19QUklDRV8yGEAgASgJEhoKEldSNTFfU19OT1dfUFJJQ0VfMRhBIAEoCRIa",
            "ChJXUjUxX1NfTk9XX1BSSUNFXzIYQiABKAkiogQKElRhbmRlbUFjY291bnRR",
            "dWVyeRISCgpUUkFOU19DT0RFGAEgASgJEhUKDUZVTkNUSU9OX0NPREUYAiAB",
            "KAkSDgoGVEVMX05PGAMgASgJEg0KBVRPREFZGAQgASgJEhEKCVVOSVRfRklM",
            "RRgFIAEoCRIUCgxXU19CUk9LRVJfSUQYBiABKAkSEAoIV1NfSUJfTk8YByAB",
            "KAkSGAoQV1NfSU5WRVNUT1JfQUNOTxgIIAEoCRISCgpXU19TS19BQ05PGAkg",
            "ASgJEhQKDFdTX01PREVfS0lORBgKIAEoCRIRCglXU19QQVNTV0QYCyABKAkS",
            "FgoOV1NfU0VDVVJFX0tJTkQYDCABKAkSFgoOV1NfTE9HSU5fSURfTk8YDSAB",
            "KAkSGwoTV1NfQVVUT19PRkZTRVRfRkxBRxgOIAEoCRIUCgxXU19QT1NUX0ZM",
            "QUcYDyABKAkSGAoQV1NfRU1BSUxfQUREUkVTUxgQIAEoCRIYChBXU19BVVRP",
            "XzQyOV9GTEFHGBEgASgJEhQKDFdTX0FQUExZX1lNRBgSIAEoCRIVCg1XU19B",
            "UFBMWV9USU1FGBMgASgJEhMKC1dTX01JVF9GTEFHGBQgASgJEhsKE1dTX0FV",
            "VE9fTUFSR0lOX0ZMQUcYFSABKAkSGAoQV1NfRVVSRVhfRkZfQUNOTxgWIAEo",
            "CRIPCgdGSUxMRVIxGBcgASgJEg8KB0ZJTExFUjIYGCABKAkiqwIKFVRhbmRl",
            "bVN1YkFjY291bnRRdWVyeRISCgpUUkFOU19DT0RFGAEgASgJEhUKDUZVTkNU",
            "SU9OX0NPREUYAiABKAkSDgoGVEVMX05PGAMgASgJEg0KBVRPREFZGAQgASgJ",
            "EhEKCVVOSVRfRklMRRgFIAEoCRIUCgxXU19CUk9LRVJfSUQYBiABKAkSEAoI",
            "V1NfSUJfTk8YByABKAkSFgoOV1NfT1BFTl9EQVRFX1MYCCABKAkSFgoOV1Nf",
            "T1BFTl9EQVRFX0UYCSABKAkSEgoKV1NfRlVfQUNOTxgKIAEoCRISCgpXU19G",
            "Vl9BQ05PGAsgASgJEg4KBldTX0tFWRgMIAEoCRIVCg1XU19LRVlfRklMTEVS",
            "GA0gASgJEg4KBkZJTExFUhgOIAEoCSKYBAoTVGFuZGVtQWNjb3VudFJlc3Vs",
            "dBIVCg1XUl9SRVBMWV9DT0RFGAEgASgJEhMKC1dSX0FEVklTT1JZGAIgASgJ",
            "EhgKEFdSX0VNQUlMX0FERFJFU1MYAyABKAkSFAoMV1JfUE9TVF9GTEFHGAQg",
            "ASgJEhgKEFdSX0FVVE9fNDI5X0ZMQUcYBSABKAkSFAoMV1JfVElDS19GTEFH",
            "GAYgASgJEhsKE1dSX0FVVE9fTUFSR0lOX0ZMQUcYByABKAkSGgoSV1JfRVVS",
            "RVhfU0lHTl9GTEFHGAggASgJEhgKEFdSX0VVUkVYX0ZGX0FDTk8YCSABKAkS",
            "FAoMV1JfQlJPS0VSX0lEGAogASgJEg8KB1dSX0tJTkQYCyABKAkSEwoLV1Jf",
            "RE1BX0ZMQUcYDCABKAkSEwoLV1JfVklQX0ZMQUcYDSABKAkSFQoNV1JfVFBW",
            "SVBfRkxBRxgOIAEoCRITCgtXUl9BUElfRkxBRxgPIAEoCRIOCgZGSUxMRVIY",
            "ECABKAkSFgoOV1JfU1RBVFVTX0ZMQUcYESABKAkSEAoIV1JfQUVfSUQYEiAB",
            "KAkSEQoJV1JfTkFFX0lEGBMgASgJEhUKDVdSX1RSQURFX0RBVEUYFCABKAkS",
            "HwoXV1JfVFJBX0lOVkVTVF9BTVRfTElNSVQYFSABKAkSDwoHRklMTEVSMRgW",
            "IAEoCRIPCgdGSUxMRVIyGBcgASgJItMCChZUYW5kZW1TdWJBY2NvdW50UmVz",
            "dWx0EhUKDVdSX1JFUExZX0NPREUYASABKAkSEwoLV1JfQURWSVNPUlkYAiAB",
            "KAkSDgoGV1JfS0VZGAMgASgJEhUKDVdSX0tFWV9GSUxMRVIYBCABKAkSFAoM",
            "V1JfVEVMTEVSX05PGAUgASgJEg8KB1dSX0FDTk8YBiABKAkSEgoKV1JfU0tf",
            "QUNOTxgHIAEoCRIVCg1XUl9QSE9ORV9OT19PGAggASgJEhUKDVdSX1BIT05F",
            "X05PX0gYCSABKAkSFwoPV1JfQUNUX1BIT05FX05PGAogASgJEg4KBkZJTExF",
            "UhgLIAEoCRIQCghXUl9DT1VOVBgMIAEoCRJCCgxXUl9SRUFEX0RBVEEYDSAD",
            "KAsyLC5qc3VuZnV0dXJlcy5tZXNzYWdlcy5UYW5kZW1TdWJBY2NvdW50T0ND",
            "VVJTIvEBChZUYW5kZW1TdWJBY2NvdW50T0NDVVJTEhIKCldSX0ZVX0FDTk8Y",
            "ASABKAkSEgoKV1JfRlZfQUNOTxgCIAEoCRISCgpXUl9GVV9OQU1FGAMgASgJ",
            "EhIKCldSX0ZWX05BTUUYBCABKAkSFAoMV1JfRlVfREVHUkVFGAUgASgJEhgK",
            "EFdSX0ZVX05FVF9ERUdSRUUYBiABKAkSFAoMV1JfRlZfREVHUkVFGAcgASgJ",
            "EhgKEFdSX0ZWX05FVF9ERUdSRUUYCCABKAkSFwoPV1JfRlZfT1BFTl9EQVRF",
            "GAkgASgJEg4KBkZJTExFUhgKIAEoCSKvAgobV2l0aGRyYXdNYXJnaW5JbnF1",
            "aXJlUmVzdWx0EhEKCVdLX05fREFURRgBIAEoCRIUCgxXS19OX1RYX1RJTUUY",
            "AiABKAkSFAoMV0tfTl9CQU5LX0lEGAMgASgJEhQKDFdLX05fQkFOS19OTxgE",
            "IAEoCRIUCgxXS19OX1RYX0NPREUYBSABKAkSNQoNV0tfTl9DVVJSRU5DWRgG",
            "IAEoDjIeLmpzdW5mdXR1cmVzLm1lc3NhZ2VzLkN1cnJlbmN5EhQKDFdLX05f",
            "T1JJX0FNVBgHIAEoARIcChRXS19OX0RBV19BUFBMWV9TRVFOTxgIIAEoCRI6",
            "ChBXS19OX0NBTkNFTF9GTEFHGAkgASgOMiAuanN1bmZ1dHVyZXMubWVzc2Fn",
            "ZXMuQ2FuY2VsRmxhZyLPAQoaV2l0aGRyYXdNYXJnaW5DYW5jZWxSZXN1bHQS",
            "EwoLV1NfQURWSVNPUlkYASABKAkSEAoIV1NfU0VRTk8YAiABKAkSEgoKV1Nf",
            "VFhfREFURRgDIAEoCRISCgpXU19UWF9USU1FGAQgASgJEhgKEFdTX0lOVkVT",
            "VE9SX0FDTk8YBSABKAkSEQoJV1NfTlRfQU1UGAYgASgBEjUKC1N0YXR1c19G",
            "bGFnGAcgASgOMiAuanN1bmZ1dHVyZXMubWVzc2FnZXMuQ2FuY2VsRmxhZyIs",
            "CghmdXRzZXFubxINCgVTRVFOTxgBIAEoCRIRCglBUFBMWURBVEUYAiABKAki",
            "/AIKFFRyYW5zZmVyTWFyZ2luUmVzdWx0EjwKEFdLX05fSU5fT1VUX0ZMQUcY",
            "ASABKA4yIi5qc3VuZnV0dXJlcy5tZXNzYWdlcy5UcmFuc2ZlckZsYWcSFAoM",
            "V0tfTl9CQU5LX0lEGAIgASgJEhQKDFdLX05fQkFOS19OTxgDIAEoCRIhChlX",
            "S19OX0lOX09VVF9JTlZFU1RPUl9BQ05PGAQgASgJEhQKDFdLX05fT1JJX0FN",
            "VBgFIAEoARI1Cg1XS19OX0NVUlJFTkNZGAYgASgOMh4uanN1bmZ1dHVyZXMu",
            "bWVzc2FnZXMuQ3VycmVuY3kSFwoPV0tfTl9BUFBMWV9EQVRFGAcgASgJEhcK",
            "D1dLX05fQVBQTFlfVElNRRgIIAEoCRI6ChBXS19OX0NBTkNFTF9GTEFHGAkg",
            "ASgOMiAuanN1bmZ1dHVyZXMubWVzc2FnZXMuQ2FuY2VsRmxhZxIcChRXS19O",
            "X0RBV19BUFBMWV9TRVFOTxgKIAEoCSLUBQoKcXVlX2RldGFpbBIUCgxXU19C",
            "Uk9LRVJfSUQYASABKAkSGQoRV1NfQlJPS0VSX0JBTktfSUQYAiABKAkSFwoP",
            "V1NfQlJPS0VSX0FDQ05PGAMgASgJEhsKE1dTX0lOVkVTVE9SX0JBTktfSUQY",
            "BCABKAkSHgoWV1NfSU5WRVNUT1JfQkFOS19BQ0NOTxgFIAEoCRIWCg5XU19D",
            "QU5DRUxfRkxBRxgGIAEoCRITCgtXU19DVVJSRU5DWRgHIAEoCRIPCgdXU19N",
            "RU1PGAggASgJEhAKCFdTX0lCX05PGAkgASgJEhgKEFdTX0lOVkVTVE9SX05B",
            "TUUYCiABKAkSFAoMV1NfVFhfTUVUSE9EGAsgASgJEhUKDVdTX0JBTktfU0VR",
            "Tk8YDCABKAkSGAoQV1NfSU5WRVNUT1JfQUNOTxgNIAEoCRIRCglXU19OVF9B",
            "TVQYDiABKAkSEgoKV1NfVFhfREFURRgPIAEoCRIQCghXU19TRVFOTxgQIAEo",
            "CRIUCgxXU19UUkFOX1JBVEUYESABKAkSFwoPV1NfT1JJR0lOQUxfQU1UGBIg",
            "ASgJEhIKCldTX1RYX1RJTUUYEyABKAkSFAoMV1NfTVNHX1NFUU5PGBQgASgJ",
            "EhgKEFdTX0JBTktfQUNDX0RBVEUYFSABKAkSDgoGV1NfVEVMGBYgASgJEhgK",
            "EFdTX1RSQU5TRkVSX01BUksYFyABKAkSFgoOV1NfU09VUkNFX01BUksYGCAB",
            "KAkSGwoTV1NfNzA3X0FDQ09VTlRfTkFNRRgZIAEoCRIcChRXU183MDdfSU5W",
            "X0JBTktfTkFNRRgaIAEoCRIZChFXU183MDdfQkFUQ0hfREFURRgbIAEoCRIZ",
            "ChFXU183MDdfQkFUQ0hfVElNRRgcIAEoCRIbChNXU183MDdfQVBQTFlfVElN",
            "RV84GB0gASgJEhIKCldTX1RYX0ZMQUcYHiABKAkikgEKGVdpdGhkcmF3TWFy",
            "Z2luQ2FuY2VsUXVlcnkSHAoUV0tfTl9EQVdfQVBQTFlfU0VRTk8YASABKAkS",
            "GwoTV0tfTl9EQVdfQVBQTFlfREFURRgCIAEoCRI6ChBXS19OX0NBTkNFTF9G",
            "TEFHGAMgASgOMiAuanN1bmZ1dHVyZXMubWVzc2FnZXMuQ2FuY2VsRmxhZyp2",
            "CgtHYXRld2F5RmxhZxIKCgZHd05vbmUQABIMCghHd1NwZWVkeRABEgkKBUd3",
            "SWNlEAISDQoJR3dYZnV0dXJlEAMSDAoIR3dOb211cmEQBBIMCghHd1RhbmRl",
            "bRAFEgwKCEd3WXVhbnRhEAYSCQoFR3dSVFMQBypFChFTdG9wQ29uZGl0aW9u",
            "RmxhZxIOCgpTdG9wY2ZOb25lEAASEAoMU3RvcGNmTm9ybWFsEAESDgoKU3Rv",
            "cGNmU3RvcBACKs8BCgtPTVNOb2RlRmxhZxINCglPbXNuZk5vbmUQABIMCghP",
            "bXNuZk9ycxABEhQKEE9tc25mUXVlcnlzZXJ2ZXIQAhIMCghPbXNuZkZlcBAD",
            "EgwKCE9tc25mUm1zEAQSCwoHT21zbmZBcBAFEhIKDk9tc25mQXBpY2xpZW50",
            "EAYSDAoIT21zbmZNa3QQBxIRCg1PbXNuZkd3U3BlZWR5EAgSDgoKT21zbmZH",
            "d0ljZRAJEhEKDU9tc25mR3dUYW5kZW0QChIMCghPbXNuZlJycxALKpsBCgpD",
            "bGllbnRGbGFnEgoKBkNmTm9uZRAAEgwKCENmSWNld2ViEAESEgoOQ2ZJY2Vh",
            "bmRyb2lkcHAQAhIPCgtDZkljZWlwaG9uZRADEg0KCUNmSnN1bmh0cxAEEhIK",
            "DkNmTW9ybmluZ2xpZ2h0EAUSDwoLQ2ZDdXN0b21pemUQBhIMCghDZk1pdGFr",
            "ZRAHEgwKCENmSnN1bmZhEAgqNwoGT3NGbGFnEgoKBm9mTm9uZRAAEgkKBW9m",
            "V2luEAESCwoHb2ZMaW51eBACEgkKBW9mSW9zEAMqXgoDVElGEgoKBlRmTm9u",
            "ZRAAEgkKBVRmUm9kEAESCQoFVGZGb2sQAhIJCgVUZklvYxADEgkKBVRmRGF5",
            "EAQSCQoFVGZGYWsQBRIJCgVUZkd0YxAGEgkKBVRmR3RkEAcqOwoMRmlsbFR5",
            "cGVGbGFnEgoKBkZmTm9uZRAAEgkKBUZmQW55EAESCQoFRmZBbGwQAhIJCgVG",
            "Zk1pbhADKicKAkJTEgoKBlNmTm9uZRAAEgkKBVNmQnV5EAESCgoGU2ZTZWxs",
            "EAIqcAoJUHJpY2VGbGFnEgoKBlBmTm9uZRAAEg8KC1BmU3BlY2lmaWVkEAES",
            "DAoIUGZNYXJrZXQQAhIQCgxQZlN0b3BNYXJrZXQQAxITCg9QZlN0b3BTcGVj",
            "aWZpZWQQBBIRCg1QZk1hcmtldFJhbmdlEAUqUgoPUG9zaXRpb25fRWZmZWN0",
            "EgoKBlBlTm9uZRAAEgoKBlBlT3BlbhABEgsKB1BlQ2xvc2UQAhIOCgpQZURh",
            "eVRyYWRlEAMSCgoGUGVBdXRvEAQqfgoJT3JkZXJUeXBlEgoKBk90Tm9uZRAA",
            "EgkKBU90TmV3EAESDAoIT3RDYW5jZWwQAhIPCgtPdE1vZGlmeVF0eRADEhEK",
            "DU90TW9kaWZ5UHJpY2UQBBIMCghPdE1vZGlmeRAFEg0KCU90UmVxdWVzdBAG",
            "EgsKB090RXJyb3IQBypQCgpNYXJrZXRGbGFnEgoKBk1mTm9uZRAAEgkKBU1m",
            "RnV0EAESCQoFTWZPcHQQAhIPCgtNZk9wdHNwcmVhZBADEg8KC01mRnV0c3By",
            "ZWFkEAQqLwoKT3B0aW9uRmxhZxIKCgZPZk5vbmUQABIKCgZPZkNhbGwQARIJ",
            "CgVPZlB1dBACKocCCgxFeGNoYW5nZUZsYWcSCgoGRWZOb25lEAASDAoIRWZU",
            "YWlmZXgQARIKCgZFZkhrZmUQAhIJCgVFZlNneBADEgkKBUVmQ21lEAQSDAoI",
            "RWZDbWVjYnQQBRILCgdFZk55Ym90EAYSCwoHRWZOeW1leBAHEgsKB0VmQ29t",
            "ZXgQCBIJCgVFZkljZRAJEg4KCkVmRU5YVF9QQVIQChILCgdFZlRvY29tEAsS",
            "CQoFRWZKcHgQDBIJCgVFZkxlbRANEg0KCUVmRXVyZXhUVxAOEgsKB0VmRXVy",
            "ZXgQDxILCgdFZkljZVVrEBASCQoFRWZPc2UQERIJCgVFZlRnZRASEgkKBUVm",
            "VGNlEBMqhwIKCEN1cnJlbmN5EgsKB0N1ck5vbmUQABIKCgZDdXJBdWQQARIK",
            "CgZDdXJDYWQQAhIKCgZDdXJDaGYQAxIKCgZDdXJDbnkQBBIKCgZDdXJFdXIQ",
            "BRIKCgZDdXJHYnAQBhIKCgZDdXJIa2QQBxIKCgZDdXJJZHIQCBIKCgZDdXJK",
            "cHkQCRIKCgZDdXJLcncQChIKCgZDdXJNeXIQCxIKCgZDdXJOemQQDBIKCgZD",
            "dXJQaHAQDRIKCgZDdXJTZWsQDhIKCgZDdXJTZ2QQDxIKCgZDdXJUaGIQEBIK",
            "CgZDdXJUd2QQERIKCgZDdXJVc2QQEhIKCgZDdXJWbmQQExIKCgZDdXJaYXIQ",
            "FCq6AQoLTWVzc2FnZUZsYWcSCwoHTXNnTm9uZRAAEgwKCE1zZ09yZGVyEAES",
            "DQoJTXNnUmVwb3J0EAISDAoITXNnVHJhZGUQAxIPCgtNc2dGZXBxdWVyeRAE",
            "EhAKDE1zZ0ZlcHJlc3VsdBAFEg8KC01zZ1VzZXJkYXRhEAYSDAoITXNnUXVl",
            "cnkQBxIRCg1Nc2dDb25uc3RhdHVzEAgSDAoITXNnRXJyb3IQCRIQCgxNc2dW",
            "ZXJpZnlMb2cQCiqVAQoPTWVzc2FnZUNvbm5GbGFnEgoKBlpmTm9uZRAAEgkK",
            "BVpmUHViEAESCQoFWmZTdWIQAhIJCgVaZlJlcBADEgkKBVpmUmVxEAQSDAoI",
            "WmZSb3V0ZXIQBRIMCghaZkRlYWxlchAGEgoKBlpmUHVzaBAHEgoKBlpmUHVs",
            "bBAIEgoKBlprUGF0aBAJEgoKBlpnUnJwYxAKKr4BCghDb25uRmxhZxIKCgZD",
            "c05vbmUQABILCgdDc0FsaXZlEAESDQoJQ3NCaW5kaW5nEAISEAoMQ3NDb25u",
            "ZWN0aW5nEAMSDwoLQ3NDb25uZWN0ZWQQBBISCg5Dc0Rpc2Nvbm5lY3RlZBAF",
            "EgsKB0NzT3JkZXIQBhIPCgtDc1JlY29ubmVjdBAHEgwKCENzUmVwb3J0EAgS",
            "DQoJQ3NTdXNwZW5kEAkSCwoHQ3NUcmFkZRAKEgsKB0NzRXJyb3IQCyoqCgdG",
            "ZXBLaW5kEgkKBUZrTWF0EAASCQoFRmtEb3MQARIJCgVGa1NwbxACKuYBCg9U",
            "YW5kZW1RdWVyeUZsYWcSCwoHVHFmTm9uZRAAEhEKDVRxZkFnZ3JlZ2F0ZUUQ",
            "ARINCglUcWZEZXRhaWwQAhIVChFUcWZUb2RheUFnZ3JlZ2F0ZRADEhIKDlRx",
            "ZlRvZGF5RGV0YWlsEAQSEQoNVHFmVG9kYXlUcmFkZRAFEgsKB1RxZk51bGwQ",
            "BhIZChVUcWZFcXVpdHlDYWxsU2VsbHNpZGUQBxIPCgtUcWZDdXJyZW5jeRAI",
            "EhgKFFRxZkRheXRyYWRlQWdncmVnYXRlEAkSEwoPVHFmQmVzdFBvc2l0aW9u",
            "EAoqLgoHVklQRmxhZxIKCgZWZk5vbmUQABIKCgZWZlRydWUQARILCgdWZkZh",
            "bHNlEAIqLgoHRE1BRmxhZxIKCgZEZk5vbmUQABIKCgZEZlRydWUQARILCgdE",
            "ZkZhbHNlEAIqOAoORGlyZWN0TGluZUZsYWcSCwoHRGxmTm9uZRAAEgsKB0Rs",
            "ZlRydWUQARIMCghEbGZGYWxzZRACKjkKD1NwZWNpYWxVc2VyRmxhZxILCgdT",
            "dWZOb25lEAASCwoHU3VmVHJ1ZRABEgwKCFN1ZkZhbHNlEAIqOAoOSnN1bkZB",
            "VXNlckZsYWcSCwoHRmFmTm9uZRAAEgsKB0ZhZlRydWUQARIMCghGYWZGYWxz",
            "ZRACKuwBCglRdWVyeUZsYWcSCgoGUWZOb25lEAASDwoLUWZQb3NpdGlvbnMQ",
            "ARIMCghRZkVxdWl0eRACEg0KCVFmUmVwb3J0cxADEgwKCFFmVHJhZGVzEAQS",
            "CgoGUWZTU1NPEAUSDgoKUWZXaXRoZHJhdxAGEhQKEFFmV2l0aGRyYXdDYW5j",
            "ZWwQBxIVChFRZldpdGhkcmF3SW5xdWlyZRAIEhsKF1FmV2l0aGRyYXdDYW5j",
            "ZWxJbnF1aXJlEAkSFAoQUWZNYXJnaW5UcmFuc2ZlchAKEhsKF1FmTWFyZ2lu",
            "VHJhbnNmZXJJbnF1aXJlEAsqVQoSRkVQUmVzdWx0RXJyb3JDb2RlEhQKEEZl",
            "cHJlc3VsdGVjZk5vbmUQABISCg5GZXByZXN1bHRlY2ZPaxABEhUKEUZlcHJl",
            "c3VsdGVjZkVycm9yEAIqzQEKGE9yZGVyVHJpZ2dlckxhbmd1YWdlRmxhZxIM",
            "CghRdGxmTm9uZRAAEgkKBVF0bGZDEAESCwoHUXRsZkNwcBACEg4KClF0bGZD",
            "c2hhcnAQAxIKCgZRdGxmR28QBBIMCghRdGxmSmF2YRAFEg8KC1F0bGZPYmpl",
            "Y3RDEAYSDgoKUXRsZlB5dGhvbhAHEgkKBVF0bGZSEAgSDQoJUXRsZlNjYWxh",
            "EAkSDQoJUXRsZlN3aWZ0EAoSCgoGUXRsZlZCEAsSCwoHUXRsZlZCQRAMKsoH",
            "ChRBY2NvdW50R3JvdXBDb2RlRmxhZxIKCgZBZ2ZpMDAQABIKCgZBZ2ZpMTAQ",
            "ARIKCgZBZ2ZpMjAQAhIKCgZBZ2ZpMzAQAxIKCgZBZ2ZpNDAQBBIKCgZBZ2Zp",
            "NTAQBRIKCgZBZ2ZpNjAQBhIKCgZBZ2ZpNzAQBxIKCgZBZ2ZpODAQCBIKCgZB",
            "Z2ZpOTAQCRIKCgZBZ2ZpQTEQChIKCgZBZ2ZpQjEQCxIKCgZBZ2ZpQzEQDBIK",
            "CgZBZ2ZpRDEQDRIKCgZBZ2ZpRTEQDhIKCgZBZ2ZpRjEQDxIKCgZBZ2ZpRzEQ",
            "EBIKCgZBZ2ZpSDEQERIKCgZBZ2ZpSTEQEhIKCgZBZ2ZpSjEQExIKCgZBZ2Zp",
            "SzEQFBIKCgZBZ2ZpTDEQFRIKCgZBZ2ZpTTEQFhIKCgZBZ2ZpTjEQFxIKCgZB",
            "Z2ZpTzEQGBIKCgZBZ2ZpbzAQGRIKCgZBZ2ZpUDEQGhIKCgZBZ2ZpcDAQGxIK",
            "CgZBZ2ZpUTEQHBIKCgZBZ2ZpcTAQHRIKCgZBZ2ZpUjEQHhIKCgZBZ2ZpcjAQ",
            "HxIKCgZBZ2ZpUzEQIBIKCgZBZ2ZpVDEQIRIKCgZBZ2ZpdDAQIhIKCgZBZ2Zp",
            "VTEQIxIKCgZBZ2ZpVjEQJBIKCgZBZ2ZpVzEQJRIKCgZBZ2ZpWTEQJhIKCgZB",
            "Z2ZpWjEQJxIKCgZBZ2ZvMDAQKBIKCgZBZ2ZvMTAQKRIKCgZBZ2ZvMjAQKhIK",
            "CgZBZ2ZvMzAQKxIKCgZBZ2ZvNDAQLBIKCgZBZ2ZvNTAQLRIKCgZBZ2ZvNjAQ",
            "LhIKCgZBZ2ZvNzAQLxIKCgZBZ2ZvODAQMBIKCgZBZ2ZvOTAQMRIKCgZBZ2Zv",
            "QTEQMhIKCgZBZ2ZvQjEQMxIKCgZBZ2ZvQzEQNBIKCgZBZ2ZvRDEQNRIKCgZB",
            "Z2ZvRTEQNhIKCgZBZ2ZvRzEQNxIKCgZBZ2ZvSDEQOBIKCgZBZ2ZvSTEQORIK",
            "CgZBZ2ZvSjEQOhIKCgZBZ2ZvSzEQOxIKCgZBZ2ZvTDEQPBIKCgZBZ2ZvTTEQ",
            "PRIKCgZBZ2ZvTjEQPhIKCgZBZ2ZvTzEQPxIKCgZBZ2ZvbzAQQBIKCgZBZ2Zv",
            "UDEQQRIKCgZBZ2ZvcDAQQhIKCgZBZ2ZvUTEQQxIKCgZBZ2ZvcTAQRBIKCgZB",
            "Z2ZvUjEQRRIKCgZBZ2ZvcjAQRhIKCgZBZ2ZvUzEQRxIKCgZBZ2ZvVDEQSBIK",
            "CgZBZ2ZvdDAQSRIKCgZBZ2ZvVTEQShIKCgZBZ2ZvVjEQSxIKCgZBZ2ZvVzEQ",
            "TBIKCgZBZ2ZvWTEQTRIKCgZBZ2ZvWjEQTiooCgxEYXlUcmFkZUZsYWcSCwoH",
            "RHRmTm9uZRAAEgsKB0R0ZlRydWUQASohCgdBcGlGbGFnEgoKBkFmTm9uZRAA",
            "EgoKBkFmVHJ1ZRABKjcKDVN0b3BUcmFkZUZsYWcSCwoHc3RmTm9uZRAAEgsK",
            "B3N0ZlRydWUQARIMCghzdGZGYWxzZRACKlEKEk9yZGVyTWF4UGVyU2VjRmxh",
            "ZxINCglvbXBzZk5vbmUQABIQCgxvbXBzZkRlZmF1bHQQARIMCghvbXBzZlZp",
            "cBACEgwKCG9tcHNmSGZ0EAMqiwEKFVRhbmRlbU9yZGVyTWFya2V0RmxhZxIM",
            "Cgh0b21mTm9uZRAAEg0KCXRvbWZTdG9jaxABEg4KCnRvbWZGdXR1cmUQAhIU",
            "ChB0b21mU3ViYnJva2VyYWdlEAMSDQoJdG9tZk5vbmUyEAQSEQoNdG9tZlNl",
            "YWZ1dHVyZRAFEg0KCXRvbWZUcnVzdBAGKk4KDU9tc0FTTW9kZUZsYWcSEQoN",
            "b21zYXNNb2RlTm9uZRAAEhQKEG9tc2FzTW9kZVJ1bm5pbmcQARIUChBvbXNh",
            "c01vZGVTdGFuZGJ5EAIqMAoKVGltZVBlcmlvZBIKCgZvdE5vbmUQABIJCgVv",
            "dERheRABEgsKB290TmlnaHQQAio4CgxUcmFuc2ZlckZsYWcSCgoGdGZOb25l",
            "EAASDQoJdGZJblRvT3V0EAESDQoJdGZPdXRUb0luEAIqTQoKQ2FuY2VsRmxh",
            "ZxIKCgZjZk5vbmUQABINCgljZlJlY2VpdmUQARIKCgZjZkRvbmUQAhIKCgZj",
            "ZkZhaWwQAxIMCghjZkNhbmNlbBAEKjcKDUJsYWNrTGlzdEZsYWcSCwoHQmxm",
            "Tm9uZRAAEgsKB0JsZlRydWUQARIMCghCbGZGYWxzZRACMt8CCgRnUlBDEmIK",
            "HVF1ZXJ5MlRhbmRlbVBvc2l0aW9uQW5kRXF1aXR5Eh4uanN1bmZ1dHVyZXMu",
            "bWVzc2FnZXMuRkVQUXVlcnkaHy5qc3VuZnV0dXJlcy5tZXNzYWdlcy5GRVBS",
            "ZXN1bHQiABJTChNRdWVyeTJCYWNrdXBSZXBvcnRzEhsuanN1bmZ1dHVyZXMu",
            "bWVzc2FnZXMuUXVlcnkaHS5qc3VuZnV0dXJlcy5tZXNzYWdlcy5SZXBvcnRz",
            "IgASUQoSUXVlcnkyQmFja3VwVHJhZGVzEhsuanN1bmZ1dHVyZXMubWVzc2Fn",
            "ZXMuUXVlcnkaHC5qc3VuZnV0dXJlcy5tZXNzYWdlcy5UcmFkZXMiABJLCg9R",
            "dWVyeTJCYWNrdXBTU08SGy5qc3VuZnV0dXJlcy5tZXNzYWdlcy5RdWVyeRoZ",
            "LmpzdW5mdXR1cmVzLm1lc3NhZ2VzLlNTTyIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Jsunfutures.Messages.GatewayFlag), typeof(global::Jsunfutures.Messages.StopConditionFlag), typeof(global::Jsunfutures.Messages.OMSNodeFlag), typeof(global::Jsunfutures.Messages.ClientFlag), typeof(global::Jsunfutures.Messages.OsFlag), typeof(global::Jsunfutures.Messages.TIF), typeof(global::Jsunfutures.Messages.FillTypeFlag), typeof(global::Jsunfutures.Messages.BS), typeof(global::Jsunfutures.Messages.PriceFlag), typeof(global::Jsunfutures.Messages.Position_Effect), typeof(global::Jsunfutures.Messages.OrderType), typeof(global::Jsunfutures.Messages.MarketFlag), typeof(global::Jsunfutures.Messages.OptionFlag), typeof(global::Jsunfutures.Messages.ExchangeFlag), typeof(global::Jsunfutures.Messages.Currency), typeof(global::Jsunfutures.Messages.MessageFlag), typeof(global::Jsunfutures.Messages.MessageConnFlag), typeof(global::Jsunfutures.Messages.ConnFlag), typeof(global::Jsunfutures.Messages.FepKind), typeof(global::Jsunfutures.Messages.TandemQueryFlag), typeof(global::Jsunfutures.Messages.VIPFlag), typeof(global::Jsunfutures.Messages.DMAFlag), typeof(global::Jsunfutures.Messages.DirectLineFlag), typeof(global::Jsunfutures.Messages.SpecialUserFlag), typeof(global::Jsunfutures.Messages.JsunFAUserFlag), typeof(global::Jsunfutures.Messages.QueryFlag), typeof(global::Jsunfutures.Messages.FEPResultErrorCode), typeof(global::Jsunfutures.Messages.OrderTriggerLanguageFlag), typeof(global::Jsunfutures.Messages.AccountGroupCodeFlag), typeof(global::Jsunfutures.Messages.DayTradeFlag), typeof(global::Jsunfutures.Messages.ApiFlag), typeof(global::Jsunfutures.Messages.StopTradeFlag), typeof(global::Jsunfutures.Messages.OrderMaxPerSecFlag), typeof(global::Jsunfutures.Messages.TandemOrderMarketFlag), typeof(global::Jsunfutures.Messages.OmsASModeFlag), typeof(global::Jsunfutures.Messages.TimePeriod), typeof(global::Jsunfutures.Messages.TransferFlag), typeof(global::Jsunfutures.Messages.CancelFlag), typeof(global::Jsunfutures.Messages.BlackListFlag), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.AccountDetail), global::Jsunfutures.Messages.AccountDetail.Parser, new[]{ "Account", "ID", "Df", "Vf", "Dtf", "Af", "Agf", "Ib", "Brokerid", "Aeid", "Stf", "Tomf", "SubAccounts", "DmaIP", "InfoAf", "BlfApi", "BlfMl", "Cf", "Gf", "Dlf" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.SpecialAccountDetail), global::Jsunfutures.Messages.SpecialAccountDetail.Parser, new[]{ "Agf", "Brokerid", "Tomf", "Gf", "Cf" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.ConnStatus), global::Jsunfutures.Messages.ConnStatus.Parser, new[]{ "ID", "Idendity", "Status", "ErrorCode", "ErrorMsg", "Mode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.HeartBeat), global::Jsunfutures.Messages.HeartBeat.Parser, new[]{ "Status", "OmsVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.ReportList), global::Jsunfutures.Messages.ReportList.Parser, new[]{ "Account", "Identidy", "Id", "StartNo", "EndNo", "Reports" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.Positions), global::Jsunfutures.Messages.Positions.Parser, new[]{ "Positions_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.Orders), global::Jsunfutures.Messages.Orders.Parser, new[]{ "Orders_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.Order), global::Jsunfutures.Messages.Order.Parser, new[]{ "Account", "BrokerID", "Bs", "CAmessage", "ClientFlag", "ClientOrdNo", "Cnt", "CurrencyIN", "CurrencyOut", "Exchange", "ID", "LocalmachineTime", "Marketflag", "OMSResult", "Optionflag", "OrderGateWay", "OrderIP", "OrderNo", "Ordertype", "PositionEffect", "Price", "Priceflag", "QTY", "RequestID", "ST", "SubAccount", "Symbol", "Tif", "TracerIDServerMake", "WebID", "CAKey", "Agf", "IbNo", "StopConditionflag", "StopPrice", "GtdExpireday", "Ftf", "MinQty", "TimePeriod", "PriceDen", "PriceNum", "StopPriceDen", "StopPriceNum", "Tomf", "Suf", "B2BID", "CheckCodeFromSSO", "ToTalAccount", "APKind", "TraderPASS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.Reports), global::Jsunfutures.Messages.Reports.Parser, new[]{ "Reports_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.Report), global::Jsunfutures.Messages.Report.Parser, new[]{ "Account", "AfterQty", "BeforeQty", "BrokerID", "Bs", "ClientFlag", "ClientOrdNo", "Cnt", "CurrencyIN", "CurrencyOut", "ErrMsg", "ErrorCode", "Exchange", "ExchangeRate", "ExchangeServerReveiveTime", "ExchangeServerReveiveTimeUTC", "Marketflag", "MatchQty", "Orderfunc", "OrderGateWay", "OrderIP", "OrderNo", "PositionEffect", "Price", "Priceflag", "QTY", "ReportSequence", "RequestID", "SubAccount", "ST", "Symbol", "Tif", "TracerID", "TradeServerReceiveTime", "TradeServerReceiveTimeUTC", "Trader", "WebID", "IbNo", "ClientMachineTime", "TimePeriod", "StopPrice", "Ftf", "GtdExpireday", "MiniQty", "Scf", "PriceDen", "PriceNum", "StopPriceDen", "StopPriceNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.Trades), global::Jsunfutures.Messages.Trades.Parser, new[]{ "Trades_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.Trade), global::Jsunfutures.Messages.Trade.Parser, new[]{ "Account", "BrokerID", "BrokerIDSeq", "Bs", "Bs1", "Bs2", "ClientFlag", "ClientOrderNo", "CurrencyIN", "CurrencyOut", "DealTime", "DealTimeUTC", "Exchange", "ExchangeRate", "Marketflag", "OrderGateWay", "OrderIP", "OrderNo", "PositionEffect", "Price", "Price1", "Price2", "Priceflag", "Qty", "Qty1", "Qty2", "ReportSequence", "ST", "Symbol", "Symbol1", "Symbol2", "SubAccount", "Tif", "TolkenID", "TraderID", "TradeNo", "IbNo", "ClientMachineTime", "TimePeriod", "RequestID", "PriceDen", "PriceNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.Query), global::Jsunfutures.Messages.Query.Parser, new[]{ "Idendity", "Account", "ID", "Qf", "Exchange", "StartOrdNo", "EndOrdno", "Date", "IbNo", "Subaccount", "BrokerID", "Tomf", "TimePeriod", "ClientFlag", "Reports", "Trades" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.FEPQuery), global::Jsunfutures.Messages.FEPQuery.Parser, new[]{ "Idendity", "Account", "BrokerID", "Fepqueryflag", "Exchange", "IbNo", "SubAccount", "Tomf", "TimePeriod", "FromCurrency", "ToCurrency", "Amount", "Password", "FromTxDate", "ToTxDate", "SetCurrency", "IdendityID", "SetTransferFlag", "SEQNOIDX", "WRQUEDETAIL", "CancelList", "ClientFlag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.FEPResult), global::Jsunfutures.Messages.FEPResult.Parser, new[]{ "Idendity", "Account", "BrokerID", "Fepqueryflag", "Equity", "Positions", "ErrorCode", "ErrorMsg", "IbNo", "SubAccount", "Tomf", "WithdrawMarginInquire", "WithdrawMarginResult", "WithdrawMarginCancel", "TransferMarginResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.Error), global::Jsunfutures.Messages.Error.Parser, new[]{ "Idendity", "Account", "ID", "Qf", "Exchange", "ErrorCode", "ErrorMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.Position), global::Jsunfutures.Messages.Position.Parser, new[]{ "BS", "Symbol", "ExchangeFlag", "ExchangeRate", "Marketflag", "BAvgPrice", "BTotalQty", "SAvgPrice", "STotalQty", "Currency", "Optionflag", "YyyyMM", "StrikePrice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.Equity), global::Jsunfutures.Messages.Equity.Parser, new[]{ "WRMAINTAINRATE", "WRACCOUNTEQUITY", "WRINOUTAMT", "WRUSABLEMARGIN", "WRCOVERINCOME", "WRINITIALMARGIN", "WRMAINTAINMARGIN", "WRVARINCOME", "WRACCOUNTBALANCE", "WRREALIZEPREMIUN", "WRUNREALIZEPREMIUM", "WRBOPTIONVALUE", "WRSOPTIONVALUE", "WRYESEQU", "WRYESACCOUNTBALANCE", "WRTODAYTOT", "WRTODAYTAX", "WREQUITY", "WRRISKRATE", "WRCOVERRATE", "WRFULLMARGIN", "WRFULLMAINTAINMARGIN", "WRFULLUSABLEMARGIN", "WRFULLRATE", "WRFULLRISKRATE", "WRDAYTRADEFLAG", "WRIOPFLAG", "WRYESTOTEQUITY", "WRIBNO", "WRCOVEREDAMT", "WRADDMARGIN", "WRCASHUSABLE", "WRFULLCASHUSABLE", "WRUNREALIZEDINCOME", "WROINITIALMARGIN", "WROMAINTAINMARGIN", "WROFULLINITIALMARGIN", "WROFULLMAINTAINMARGIN", "WRADDITIONMARGIN", "WRNOMARGIN", "WRPROMPTAMT", "WRBPOPTIONVALUE", "WRSPOPTIONVALUE", "WRBCOPTIONVALUE", "WRSCOPTIONVALUE", "WRADDITIONMARGINRATE" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.SSO), global::Jsunfutures.Messages.SSO.Parser, new[]{ "ID", "PASS", "IP", "Cf", "ENDPoint", "QueryPoint", "Idendity", "Accounts", "ResponseMessage", "UserName", "Of", "Otlf", "OmsVersion", "Ompsf", "ErrorCode", "CAKey", "CheckCodeFromSSO", "ToTalAccount", "OrderGateWay", "ClientIP", "Suf", "SpecialAccounts", "Jfauf", "TradePASS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemQuery), global::Jsunfutures.Messages.TandemQuery.Parser, new[]{ "Account", "BrokerID", "Tqf", "IPMREPLYCODE", "IPMTRANSCODE", "IPMFUNCTIONCODE", "IPMTERMID", "IPMBROKERID", "IPMIBNO", "IPMBROKERNAME", "IPMTELNO", "IPMTODAY", "FILLER1", "SENDDATAAREA", "SENDKEEPDATA", "WSBROKERID", "WSIBNO", "WSINVESTORACNO", "WSSKACNO", "WSKIND", "WSSPOOLNO", "WSCOPIES", "WSCLOSEMARK", "WSPASSWORD", "WSTRADEDATE", "WSEXCHID", "WSKEY", "WSKEYCONTRACTID", "WSKEYMATCHDATE", "WSKEYSPO", "WSKEYKIND", "WSKEYBUYSELLKIND", "WSKEYSEQNO", "WSKEYORDERNO", "WSKEYTRID", "WSKEY2ND", "WSKEYMATFLAG", "WSKEYCURRENCY", "WSMODEKIND", "WSQUERYUSABLEMARGIN", "FILLER2", "WSSTRATEGYCODE" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemResult), global::Jsunfutures.Messages.TandemResult.Parser, new[]{ "Account", "BrokerID", "Tqf", "TandemReplyArea", "Aggregate", "Detail", "TodayAggregate", "TodayDetail", "TodayTrade", "EquityCallSellside", "Currency", "DaytradeAggregate", "BestPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemReplyArea), global::Jsunfutures.Messages.TandemReplyArea.Parser, new[]{ "WRREPLYCODE", "WRADVISORY", "WRKEYCONTRACTID", "WRKEYMATCHDATE", "WRKEYSPO", "WRKEYKIND", "WRKEYBUYSELLKIND", "WRKEYSEQNO", "WRKEYORDERNO", "WRKEYTRID", "WRKEY2ND", "WRKEYMATFLAG", "WRKEYCURRENCY", "FILLER1", "WRTELLERNO", "WRACNO", "WRSKACNO", "FILLER2", "WRCLOSEMARK", "WRMAINTAINRATE", "WRACCOUNTEQUITY", "WRINOUTAMT", "WRUSABLEMARGIN", "WRCOVERINCOME", "WRINITIALMARGIN", "WRMAINTAINMARGIN", "WRVARINCOME", "WRACCOUNTBALANCE", "WRREALIZEPREMIUN", "WRUNREALIZEPREMIUM", "WRBOPTIONVALUE", "WRSOPTIONVALUE", "WRYESEQU", "WRYESACCOUNTBALANCE", "WRTODAYTOT", "WRTODAYTAX", "WREQUITY", "WRDETTELMARK", "WRRISKRATE", "WRCOVERRATE", "WRFULLMARGIN", "WRFULLMAINTAINMARGIN", "WRFULLUSABLEMARGIN", "WRFULLRATE", "WRFULLRISKRATE", "WRDAYTRADEFLAG", "WRIOPFLAG", "WRYESTOTEQUITY", "FILLER3", "WRIBNO", "WRCOVERAMT", "WRADDMARGIN", "WRCASHUSABLE", "WRFULLCASHUSABLE", "WRUNREALIZEDINCOME", "WROINITIALMARGIN", "WROMAINTAINMARGIN", "WROFULLINITIALMARGIN", "WROFULLMAINTAINMARGIN", "WRADDITIONMARGIN", "WRNOMARGIN", "WRPROMPTAMT", "WRBPOPTIONVALUE", "WRSPOPTIONVALUE", "WRBCOPTIONVALUE", "WRSCOPTIONVALUE", "WRADDITIONMARGINRATE", "FILLER4", "WRCOUNT", "WRDATAFLAG1", "WRDATAFLAG2", "WRREADDATA" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemResult_AGGREGATE), global::Jsunfutures.Messages.TandemResult_AGGREGATE.Parser, new[]{ "WR1DATAFLAG1", "WR1DATAFLAG2", "WR1TRID", "WR1BTRID1", "WR1BCOMMODITYNAME1", "WR1BCOMMODITYID1", "WR1BSETTLEMENTMONTH1", "WR1BSTRIKEPRICE1", "WR1BBUYSELLKIND1", "WR1BSTOCKCODE1", "WR1BTRID2", "WR1BCOMMODITYNAME2", "WR1BCOMMODITYID2", "WR1BSETTLEMENTMONTH2", "WR1BSTRIKEPRICE2", "WR1BBUYSELLKIND2", "WR1BSTOCKCODE2", "WR1STRID1", "WR1SCOMMODITYNAME1", "WR1SCOMMODITYID1", "WR1SSETTLEMENTMONTH1", "WR1SSTRIKEPRICE1", "WR1SBUYSELLKIND1", "WR1SSTOCKCODE1", "WR1STRID2", "WR1SCOMMODITYNAME2", "WR1SCOMMODITYID2", "WR1SSETTLEMENTMONTH2", "WR1SSTRIKEPRICE2", "WR1SBUYSELLKIND2", "WR1SSTOCKCODE2", "WR1NCBQTY", "WR1NCBAVGPRICE", "WR1NCSQTY", "WR1NCSAVGPRICE", "WR1NOWPRICE", "WR1CORKIND", "WR1VARINCOME", "WR1ORDERBQTY", "WR1ORDERSQTY", "WR1TDSNEWOQTY", "WR1YESTERDAYPRICE", "WR1STRATEGYCODE", "WR1VARINCOMECURRENCY", "WR1FNCBQTY", "WR1FNCSQTY", "WR1TRADENCBQTY", "WR1TRADENCSQTY", "WR1SUBVARINCOME", "WR1YESTERDAYPRICE2", "WR1NCBAVGPRICE4", "WR1NCSAVGPRICE4", "WR1SOURCEFLAG", "FILLER", "WR1BVARINCOME1", "WR1BVARINCOME2", "WR1BAVGPRICE1", "WR1BAVGPRICE2", "WR1BNOWPRICE1", "WR1BNOWPRICE2", "WR1SVARINCOME1", "WR1SVARINCOME2", "WR1SAVGPRICE1", "WR1SAVGPRICE2", "WR1SNOWPRICE1", "WR1SNOWPRICE2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemResult_DETAIL), global::Jsunfutures.Messages.TandemResult_DETAIL.Parser, new[]{ "WR2DATAFLAG1", "WR2DATAFLAG2", "WR2MATCHDATE", "WR2TRID1", "WR2COMMODITYNAME1", "WR2COMMODITYID1", "WR2SETTLEMENTMONTH1", "WR2STRIKEPRICE1", "WR2BUYSELLKIND1", "WR2STOCKCODE1", "WR2MATCHQTY", "WR2NONCOVERQTY", "WR2MATCHPRICE", "WR2NOWPRICE", "WR2VARINCOME", "WR2ORDERNOF", "WR2ORDERNOL", "WR2SPOKIND", "WR2STRATEGYCODE", "WR2VARINCOMECURRENCY", "WR2DAYTRADEID", "FILLER", "WR2MATCHPRICE9", "WR2NOWPRICE9" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemResult_TODAY_AGGREGATE), global::Jsunfutures.Messages.TandemResult_TODAY_AGGREGATE.Parser, new[]{ "WR3DATAFLAG1", "WR3DATAFLAG2", "WR3TRID", "WR3BTRID1", "WR3BCOMMODITYNAME1", "WR3BCOMMODITYID1", "WR3BSETTLEMENTMONTH1", "WR3BSTRIKEPRICE1", "WR3BBUYSELLKIND1", "WR3BSTOCKCODE1", "WR3BTRID2", "WR3BCOMMODITYNAME2", "WR3BCOMMODITYID2", "WR3BSETTLEMENTMONTH2", "WR3BSTRIKEPRICE2", "WR3BBUYSELLKIND2", "WR3BSTOCKCODE2", "WR3STRID1", "WR3SCOMMODITYNAME1", "WR3SCOMMODITYID1", "WR3SSETTLEMENTMONTH1", "WR3SSTRIKEPRICE1", "WR3SBUYSELLKIND1", "WR3SSTOCKCODE1", "WR3STRID2", "WR3SCOMMODITYNAME2", "WR3SCOMMODITYID2", "WR3SSETTLEMENTMONTH2", "WR3SSTRIKEPRICE2", "WR3SBUYSELLKIND2", "WR3SSTOCKCODE2", "WR3NCBQTY", "WR3NCBAVGPRICE", "WR3NCSQTY", "WR3NCSAVGPRICE", "WR3BORDERQTY", "WR3BQTY", "WR3BAVGPRICE", "WR3SORDERQTY", "WR3SQTY", "WR3SAVGPRICE", "WR3COVERINCOME", "WR3STRATEGYCODE", "WR3COVERINCOMECURRENCY", "WR3BTRAORDERQTY", "WR3BTRAQTY", "WR3BTRANCQTY", "WR3BTRAAVGPRICE", "WR3STRAORDERQTY", "WR3STRAQTY", "WR3STRANCQTY", "WR3STRAAVGPRICE", "WR3TRAINCOME", "WR3NCBAVGPRICE4", "WR3NCSAVGPRICE4", "WR3BTRAAVGPRICE4", "WR3STRAAVGPRICE4", "WR3BAVGPRICE4", "WR3SAVGPRICE4", "FILLER" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemResult_TODAY_DETAIL), global::Jsunfutures.Messages.TandemResult_TODAY_DETAIL.Parser, new[]{ "WR4DATAFLAG1", "WR4DATAFLAG2", "WR4MATCHDATE", "WR4TRID1", "WR4COMMODITYNAME1", "WR4COMMODITYID1", "WR4SETTLEMENTMONTH1", "WR4STRIKEPRICE1", "WR4BUYSELLKIND1", "WR4STOCKCODE1", "WR4MATCHQTY", "WR4NONCOVERQTY", "WR4MATCHPRICE", "WR4NOWPRICE", "WR4VARINCOME", "WR4ORDERNOF", "WR4ORDERNOL", "WR4SPOKIND", "WR4STRATEGYCODE", "WR4VARINCOMECURRENCY", "WR4DAYTRADEID", "FILLER1", "WR4MATCHPRICE9", "WR4NOWPRICE9", "FILLER2", "FILLER3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemResult_TODAY_TRADE), global::Jsunfutures.Messages.TandemResult_TODAY_TRADE.Parser, new[]{ "WR5DATAFLAG1", "WR5DATAFLAG2", "WR5ORDERNOF", "WR5ORDERNOL", "WR5DAYTRADEID", "WR5TRID1", "WR5COMMODITYNAME1", "WR5COMMODITYID1", "WR5SETTLEMENTMONTH1", "WR5STRIKEPRICE1", "WR5BUYSELLKIND1", "WR5STOCKCODE1", "WR5ORDERQTY", "WR5ORDERPRICE", "WR5MATCHQTY", "WR5MATCHPRICE", "WR5REMARK", "WR5STRATEGYCODE", "FILLER1", "WR5ORDERPRICE9", "WR5MATCHPRICE9", "FILLER2", "FILLER3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemResult_EQUITY_CALL_SELLSIDE), global::Jsunfutures.Messages.TandemResult_EQUITY_CALL_SELLSIDE.Parser, new[]{ "WR7DATAFLAG1", "WR7DATAFLAG2", "WR7TRID", "FILLER", "WR7BQTY", "WR7SQTY", "FILLER1", "WR7QTY", "WR7NOS", "WR7STRATEGYCODE", "FILLER2", "WR7BTRID1", "WR7BCOMMODITYNAME1", "WR7BCOMMODITYID1", "WR7BSETTLEMENTMONTH1", "WR7BSTRIKEPRICE1", "WR7BBUYSELLKIND1", "WR7BSTOCKCODE1", "WR7BTRID2", "WR7BCOMMODITYNAME2", "WR7BCOMMODITYID2", "WR7BSETTLEMENTMONTH2", "WR7BSTRIKEPRICE2", "WR7BBUYSELLKIND2", "WR7BSTOCKCODE2", "WR7STRID1", "WR7SCOMMODITYNAME1", "WR7SCOMMODITYID1", "WR7SSETTLEMENTMONTH1", "WR7SSTRIKEPRICE1", "WR7SBUYSELLKIND1", "WR7SSTOCKCODE1", "WR7STRID2", "WR7SCOMMODITYNAME2", "WR7SCOMMODITYID2", "WR7SSETTLEMENTMONTH2", "WR7SSTRIKEPRICE2", "WR7SBUYSELLKIND2", "WR7SSTOCKCODE2", "WR7SUBNOS", "WR7MARGIN1", "WR7MARGIN2", "WR7TMARGIN", "WR7MARGINCURRENCY", "FILLER3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemResult_CURRENCY), global::Jsunfutures.Messages.TandemResult_CURRENCY.Parser, new[]{ "WR8DATAFLAG1", "WR8DATAFLAG2", "WR8TRANRATE", "WR8CURRENCY", "WR8MAINTAINRATE", "WR8ACCOUNTEQUITY", "WR8INOUTAMT", "WR8USABLEMARGIN", "WR8COVERINCOME", "WR8INITIALMARGIN", "WR8MAINTAINMARGIN", "WR8VARINCOME", "WR8ACCOUNTBALANCE", "WR8REALIZEPREMIUM", "WR8UNREALIZEPREMIUM", "WR8BOPTIONVALUE", "WR8SOPTIONVALUE", "WR8YESEQU", "WR8YESACCOUNTBALANCE", "WR8TODAYFEE", "WR8TODAYTAX", "WR8EQUITY", "WR8RISKRATE", "WR8COVERRATE", "WR8FULLMARGIN", "WR8FULLMAINTAINMARGIN", "WR8FULLUSABLEMARGIN", "WR8FULLRATE", "WR8FULLRISKRATE", "WR8TRANRATE6", "WR8COVEREDAMT", "WR8AADDCOVEREDUSABLE", "WR8ACASHUSABLE", "WR8YESTOTEQUITY", "WR8UNREALIZEDINCOME", "WR8OOLDUSEDMARGIN", "WR8OMAINTAINMARGIN", "WR8OFULLMARGIN", "WR8OFULLMAINTAIN", "WR8ADDITIONMARGIN", "WR8NOMARGIN", "WR8PROMPTAMT", "FILLER", "FILLER2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemResult_DAYTRADE_AGGREGATE), global::Jsunfutures.Messages.TandemResult_DAYTRADE_AGGREGATE.Parser, new[]{ "WR9DATAFLAG1", "WR9DATAFLAG2", "WR9TRID", "WR9COMMODITYNAME1", "WR9COMMODITYID1", "WR9SETTLEMENTMONTH1", "WR9STRIKEPRICE1", "WR9BUYSELLKIND1", "WR9STOCKCODE1", "WR9TRABQTY", "WR9TRABPRICE", "WR9TRASQTY", "WR9TRASPRICE", "WR9TRAVARINCOME", "WR9TRAOBQTY", "WR9TRAOSQTY", "WR9TRARATE", "FILLER", "WR9TRABPRICE4", "WR9TRASPRICE4" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemResult_BEST_POSITION), global::Jsunfutures.Messages.TandemResult_BEST_POSITION.Parser, new[]{ "WR0DATAFLAG1", "WR0DATAFLAG2", "WR0TRID", "WR0BQTY", "WR0BOQTY", "WR0SQTY", "WR0SOQTY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemResult_AGGREGATE_NEW), global::Jsunfutures.Messages.TandemResult_AGGREGATE_NEW.Parser, new[]{ "WR51DATAFLAG1", "WR51DATAFLAG2", "WR51TRID", "WR51BTRID1", "WR51BCOMMODITYNAME1", "WR51BCOMMODITYID1", "WR51BSETTLEMENTMONTH1", "WR51BSTRIKEPRICE1", "WR51BBUYSELLKIND1", "WR51BSTOCKCODE1", "WR51BTRID2", "WR51BCOMMODITYNAME2", "WR51BCOMMODITYID2", "WR51BSETTLEMENTMONTH2", "WR51BSTRIKEPRICE2", "WR51BBUYSELLKIND2", "WR51BSTOCKCODE2", "WR51STRID1", "WR51SCOMMODITYNAME1", "WR51SCOMMODITYID1", "WR51SSETTLEMENTMONTH1", "WR51SSTRIKEPRICE1", "WR51SBUYSELLKIND1", "WR51SSTOCKCODE1", "WR51STRID2", "WR51SCOMMODITYNAME2", "WR51SCOMMODITYID2", "WR51SSETTLEMENTMONTH2", "WR51SSTRIKEPRICE2", "WR51SBUYSELLKIND2", "WR51SSTOCKCODE2", "WR51NCBQTY", "WR51NCBAVGPRICE", "WR51NCSQTY", "WR51NCSAVGPRICE", "WR51NOWPRICE", "WR51CORKIND", "WR51VARINCOME", "WR51ORDERBQTY", "WR51ORDERSQTY", "WR51TDSNEWOQTY", "WR51YESTERDAYPRICE", "WR51STRATEGYCODE", "WR51VARINCOMECURRENCY", "WR51FNCBQTY", "WR51FNCSQTY", "WR51TRADENCBQTY", "WR51TRADENCSQTY", "WR51SUBVARINCOME", "WR51YESTERDAYPRICE2", "WR51NCBAVGPRICE4", "WR51NCSAVGPRICE4", "WR51SOURCEFLAG", "FILLER", "WR51BVARINCOME1", "WR51BVARINCOME2", "WR51BAVGPRICE1", "WR51BAVGPRICE2", "WR51BNOWPRICE1", "WR51BNOWPRICE2", "WR51SVARINCOME1", "WR51SVARINCOME2", "WR51SAVGPRICE1", "WR51SAVGPRICE2", "WR51SNOWPRICE1", "WR51SNOWPRICE2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemAccountQuery), global::Jsunfutures.Messages.TandemAccountQuery.Parser, new[]{ "TRANSCODE", "FUNCTIONCODE", "TELNO", "TODAY", "UNITFILE", "WSBROKERID", "WSIBNO", "WSINVESTORACNO", "WSSKACNO", "WSMODEKIND", "WSPASSWD", "WSSECUREKIND", "WSLOGINIDNO", "WSAUTOOFFSETFLAG", "WSPOSTFLAG", "WSEMAILADDRESS", "WSAUTO429FLAG", "WSAPPLYYMD", "WSAPPLYTIME", "WSMITFLAG", "WSAUTOMARGINFLAG", "WSEUREXFFACNO", "FILLER1", "FILLER2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemSubAccountQuery), global::Jsunfutures.Messages.TandemSubAccountQuery.Parser, new[]{ "TRANSCODE", "FUNCTIONCODE", "TELNO", "TODAY", "UNITFILE", "WSBROKERID", "WSIBNO", "WSOPENDATES", "WSOPENDATEE", "WSFUACNO", "WSFVACNO", "WSKEY", "WSKEYFILLER", "FILLER" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemAccountResult), global::Jsunfutures.Messages.TandemAccountResult.Parser, new[]{ "WRREPLYCODE", "WRADVISORY", "WREMAILADDRESS", "WRPOSTFLAG", "WRAUTO429FLAG", "WRTICKFLAG", "WRAUTOMARGINFLAG", "WREUREXSIGNFLAG", "WREUREXFFACNO", "WRBROKERID", "WRKIND", "WRDMAFLAG", "WRVIPFLAG", "WRTPVIPFLAG", "WRAPIFLAG", "FILLER", "WRSTATUSFLAG", "WRAEID", "WRNAEID", "WRTRADEDATE", "WRTRAINVESTAMTLIMIT", "FILLER1", "FILLER2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemSubAccountResult), global::Jsunfutures.Messages.TandemSubAccountResult.Parser, new[]{ "WRREPLYCODE", "WRADVISORY", "WRKEY", "WRKEYFILLER", "WRTELLERNO", "WRACNO", "WRSKACNO", "WRPHONENOO", "WRPHONENOH", "WRACTPHONENO", "FILLER", "WRCOUNT", "WRREADDATA" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TandemSubAccountOCCURS), global::Jsunfutures.Messages.TandemSubAccountOCCURS.Parser, new[]{ "WRFUACNO", "WRFVACNO", "WRFUNAME", "WRFVNAME", "WRFUDEGREE", "WRFUNETDEGREE", "WRFVDEGREE", "WRFVNETDEGREE", "WRFVOPENDATE", "FILLER" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.WithdrawMarginInquireResult), global::Jsunfutures.Messages.WithdrawMarginInquireResult.Parser, new[]{ "WKNDATE", "WKNTXTIME", "WKNBANKID", "WKNBANKNO", "WKNTXCODE", "WKNCURRENCY", "WKNORIAMT", "WKNDAWAPPLYSEQNO", "WKNCANCELFLAG" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.WithdrawMarginCancelResult), global::Jsunfutures.Messages.WithdrawMarginCancelResult.Parser, new[]{ "WSADVISORY", "WSSEQNO", "WSTXDATE", "WSTXTIME", "WSINVESTORACNO", "WSNTAMT", "StatusFlag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.futseqno), global::Jsunfutures.Messages.futseqno.Parser, new[]{ "SEQNO", "APPLYDATE" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.TransferMarginResult), global::Jsunfutures.Messages.TransferMarginResult.Parser, new[]{ "WKNINOUTFLAG", "WKNBANKID", "WKNBANKNO", "WKNINOUTINVESTORACNO", "WKNORIAMT", "WKNCURRENCY", "WKNAPPLYDATE", "WKNAPPLYTIME", "WKNCANCELFLAG", "WKNDAWAPPLYSEQNO" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.que_detail), global::Jsunfutures.Messages.que_detail.Parser, new[]{ "WSBROKERID", "WSBROKERBANKID", "WSBROKERACCNO", "WSINVESTORBANKID", "WSINVESTORBANKACCNO", "WSCANCELFLAG", "WSCURRENCY", "WSMEMO", "WSIBNO", "WSINVESTORNAME", "WSTXMETHOD", "WSBANKSEQNO", "WSINVESTORACNO", "WSNTAMT", "WSTXDATE", "WSSEQNO", "WSTRANRATE", "WSORIGINALAMT", "WSTXTIME", "WSMSGSEQNO", "WSBANKACCDATE", "WSTEL", "WSTRANSFERMARK", "WSSOURCEMARK", "WS707ACCOUNTNAME", "WS707INVBANKNAME", "WS707BATCHDATE", "WS707BATCHTIME", "WS707APPLYTIME8", "WSTXFLAG" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsunfutures.Messages.WithdrawMarginCancelQuery), global::Jsunfutures.Messages.WithdrawMarginCancelQuery.Parser, new[]{ "WKNDAWAPPLYSEQNO", "WKNDAWAPPLYDATE", "WKNCANCELFLAG" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///version 0.920170330 MergeTest OK  A new Branch Test
  /// </summary>
  public enum GatewayFlag {
    [pbr::OriginalName("GwNone")] GwNone = 0,
    [pbr::OriginalName("GwSpeedy")] GwSpeedy = 1,
    [pbr::OriginalName("GwIce")] GwIce = 2,
    [pbr::OriginalName("GwXfuture")] GwXfuture = 3,
    [pbr::OriginalName("GwNomura")] GwNomura = 4,
    [pbr::OriginalName("GwTandem")] GwTandem = 5,
    [pbr::OriginalName("GwYuanta")] GwYuanta = 6,
    [pbr::OriginalName("GwRTS")] GwRts = 7,
  }

  /// <summary>
  ///外期 停損單 分類
  /// </summary>
  public enum StopConditionFlag {
    [pbr::OriginalName("StopcfNone")] StopcfNone = 0,
    [pbr::OriginalName("StopcfNormal")] StopcfNormal = 1,
    [pbr::OriginalName("StopcfStop")] StopcfStop = 2,
  }

  /// <summary>
  ///OMS節點
  /// </summary>
  public enum OMSNodeFlag {
    [pbr::OriginalName("OmsnfNone")] OmsnfNone = 0,
    [pbr::OriginalName("OmsnfOrs")] OmsnfOrs = 1,
    [pbr::OriginalName("OmsnfQueryserver")] OmsnfQueryserver = 2,
    [pbr::OriginalName("OmsnfFep")] OmsnfFep = 3,
    [pbr::OriginalName("OmsnfRms")] OmsnfRms = 4,
    [pbr::OriginalName("OmsnfAp")] OmsnfAp = 5,
    [pbr::OriginalName("OmsnfApiclient")] OmsnfApiclient = 6,
    /// <summary>
    ///行情基本資料
    /// </summary>
    [pbr::OriginalName("OmsnfMkt")] OmsnfMkt = 7,
    /// <summary>
    ///行SpeedyGateWay
    /// </summary>
    [pbr::OriginalName("OmsnfGwSpeedy")] OmsnfGwSpeedy = 8,
    /// <summary>
    ///ICEGateWay
    /// </summary>
    [pbr::OriginalName("OmsnfGwIce")] OmsnfGwIce = 9,
    [pbr::OriginalName("OmsnfGwTandem")] OmsnfGwTandem = 10,
    [pbr::OriginalName("OmsnfRrs")] OmsnfRrs = 11,
  }

  /// <summary>
  ///客戶端
  /// </summary>
  public enum ClientFlag {
    [pbr::OriginalName("CfNone")] CfNone = 0,
    [pbr::OriginalName("CfIceweb")] CfIceweb = 1,
    [pbr::OriginalName("CfIceandroidpp")] CfIceandroidpp = 2,
    [pbr::OriginalName("CfIceiphone")] CfIceiphone = 3,
    [pbr::OriginalName("CfJsunhts")] CfJsunhts = 4,
    [pbr::OriginalName("CfMorninglight")] CfMorninglight = 5,
    [pbr::OriginalName("CfCustomize")] CfCustomize = 6,
    [pbr::OriginalName("CfMitake")] CfMitake = 7,
    /// <summary>
    ///期顧
    /// </summary>
    [pbr::OriginalName("CfJsunfa")] CfJsunfa = 8,
  }

  public enum OsFlag {
    [pbr::OriginalName("ofNone")] OfNone = 0,
    [pbr::OriginalName("ofWin")] OfWin = 1,
    [pbr::OriginalName("ofLinux")] OfLinux = 2,
    [pbr::OriginalName("ofIos")] OfIos = 3,
  }

  public enum TIF {
    [pbr::OriginalName("TfNone")] TfNone = 0,
    [pbr::OriginalName("TfRod")] TfRod = 1,
    [pbr::OriginalName("TfFok")] TfFok = 2,
    [pbr::OriginalName("TfIoc")] TfIoc = 3,
    [pbr::OriginalName("TfDay")] TfDay = 4,
    /// <summary>
    ///Ice gateway
    /// </summary>
    [pbr::OriginalName("TfFak")] TfFak = 5,
    /// <summary>
    ///Ice gateway
    /// </summary>
    [pbr::OriginalName("TfGtc")] TfGtc = 6,
    /// <summary>
    ///Ice gateway
    /// </summary>
    [pbr::OriginalName("TfGtd")] TfGtd = 7,
  }

  /// <summary>
  ///ICE gateway FillType
  /// </summary>
  public enum FillTypeFlag {
    [pbr::OriginalName("FfNone")] FfNone = 0,
    [pbr::OriginalName("FfAny")] FfAny = 1,
    [pbr::OriginalName("FfAll")] FfAll = 2,
    [pbr::OriginalName("FfMin")] FfMin = 3,
  }

  public enum BS {
    [pbr::OriginalName("SfNone")] SfNone = 0,
    [pbr::OriginalName("SfBuy")] SfBuy = 1,
    [pbr::OriginalName("SfSell")] SfSell = 2,
  }

  public enum PriceFlag {
    [pbr::OriginalName("PfNone")] PfNone = 0,
    [pbr::OriginalName("PfSpecified")] PfSpecified = 1,
    [pbr::OriginalName("PfMarket")] PfMarket = 2,
    [pbr::OriginalName("PfStopMarket")] PfStopMarket = 3,
    [pbr::OriginalName("PfStopSpecified")] PfStopSpecified = 4,
    [pbr::OriginalName("PfMarketRange")] PfMarketRange = 5,
  }

  public enum Position_Effect {
    [pbr::OriginalName("PeNone")] PeNone = 0,
    [pbr::OriginalName("PeOpen")] PeOpen = 1,
    [pbr::OriginalName("PeClose")] PeClose = 2,
    [pbr::OriginalName("PeDayTrade")] PeDayTrade = 3,
    [pbr::OriginalName("PeAuto")] PeAuto = 4,
  }

  public enum OrderType {
    [pbr::OriginalName("OtNone")] OtNone = 0,
    [pbr::OriginalName("OtNew")] OtNew = 1,
    [pbr::OriginalName("OtCancel")] OtCancel = 2,
    [pbr::OriginalName("OtModifyQty")] OtModifyQty = 3,
    [pbr::OriginalName("OtModifyPrice")] OtModifyPrice = 4,
    /// <summary>
    ///改價+改量
    /// </summary>
    [pbr::OriginalName("OtModify")] OtModify = 5,
    [pbr::OriginalName("OtRequest")] OtRequest = 6,
    /// <summary>
    ///錯誤單
    /// </summary>
    [pbr::OriginalName("OtError")] OtError = 7,
  }

  public enum MarketFlag {
    [pbr::OriginalName("MfNone")] MfNone = 0,
    [pbr::OriginalName("MfFut")] MfFut = 1,
    [pbr::OriginalName("MfOpt")] MfOpt = 2,
    [pbr::OriginalName("MfOptspread")] MfOptspread = 3,
    [pbr::OriginalName("MfFutspread")] MfFutspread = 4,
  }

  public enum OptionFlag {
    [pbr::OriginalName("OfNone")] OfNone = 0,
    [pbr::OriginalName("OfCall")] OfCall = 1,
    [pbr::OriginalName("OfPut")] OfPut = 2,
  }

  /// <summary>
  ///交易所Flag
  /// </summary>
  public enum ExchangeFlag {
    [pbr::OriginalName("EfNone")] EfNone = 0,
    /// <summary>
    ///Taifex
    /// </summary>
    [pbr::OriginalName("EfTaifex")] EfTaifex = 1,
    /// <summary>
    ///HKF
    /// </summary>
    [pbr::OriginalName("EfHkfe")] EfHkfe = 2,
    /// <summary>
    ///SGX 後台
    /// </summary>
    [pbr::OriginalName("EfSgx")] EfSgx = 3,
    /// <summary>
    ///CME 後台
    /// </summary>
    [pbr::OriginalName("EfCme")] EfCme = 4,
    /// <summary>
    ///CBT 後台
    /// </summary>
    [pbr::OriginalName("EfCmecbt")] EfCmecbt = 5,
    /// <summary>
    ///NYB NYM 後台 NYB已註記      ICE_U.S.
    /// </summary>
    [pbr::OriginalName("EfNybot")] EfNybot = 6,
    /// <summary>
    ///NYM 後台
    /// </summary>
    [pbr::OriginalName("EfNymex")] EfNymex = 7,
    /// <summary>
    ///CMX 後台
    /// </summary>
    [pbr::OriginalName("EfComex")] EfComex = 8,
    /// <summary>
    ///IPE 後台     英國國際石油交易所
    /// </summary>
    [pbr::OriginalName("EfIce")] EfIce = 9,
    /// <summary>
    ///MAT 後台  歐洲交易所
    /// </summary>
    [pbr::OriginalName("EfENXT_PAR")] EfEnxtPar = 10,
    /// <summary>
    ///TCE 後台 TGE for JAC/JNS/JSG    日本交易所 JPX (OSE.TCE)
    /// </summary>
    [pbr::OriginalName("EfTocom")] EfTocom = 11,
    /// <summary>
    ///OSE 後台 日本交易所 JPX (OSE.TCE)
    /// </summary>
    [pbr::OriginalName("EfJpx")] EfJpx = 12,
    /// <summary>
    ///LEM 後台(英國倫敦   金屬交易所)
    /// </summary>
    [pbr::OriginalName("EfLem")] EfLem = 13,
    /// <summary>
    ///EUX 後台 歐洲期貨交易所 歐臺權
    /// </summary>
    [pbr::OriginalName("EfEurexTW")] EfEurexTw = 14,
    /// <summary>
    ///EUX 後台 歐洲期貨交易所
    /// </summary>
    [pbr::OriginalName("EfEurex")] EfEurex = 15,
    /// <summary>
    ///LIF 後台 英國倫敦國際金融期貨交易所
    /// </summary>
    [pbr::OriginalName("EfIceUk")] EfIceUk = 16,
    [pbr::OriginalName("EfOse")] EfOse = 17,
    [pbr::OriginalName("EfTge")] EfTge = 18,
    [pbr::OriginalName("EfTce")] EfTce = 19,
  }

  /// <summary>
  ///幣別
  /// </summary>
  public enum Currency {
    [pbr::OriginalName("CurNone")] CurNone = 0,
    /// <summary>
    ///澳大利亞元
    /// </summary>
    [pbr::OriginalName("CurAud")] CurAud = 1,
    /// <summary>
    ///加拿大元
    /// </summary>
    [pbr::OriginalName("CurCad")] CurCad = 2,
    /// <summary>
    ///瑞士法郎
    /// </summary>
    [pbr::OriginalName("CurChf")] CurChf = 3,
    /// <summary>
    ///人民幣
    /// </summary>
    [pbr::OriginalName("CurCny")] CurCny = 4,
    /// <summary>
    ///歐元
    /// </summary>
    [pbr::OriginalName("CurEur")] CurEur = 5,
    /// <summary>
    ///英鎊
    /// </summary>
    [pbr::OriginalName("CurGbp")] CurGbp = 6,
    /// <summary>
    ///港幣
    /// </summary>
    [pbr::OriginalName("CurHkd")] CurHkd = 7,
    /// <summary>
    ///印度尼西亞盧比
    /// </summary>
    [pbr::OriginalName("CurIdr")] CurIdr = 8,
    /// <summary>
    ///日元
    /// </summary>
    [pbr::OriginalName("CurJpy")] CurJpy = 9,
    /// <summary>
    ///北韓元
    /// </summary>
    [pbr::OriginalName("CurKrw")] CurKrw = 10,
    /// <summary>
    ///	馬來西亞林吉特
    /// </summary>
    [pbr::OriginalName("CurMyr")] CurMyr = 11,
    /// <summary>
    ///紐西蘭元
    /// </summary>
    [pbr::OriginalName("CurNzd")] CurNzd = 12,
    /// <summary>
    ///菲律賓比索
    /// </summary>
    [pbr::OriginalName("CurPhp")] CurPhp = 13,
    /// <summary>
    ///瑞典克朗
    /// </summary>
    [pbr::OriginalName("CurSek")] CurSek = 14,
    /// <summary>
    ///新加坡元
    /// </summary>
    [pbr::OriginalName("CurSgd")] CurSgd = 15,
    /// <summary>
    ///泰銖
    /// </summary>
    [pbr::OriginalName("CurThb")] CurThb = 16,
    /// <summary>
    ///台幣
    /// </summary>
    [pbr::OriginalName("CurTwd")] CurTwd = 17,
    /// <summary>
    ///美元
    /// </summary>
    [pbr::OriginalName("CurUsd")] CurUsd = 18,
    /// <summary>
    ///越南盾
    /// </summary>
    [pbr::OriginalName("CurVnd")] CurVnd = 19,
    /// <summary>
    ///南非蘭特
    /// </summary>
    [pbr::OriginalName("CurZar")] CurZar = 20,
  }

  /// <summary>
  ///運行於OMS中節點間通訊的訊息定義格式
  /// </summary>
  public enum MessageFlag {
    [pbr::OriginalName("MsgNone")] MsgNone = 0,
    [pbr::OriginalName("MsgOrder")] MsgOrder = 1,
    [pbr::OriginalName("MsgReport")] MsgReport = 2,
    [pbr::OriginalName("MsgTrade")] MsgTrade = 3,
    [pbr::OriginalName("MsgFepquery")] MsgFepquery = 4,
    [pbr::OriginalName("MsgFepresult")] MsgFepresult = 5,
    [pbr::OriginalName("MsgUserdata")] MsgUserdata = 6,
    [pbr::OriginalName("MsgQuery")] MsgQuery = 7,
    [pbr::OriginalName("MsgConnstatus")] MsgConnstatus = 8,
    [pbr::OriginalName("MsgError")] MsgError = 9,
    [pbr::OriginalName("MsgVerifyLog")] MsgVerifyLog = 10,
  }

  public enum MessageConnFlag {
    [pbr::OriginalName("ZfNone")] ZfNone = 0,
    [pbr::OriginalName("ZfPub")] ZfPub = 1,
    [pbr::OriginalName("ZfSub")] ZfSub = 2,
    [pbr::OriginalName("ZfRep")] ZfRep = 3,
    [pbr::OriginalName("ZfReq")] ZfReq = 4,
    [pbr::OriginalName("ZfRouter")] ZfRouter = 5,
    [pbr::OriginalName("ZfDealer")] ZfDealer = 6,
    [pbr::OriginalName("ZfPush")] ZfPush = 7,
    [pbr::OriginalName("ZfPull")] ZfPull = 8,
    [pbr::OriginalName("ZkPath")] ZkPath = 9,
    [pbr::OriginalName("ZgRrpc")] ZgRrpc = 10,
  }

  public enum ConnFlag {
    [pbr::OriginalName("CsNone")] CsNone = 0,
    [pbr::OriginalName("CsAlive")] CsAlive = 1,
    [pbr::OriginalName("CsBinding")] CsBinding = 2,
    [pbr::OriginalName("CsConnecting")] CsConnecting = 3,
    [pbr::OriginalName("CsConnected")] CsConnected = 4,
    [pbr::OriginalName("CsDisconnected")] CsDisconnected = 5,
    [pbr::OriginalName("CsOrder")] CsOrder = 6,
    [pbr::OriginalName("CsReconnect")] CsReconnect = 7,
    [pbr::OriginalName("CsReport")] CsReport = 8,
    [pbr::OriginalName("CsSuspend")] CsSuspend = 9,
    [pbr::OriginalName("CsTrade")] CsTrade = 10,
    [pbr::OriginalName("CsError")] CsError = 11,
  }

  public enum FepKind {
    [pbr::OriginalName("FkMat")] FkMat = 0,
    [pbr::OriginalName("FkDos")] FkDos = 1,
    [pbr::OriginalName("FkSpo")] FkSpo = 2,
  }

  /// <summary>
  ///1,2,3,4,5,7,8,9  match Tanden index,But in Tandem: 10=>0  ,6 not exist
  /// </summary>
  public enum TandemQueryFlag {
    /// <summary>
    /// none
    /// </summary>
    [pbr::OriginalName("TqfNone")] TqfNone = 0,
    /// <summary>
    /// => 1 未平倉彙總 (WR_READ_DATA) 明細格式如下 : (400 bytes)
    /// </summary>
    [pbr::OriginalName("TqfAggregateE")] TqfAggregateE = 1,
    /// <summary>
    ///=> 2 未平倉明細 (WR_READ_DATA) 明細格式如下 : (400 bytes)
    /// </summary>
    [pbr::OriginalName("TqfDetail")] TqfDetail = 2,
    /// <summary>
    ///=> 3 今彙總 (WR_READ_DATA) 明細格式如下 : (400 bytes)
    /// </summary>
    [pbr::OriginalName("TqfTodayAggregate")] TqfTodayAggregate = 3,
    /// <summary>
    ///=> 4 今明細 (WR_READ_DATA) 明細格式如下 : (400 bytes)
    /// </summary>
    [pbr::OriginalName("TqfTodayDetail")] TqfTodayDetail = 4,
    /// <summary>
    ///=> 5 今委託成交 (WR_READ_DATA) 明細格式如下 : (400 bytes)
    /// </summary>
    [pbr::OriginalName("TqfTodayTrade")] TqfTodayTrade = 5,
    /// <summary>
    ///=>not def in tanden
    /// </summary>
    [pbr::OriginalName("TqfNull")] TqfNull = 6,
    /// <summary>
    ///=> 7 保證金/標的證券抵繳買權賣方部位查詢 (WR_READ_DATA) 明細格式如下 : (400bytes)
    /// </summary>
    [pbr::OriginalName("TqfEquityCallSellside")] TqfEquityCallSellside = 7,
    /// <summary>
    ///=> 8 各幣查詢 (WR_READ_DATA) 明細格式如下 : (400 bytes)
    /// </summary>
    [pbr::OriginalName("TqfCurrency")] TqfCurrency = 8,
    /// <summary>
    ///=> 9 當沖維持率&amp;當沖未平倉資料彙總查詢 (WR_READ_DATA) 明細格式如下 : (400bytes)
    /// </summary>
    [pbr::OriginalName("TqfDaytradeAggregate")] TqfDaytradeAggregate = 9,
    /// <summary>
    ///=> 0 虛擬最佳化部位查詢 (WR_READ_DATA) 明細格式如下 : (400bytes)
    /// </summary>
    [pbr::OriginalName("TqfBestPosition")] TqfBestPosition = 10,
  }

  public enum VIPFlag {
    [pbr::OriginalName("VfNone")] VfNone = 0,
    [pbr::OriginalName("VfTrue")] VfTrue = 1,
    [pbr::OriginalName("VfFalse")] VfFalse = 2,
  }

  public enum DMAFlag {
    [pbr::OriginalName("DfNone")] DfNone = 0,
    [pbr::OriginalName("DfTrue")] DfTrue = 1,
    [pbr::OriginalName("DfFalse")] DfFalse = 2,
  }

  public enum DirectLineFlag {
    [pbr::OriginalName("DlfNone")] DlfNone = 0,
    [pbr::OriginalName("DlfTrue")] DlfTrue = 1,
    [pbr::OriginalName("DlfFalse")] DlfFalse = 2,
  }

  /// <summary>
  ///B2B
  /// </summary>
  public enum SpecialUserFlag {
    [pbr::OriginalName("SufNone")] SufNone = 0,
    [pbr::OriginalName("SufTrue")] SufTrue = 1,
    [pbr::OriginalName("SufFalse")] SufFalse = 2,
  }

  /// <summary>
  ///期顧
  /// </summary>
  public enum JsunFAUserFlag {
    [pbr::OriginalName("FafNone")] FafNone = 0,
    [pbr::OriginalName("FafTrue")] FafTrue = 1,
    [pbr::OriginalName("FafFalse")] FafFalse = 2,
  }

  public enum QueryFlag {
    [pbr::OriginalName("QfNone")] QfNone = 0,
    [pbr::OriginalName("QfPositions")] QfPositions = 1,
    [pbr::OriginalName("QfEquity")] QfEquity = 2,
    [pbr::OriginalName("QfReports")] QfReports = 3,
    [pbr::OriginalName("QfTrades")] QfTrades = 4,
    [pbr::OriginalName("QfSSSO")] QfSsso = 5,
    /// <summary>
    ///申請出金
    /// </summary>
    [pbr::OriginalName("QfWithdraw")] QfWithdraw = 6,
    /// <summary>
    ///取消出金申請
    /// </summary>
    [pbr::OriginalName("QfWithdrawCancel")] QfWithdrawCancel = 7,
    /// <summary>
    ///查詢出金紀錄
    /// </summary>
    [pbr::OriginalName("QfWithdrawInquire")] QfWithdrawInquire = 8,
    /// <summary>
    ///查詢出金申請紀錄
    /// </summary>
    [pbr::OriginalName("QfWithdrawCancelInquire")] QfWithdrawCancelInquire = 9,
    /// <summary>
    ///保證金互轉申請
    /// </summary>
    [pbr::OriginalName("QfMarginTransfer")] QfMarginTransfer = 10,
    /// <summary>
    ///保證金互轉查詢
    /// </summary>
    [pbr::OriginalName("QfMarginTransferInquire")] QfMarginTransferInquire = 11,
  }

  public enum FEPResultErrorCode {
    [pbr::OriginalName("FepresultecfNone")] FepresultecfNone = 0,
    [pbr::OriginalName("FepresultecfOk")] FepresultecfOk = 1,
    [pbr::OriginalName("FepresultecfError")] FepresultecfError = 2,
  }

  public enum OrderTriggerLanguageFlag {
    [pbr::OriginalName("QtlfNone")] QtlfNone = 0,
    [pbr::OriginalName("QtlfC")] QtlfC = 1,
    [pbr::OriginalName("QtlfCpp")] QtlfCpp = 2,
    [pbr::OriginalName("QtlfCsharp")] QtlfCsharp = 3,
    [pbr::OriginalName("QtlfGo")] QtlfGo = 4,
    [pbr::OriginalName("QtlfJava")] QtlfJava = 5,
    [pbr::OriginalName("QtlfObjectC")] QtlfObjectC = 6,
    [pbr::OriginalName("QtlfPython")] QtlfPython = 7,
    [pbr::OriginalName("QtlfR")] QtlfR = 8,
    [pbr::OriginalName("QtlfScala")] QtlfScala = 9,
    [pbr::OriginalName("QtlfSwift")] QtlfSwift = 10,
    [pbr::OriginalName("QtlfVB")] QtlfVb = 11,
    [pbr::OriginalName("QtlfVBA")] QtlfVba = 12,
  }

  /// <summary>
  ///內期  客戶身分別代號    Agfi+Code as field   外期客戶身分別代號    Agfo+Code as field
  /// </summary>
  public enum AccountGroupCodeFlag {
    /// <summary>
    ///0:本國法人
    /// </summary>
    [pbr::OriginalName("Agfi00")] Agfi00 = 0,
    /// <summary>
    ///1:本國自然人
    /// </summary>
    [pbr::OriginalName("Agfi10")] Agfi10 = 1,
    /// <summary>
    ///2:期貨自營帳戶
    /// </summary>
    [pbr::OriginalName("Agfi20")] Agfi20 = 2,
    /// <summary>
    ///3:期貨商內部人員
    /// </summary>
    [pbr::OriginalName("Agfi30")] Agfi30 = 3,
    /// <summary>
    ///4:期貨商錯帳專戶
    /// </summary>
    [pbr::OriginalName("Agfi40")] Agfi40 = 4,
    /// <summary>
    ///5:結算會員部位處理專戶
    /// </summary>
    [pbr::OriginalName("Agfi50")] Agfi50 = 5,
    /// <summary>
    ///6:結算會員違約處理專戶
    /// </summary>
    [pbr::OriginalName("Agfi60")] Agfi60 = 6,
    /// <summary>
    ///7:期貨交易輔助人內部人員
    /// </summary>
    [pbr::OriginalName("Agfi70")] Agfi70 = 7,
    /// <summary>
    ///8:造市者
    /// </summary>
    [pbr::OriginalName("Agfi80")] Agfi80 = 8,
    /// <summary>
    ///9:註銷帳戶(請將交易狀態碼改為 3:註銷)
    /// </summary>
    [pbr::OriginalName("Agfi90")] Agfi90 = 9,
    /// <summary>
    /// A:境外外國機構投資人
    /// </summary>
    [pbr::OriginalName("AgfiA1")] AgfiA1 = 10,
    /// <summary>
    /// B:境內外國機構投資人
    /// </summary>
    [pbr::OriginalName("AgfiB1")] AgfiB1 = 11,
    /// <summary>
    /// C:期貨經理事業接受共同委任全權委託帳戶
    /// </summary>
    [pbr::OriginalName("AgfiC1")] AgfiC1 = 12,
    /// <summary>
    /// D:銀行(一般帳戶)
    /// </summary>
    [pbr::OriginalName("AgfiD1")] AgfiD1 = 13,
    /// <summary>
    /// E:本國證券投資信託公司於國外募集之非期貨基金(一般帳戶)
    /// </summary>
    [pbr::OriginalName("AgfiE1")] AgfiE1 = 14,
    /// <summary>
    /// f:境外外國期貨商綜合帳戶(應主動揭露) F:境外外國期貨商綜合帳戶(免主動揭露)
    /// </summary>
    [pbr::OriginalName("AgfiF1")] AgfiF1 = 15,
    /// <summary>
    /// G:本國證券投資信託公司於國內募集之非期貨基金(一般帳戶)
    /// </summary>
    [pbr::OriginalName("AgfiG1")] AgfiG1 = 16,
    /// <summary>
    /// H:證券商(一般帳戶)
    /// </summary>
    [pbr::OriginalName("AgfiH1")] AgfiH1 = 17,
    /// <summary>
    /// I:境內華僑及外國人
    /// </summary>
    [pbr::OriginalName("AgfiI1")] AgfiI1 = 18,
    /// <summary>
    /// J:境外華僑及外國人
    /// </summary>
    [pbr::OriginalName("AgfiJ1")] AgfiJ1 = 19,
    /// <summary>
    /// K:本國專營期貨經紀商
    /// </summary>
    [pbr::OriginalName("AgfiK1")] AgfiK1 = 20,
    /// <summary>
    /// L:政府基金(一般)
    /// </summary>
    [pbr::OriginalName("AgfiL1")] AgfiL1 = 21,
    /// <summary>
    /// M:保險公司(一般帳戶)
    /// </summary>
    [pbr::OriginalName("AgfiM1")] AgfiM1 = 22,
    /// <summary>
    /// N:期貨信託基金
    /// </summary>
    [pbr::OriginalName("AgfiN1")] AgfiN1 = 23,
    /// <summary>
    /// O:證券投信投顧接受全權委託法人  _委託人為國內法人或境內外國機構投資人
    /// </summary>
    [pbr::OriginalName("AgfiO1")] AgfiO1 = 24,
    /// <summary>
    /// o:證券投信投顧接受全權委託法人  _委託人為境外外國機構投資人
    /// </summary>
    [pbr::OriginalName("Agfio0")] Agfio0 = 25,
    /// <summary>
    /// P:證券投信投顧接受全權委託自然人_委託人為本國人、境內華僑或境內外國人
    /// </summary>
    [pbr::OriginalName("AgfiP1")] AgfiP1 = 26,
    /// <summary>
    /// p:證券投信投顧接受全權委託自然人_委託人為境外華僑或境外外國人
    /// </summary>
    [pbr::OriginalName("Agfip0")] Agfip0 = 27,
    /// <summary>
    /// Q:期貨經理事業接受全權委託法人  _委託人為國內法人或境內外國機構投資人
    /// </summary>
    [pbr::OriginalName("AgfiQ1")] AgfiQ1 = 28,
    /// <summary>
    /// q:期貨經理事業接受全權委託法人  _委託人為境外外國機構投資人
    /// </summary>
    [pbr::OriginalName("Agfiq0")] Agfiq0 = 29,
    /// <summary>
    /// R:期貨經理事業接受全權委託自然人_委託人為本國人、境內華僑或境內外國人
    /// </summary>
    [pbr::OriginalName("AgfiR1")] AgfiR1 = 30,
    /// <summary>
    /// r:期貨經理事業接受全權委託自然人_委託人為境外華僑或境外外國自然人
    /// </summary>
    [pbr::OriginalName("Agfir0")] Agfir0 = 31,
    /// <summary>
    /// S:境內大陸地區機構投資人
    /// </summary>
    [pbr::OriginalName("AgfiS1")] AgfiS1 = 32,
    /// <summary>
    /// T:境外大陸地區機構投資人
    /// </summary>
    [pbr::OriginalName("AgfiT1")] AgfiT1 = 33,
    /// <summary>
    /// t:證券投信投顧接受全權委託法人  _委託人為境外大陸地區機構投資人
    /// </summary>
    [pbr::OriginalName("Agfit0")] Agfit0 = 34,
    /// <summary>
    /// U:境內大陸地區自然人
    /// </summary>
    [pbr::OriginalName("AgfiU1")] AgfiU1 = 35,
    /// <summary>
    /// V:境外大陸地區自然人
    /// </summary>
    [pbr::OriginalName("AgfiV1")] AgfiV1 = 36,
    /// <summary>
    /// W:期貨商(IB)內部人員法人帳戶
    /// </summary>
    [pbr::OriginalName("AgfiW1")] AgfiW1 = 37,
    /// <summary>
    /// Y:備援帳戶
    /// </summary>
    [pbr::OriginalName("AgfiY1")] AgfiY1 = 38,
    /// <summary>
    /// Z:受援帳戶
    /// </summary>
    [pbr::OriginalName("AgfiZ1")] AgfiZ1 = 39,
    /// <summary>
    ///0:本國法人                                                 (A,q 帳號 99XXXX_X
    /// </summary>
    [pbr::OriginalName("Agfo00")] Agfo00 = 40,
    /// <summary>
    ///1:本國自然人                                                I   帳號 998XXX_X
    /// </summary>
    [pbr::OriginalName("Agfo10")] Agfo10 = 41,
    /// <summary>
    ///2:期貨商自營帳戶                                            J,r 帳號 997XXX_X
    /// </summary>
    [pbr::OriginalName("Agfo20")] Agfo20 = 42,
    /// <summary>
    ///3:期貨商內部人員                                            e,E  b號 999XXX_X
    /// </summary>
    [pbr::OriginalName("Agfo30")] Agfo30 = 43,
    /// <summary>
    ///4:期貨商錯帳專戶                                            g,G 帳號 97XXXX_X
    /// </summary>
    [pbr::OriginalName("Agfo40")] Agfo40 = 44,
    /// <summary>
    ///5:結算會員部位處理專戶                                      f   帳號 95XXXX_X
    /// </summary>
    [pbr::OriginalName("Agfo50")] Agfo50 = 45,
    /// <summary>
    ///6:結算會員違約處理專戶                                      3,7 帳號 98XXXX_X
    /// </summary>
    [pbr::OriginalName("Agfo60")] Agfo60 = 46,
    /// <summary>
    ///7:期貨交易輔助人內部人員                                    H   帳號 8XXXXX_X
    /// </summary>
    [pbr::OriginalName("Agfo70")] Agfo70 = 47,
    /// <summary>
    ///8:造市者                                                    T   帳號 920XXX_X
    /// </summary>
    [pbr::OriginalName("Agfo80")] Agfo80 = 48,
    /// <summary>
    ///9:註銷帳戶(請將交易狀態碼改為 3:註銷)                       V   帳號 927XXX_X
    /// </summary>
    [pbr::OriginalName("Agfo90")] Agfo90 = 49,
    /// <summary>
    ///A:境外外國機構投資人                                        U,S 帳號 928XXX_X)
    /// </summary>
    [pbr::OriginalName("AgfoA1")] AgfoA1 = 50,
    /// <summary>
    ///B:境內外國機構投資人                                 其他戶別皆歸類為:其 他 類
    /// </summary>
    [pbr::OriginalName("AgfoB1")] AgfoB1 = 51,
    /// <summary>
    ///C:期貨經理事業接受共同委任全權委託帳戶
    /// </summary>
    [pbr::OriginalName("AgfoC1")] AgfoC1 = 52,
    /// <summary>
    ///D:銀行(一般帳戶)
    /// </summary>
    [pbr::OriginalName("AgfoD1")] AgfoD1 = 53,
    /// <summary>
    ///E:本國證券投資信託公司於國外募集之非期貨基金(一般帳戶)
    /// </summary>
    [pbr::OriginalName("AgfoE1")] AgfoE1 = 54,
    /// <summary>
    ///G:本國證券投資信託公司於國內募集之非期貨基金(一般帳戶)
    /// </summary>
    [pbr::OriginalName("AgfoG1")] AgfoG1 = 55,
    /// <summary>
    ///H:證券商(一般帳戶)
    /// </summary>
    [pbr::OriginalName("AgfoH1")] AgfoH1 = 56,
    /// <summary>
    ///I:境內華僑及外國人
    /// </summary>
    [pbr::OriginalName("AgfoI1")] AgfoI1 = 57,
    /// <summary>
    ///J:境外華僑及外國人
    /// </summary>
    [pbr::OriginalName("AgfoJ1")] AgfoJ1 = 58,
    /// <summary>
    ///K:本國專營期貨經紀商
    /// </summary>
    [pbr::OriginalName("AgfoK1")] AgfoK1 = 59,
    /// <summary>
    ///L:政府基金(一般)
    /// </summary>
    [pbr::OriginalName("AgfoL1")] AgfoL1 = 60,
    /// <summary>
    ///M:保險公司(一般帳戶)
    /// </summary>
    [pbr::OriginalName("AgfoM1")] AgfoM1 = 61,
    /// <summary>
    ///N:期貨信託基金
    /// </summary>
    [pbr::OriginalName("AgfoN1")] AgfoN1 = 62,
    /// <summary>
    ///O:證券投信投顧接受全權委託法人_委託人為國內法人或境內外國機構投資人
    /// </summary>
    [pbr::OriginalName("AgfoO1")] AgfoO1 = 63,
    /// <summary>
    ///o:證券投信投顧接受全權委託法人_委託人為境外外國機構投資人
    /// </summary>
    [pbr::OriginalName("Agfoo0")] Agfoo0 = 64,
    /// <summary>
    ///P:證券投信投顧接受全權委託自然人_委託人為本國人、境內華僑或境內外國人
    /// </summary>
    [pbr::OriginalName("AgfoP1")] AgfoP1 = 65,
    /// <summary>
    ///p:證券投信投顧接受全權委託自然人_委託人為境外華僑或境外外國人
    /// </summary>
    [pbr::OriginalName("Agfop0")] Agfop0 = 66,
    /// <summary>
    ///Q:期貨經理事業接受全權委託法人_委託人為國內法人或境內外國機構投資人
    /// </summary>
    [pbr::OriginalName("AgfoQ1")] AgfoQ1 = 67,
    /// <summary>
    ///q:期貨經理事業接受全權委託法人_委託人為境外外國機構投資人
    /// </summary>
    [pbr::OriginalName("Agfoq0")] Agfoq0 = 68,
    /// <summary>
    ///R:期貨經理事業接受全權委託自然人_委託人為本國人、境內華僑或境內外國人
    /// </summary>
    [pbr::OriginalName("AgfoR1")] AgfoR1 = 69,
    /// <summary>
    ///r:期貨經理事業接受全權委託自然人_委託人為境外華僑或境外外國自然人
    /// </summary>
    [pbr::OriginalName("Agfor0")] Agfor0 = 70,
    /// <summary>
    ///S:境內大陸地區機構投資人
    /// </summary>
    [pbr::OriginalName("AgfoS1")] AgfoS1 = 71,
    /// <summary>
    ///T:境外大陸地區機構投資人
    /// </summary>
    [pbr::OriginalName("AgfoT1")] AgfoT1 = 72,
    /// <summary>
    ///t:證券投信投顧接受全權委託法人_委託人為境外大陸地區機構投資人
    /// </summary>
    [pbr::OriginalName("Agfot0")] Agfot0 = 73,
    /// <summary>
    ///U:境內大陸地區自然人
    /// </summary>
    [pbr::OriginalName("AgfoU1")] AgfoU1 = 74,
    /// <summary>
    ///V:境外大陸地區自然人
    /// </summary>
    [pbr::OriginalName("AgfoV1")] AgfoV1 = 75,
    /// <summary>
    ///W:期貨商(IB)內部人員法人帳戶
    /// </summary>
    [pbr::OriginalName("AgfoW1")] AgfoW1 = 76,
    /// <summary>
    ///Y:備援帳戶
    /// </summary>
    [pbr::OriginalName("AgfoY1")] AgfoY1 = 77,
    /// <summary>
    ///Z:受援帳戶
    /// </summary>
    [pbr::OriginalName("AgfoZ1")] AgfoZ1 = 78,
  }

  public enum DayTradeFlag {
    [pbr::OriginalName("DtfNone")] DtfNone = 0,
    [pbr::OriginalName("DtfTrue")] DtfTrue = 1,
  }

  public enum ApiFlag {
    [pbr::OriginalName("AfNone")] AfNone = 0,
    [pbr::OriginalName("AfTrue")] AfTrue = 1,
  }

  public enum StopTradeFlag {
    [pbr::OriginalName("stfNone")] StfNone = 0,
    [pbr::OriginalName("stfTrue")] StfTrue = 1,
    [pbr::OriginalName("stfFalse")] StfFalse = 2,
  }

  /// <summary>
  ///每秒可下單筆數  綁定於API   為enum 數值的 N次方     未設定  1 Default =10;  大戶  使用100;   高頻使用  1000;
  /// </summary>
  public enum OrderMaxPerSecFlag {
    [pbr::OriginalName("ompsfNone")] OmpsfNone = 0,
    [pbr::OriginalName("ompsfDefault")] OmpsfDefault = 1,
    [pbr::OriginalName("ompsfVip")] OmpsfVip = 2,
    [pbr::OriginalName("ompsfHft")] OmpsfHft = 3,
  }

  /// <summary>
  ///Tandem 由SSO帶回之  帳號下單市場別  代碼表   ,enum值  即為代碼值
  /// </summary>
  public enum TandemOrderMarketFlag {
    /// <summary>
    ///未定義
    /// </summary>
    [pbr::OriginalName("tomfNone")] TomfNone = 0,
    /// <summary>
    ///證券
    /// </summary>
    [pbr::OriginalName("tomfStock")] TomfStock = 1,
    /// <summary>
    ///期貨
    /// </summary>
    [pbr::OriginalName("tomfFuture")] TomfFuture = 2,
    /// <summary>
    ///複委託
    /// </summary>
    [pbr::OriginalName("tomfSubbrokerage")] TomfSubbrokerage = 3,
    /// <summary>
    ///未定義2
    /// </summary>
    [pbr::OriginalName("tomfNone2")] TomfNone2 = 4,
    /// <summary>
    ///外期
    /// </summary>
    [pbr::OriginalName("tomfSeafuture")] TomfSeafuture = 5,
    /// <summary>
    ///信託
    /// </summary>
    [pbr::OriginalName("tomfTrust")] TomfTrust = 6,
  }

  /// <summary>
  ///OMS 節點主備    利用ZK little seq判斷切換
  /// </summary>
  public enum OmsASModeFlag {
    [pbr::OriginalName("omsasModeNone")] OmsasModeNone = 0,
    [pbr::OriginalName("omsasModeRunning")] OmsasModeRunning = 1,
    [pbr::OriginalName("omsasModeStandby")] OmsasModeStandby = 2,
  }

  public enum TimePeriod {
    [pbr::OriginalName("otNone")] OtNone = 0,
    [pbr::OriginalName("otDay")] OtDay = 1,
    [pbr::OriginalName("otNight")] OtNight = 2,
  }

  /// <summary>
  ///內外互轉說明
  /// </summary>
  public enum TransferFlag {
    [pbr::OriginalName("tfNone")] TfNone = 0,
    /// <summary>
    ///內轉外
    /// </summary>
    [pbr::OriginalName("tfInToOut")] TfInToOut = 1,
    /// <summary>
    ///外轉內
    /// </summary>
    [pbr::OriginalName("tfOutToIn")] TfOutToIn = 2,
  }

  /// <summary>
  ///申請狀態
  /// </summary>
  public enum CancelFlag {
    [pbr::OriginalName("cfNone")] CfNone = 0,
    /// <summary>
    ///已收到申請
    /// </summary>
    [pbr::OriginalName("cfReceive")] CfReceive = 1,
    /// <summary>
    ///已完成
    /// </summary>
    [pbr::OriginalName("cfDone")] CfDone = 2,
    /// <summary>
    ///申請失敗
    /// </summary>
    [pbr::OriginalName("cfFail")] CfFail = 3,
    /// <summary>
    ///取消申請
    /// </summary>
    [pbr::OriginalName("cfCancel")] CfCancel = 4,
  }

  public enum BlackListFlag {
    [pbr::OriginalName("BlfNone")] BlfNone = 0,
    [pbr::OriginalName("BlfTrue")] BlfTrue = 1,
    [pbr::OriginalName("BlfFalse")] BlfFalse = 2,
  }

  #endregion

  #region Messages
  public sealed partial class AccountDetail : pb::IMessage<AccountDetail> {
    private static readonly pb::MessageParser<AccountDetail> _parser = new pb::MessageParser<AccountDetail>(() => new AccountDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountDetail(AccountDetail other) : this() {
      account_ = other.account_;
      iD_ = other.iD_;
      df_ = other.df_;
      vf_ = other.vf_;
      dtf_ = other.dtf_;
      af_ = other.af_;
      agf_ = other.agf_;
      ib_ = other.ib_;
      brokerid_ = other.brokerid_;
      aeid_ = other.aeid_;
      stf_ = other.stf_;
      tomf_ = other.tomf_;
      subAccounts_ = other.subAccounts_.Clone();
      dmaIP_ = other.dmaIP_;
      infoAf_ = other.infoAf_;
      blfApi_ = other.blfApi_;
      blfMl_ = other.blfMl_;
      cf_ = other.cf_;
      gf_ = other.gf_;
      dlf_ = other.dlf_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountDetail Clone() {
      return new AccountDetail(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///帳戶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 2;
    private string iD_ = "";
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "df" field.</summary>
    public const int DfFieldNumber = 3;
    private global::Jsunfutures.Messages.DMAFlag df_ = 0;
    /// <summary>
    ///是否有DMA註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.DMAFlag Df {
      get { return df_; }
      set {
        df_ = value;
      }
    }

    /// <summary>Field number for the "vf" field.</summary>
    public const int VfFieldNumber = 4;
    private global::Jsunfutures.Messages.VIPFlag vf_ = 0;
    /// <summary>
    ///是否有VIP註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.VIPFlag Vf {
      get { return vf_; }
      set {
        vf_ = value;
      }
    }

    /// <summary>Field number for the "dtf" field.</summary>
    public const int DtfFieldNumber = 5;
    private global::Jsunfutures.Messages.DayTradeFlag dtf_ = 0;
    /// <summary>
    ///當沖註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.DayTradeFlag Dtf {
      get { return dtf_; }
      set {
        dtf_ = value;
      }
    }

    /// <summary>Field number for the "af" field.</summary>
    public const int AfFieldNumber = 6;
    private global::Jsunfutures.Messages.ApiFlag af_ = 0;
    /// <summary>
    ///API註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ApiFlag Af {
      get { return af_; }
      set {
        af_ = value;
      }
    }

    /// <summary>Field number for the "agf" field.</summary>
    public const int AgfFieldNumber = 7;
    private global::Jsunfutures.Messages.AccountGroupCodeFlag agf_ = 0;
    /// <summary>
    ///戶別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.AccountGroupCodeFlag Agf {
      get { return agf_; }
      set {
        agf_ = value;
      }
    }

    /// <summary>Field number for the "ib" field.</summary>
    public const int IbFieldNumber = 8;
    private string ib_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ib {
      get { return ib_; }
      set {
        ib_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "brokerid" field.</summary>
    public const int BrokeridFieldNumber = 9;
    private string brokerid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Brokerid {
      get { return brokerid_; }
      set {
        brokerid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aeid" field.</summary>
    public const int AeidFieldNumber = 10;
    private string aeid_ = "";
    /// <summary>
    ///營業員代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Aeid {
      get { return aeid_; }
      set {
        aeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stf" field.</summary>
    public const int StfFieldNumber = 11;
    private global::Jsunfutures.Messages.StopTradeFlag stf_ = 0;
    /// <summary>
    ///中止交易
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.StopTradeFlag Stf {
      get { return stf_; }
      set {
        stf_ = value;
      }
    }

    /// <summary>Field number for the "tomf" field.</summary>
    public const int TomfFieldNumber = 12;
    private global::Jsunfutures.Messages.TandemOrderMarketFlag tomf_ = 0;
    /// <summary>
    ///Tandem 由SSO帶回之  帳號下單市場別  代碼表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TandemOrderMarketFlag Tomf {
      get { return tomf_; }
      set {
        tomf_ = value;
      }
    }

    /// <summary>Field number for the "SubAccounts" field.</summary>
    public const int SubAccountsFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_subAccounts_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> subAccounts_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///子帳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SubAccounts {
      get { return subAccounts_; }
    }

    /// <summary>Field number for the "dmaIP" field.</summary>
    public const int DmaIPFieldNumber = 14;
    private string dmaIP_ = "";
    /// <summary>
    ///如果有DMA IP  則免簽驗章
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DmaIP {
      get { return dmaIP_; }
      set {
        dmaIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InfoAf" field.</summary>
    public const int InfoAfFieldNumber = 15;
    private global::Jsunfutures.Messages.ApiFlag infoAf_ = 0;
    /// <summary>
    ///行情API註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ApiFlag InfoAf {
      get { return infoAf_; }
      set {
        infoAf_ = value;
      }
    }

    /// <summary>Field number for the "blfApi" field.</summary>
    public const int BlfApiFieldNumber = 16;
    private global::Jsunfutures.Messages.BlackListFlag blfApi_ = 0;
    /// <summary>
    ///API黑名單註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.BlackListFlag BlfApi {
      get { return blfApi_; }
      set {
        blfApi_ = value;
      }
    }

    /// <summary>Field number for the "blfMl" field.</summary>
    public const int BlfMlFieldNumber = 17;
    private global::Jsunfutures.Messages.BlackListFlag blfMl_ = 0;
    /// <summary>
    ///曙光MorningLight黑名單註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.BlackListFlag BlfMl {
      get { return blfMl_; }
      set {
        blfMl_ = value;
      }
    }

    /// <summary>Field number for the "cf" field.</summary>
    public const int CfFieldNumber = 18;
    private global::Jsunfutures.Messages.ClientFlag cf_ = 0;
    /// <summary>
    ///由SSO帶回之
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ClientFlag Cf {
      get { return cf_; }
      set {
        cf_ = value;
      }
    }

    /// <summary>Field number for the "gf" field.</summary>
    public const int GfFieldNumber = 19;
    private global::Jsunfutures.Messages.GatewayFlag gf_ = 0;
    /// <summary>
    ///GateWay 由SSO帶回之
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.GatewayFlag Gf {
      get { return gf_; }
      set {
        gf_ = value;
      }
    }

    /// <summary>Field number for the "dlf" field.</summary>
    public const int DlfFieldNumber = 20;
    private global::Jsunfutures.Messages.DirectLineFlag dlf_ = 0;
    /// <summary>
    ///是否有專線註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.DirectLineFlag Dlf {
      get { return dlf_; }
      set {
        dlf_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (ID != other.ID) return false;
      if (Df != other.Df) return false;
      if (Vf != other.Vf) return false;
      if (Dtf != other.Dtf) return false;
      if (Af != other.Af) return false;
      if (Agf != other.Agf) return false;
      if (Ib != other.Ib) return false;
      if (Brokerid != other.Brokerid) return false;
      if (Aeid != other.Aeid) return false;
      if (Stf != other.Stf) return false;
      if (Tomf != other.Tomf) return false;
      if(!subAccounts_.Equals(other.subAccounts_)) return false;
      if (DmaIP != other.DmaIP) return false;
      if (InfoAf != other.InfoAf) return false;
      if (BlfApi != other.BlfApi) return false;
      if (BlfMl != other.BlfMl) return false;
      if (Cf != other.Cf) return false;
      if (Gf != other.Gf) return false;
      if (Dlf != other.Dlf) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (Df != 0) hash ^= Df.GetHashCode();
      if (Vf != 0) hash ^= Vf.GetHashCode();
      if (Dtf != 0) hash ^= Dtf.GetHashCode();
      if (Af != 0) hash ^= Af.GetHashCode();
      if (Agf != 0) hash ^= Agf.GetHashCode();
      if (Ib.Length != 0) hash ^= Ib.GetHashCode();
      if (Brokerid.Length != 0) hash ^= Brokerid.GetHashCode();
      if (Aeid.Length != 0) hash ^= Aeid.GetHashCode();
      if (Stf != 0) hash ^= Stf.GetHashCode();
      if (Tomf != 0) hash ^= Tomf.GetHashCode();
      hash ^= subAccounts_.GetHashCode();
      if (DmaIP.Length != 0) hash ^= DmaIP.GetHashCode();
      if (InfoAf != 0) hash ^= InfoAf.GetHashCode();
      if (BlfApi != 0) hash ^= BlfApi.GetHashCode();
      if (BlfMl != 0) hash ^= BlfMl.GetHashCode();
      if (Cf != 0) hash ^= Cf.GetHashCode();
      if (Gf != 0) hash ^= Gf.GetHashCode();
      if (Dlf != 0) hash ^= Dlf.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (ID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ID);
      }
      if (Df != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Df);
      }
      if (Vf != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Vf);
      }
      if (Dtf != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Dtf);
      }
      if (Af != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Af);
      }
      if (Agf != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Agf);
      }
      if (Ib.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Ib);
      }
      if (Brokerid.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Brokerid);
      }
      if (Aeid.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Aeid);
      }
      if (Stf != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Stf);
      }
      if (Tomf != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Tomf);
      }
      subAccounts_.WriteTo(output, _repeated_subAccounts_codec);
      if (DmaIP.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(DmaIP);
      }
      if (InfoAf != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) InfoAf);
      }
      if (BlfApi != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) BlfApi);
      }
      if (BlfMl != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) BlfMl);
      }
      if (Cf != 0) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) Cf);
      }
      if (Gf != 0) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) Gf);
      }
      if (Dlf != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) Dlf);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (Df != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Df);
      }
      if (Vf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Vf);
      }
      if (Dtf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dtf);
      }
      if (Af != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Af);
      }
      if (Agf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Agf);
      }
      if (Ib.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ib);
      }
      if (Brokerid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Brokerid);
      }
      if (Aeid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Aeid);
      }
      if (Stf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Stf);
      }
      if (Tomf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tomf);
      }
      size += subAccounts_.CalculateSize(_repeated_subAccounts_codec);
      if (DmaIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DmaIP);
      }
      if (InfoAf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InfoAf);
      }
      if (BlfApi != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BlfApi);
      }
      if (BlfMl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BlfMl);
      }
      if (Cf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Cf);
      }
      if (Gf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Gf);
      }
      if (Dlf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Dlf);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountDetail other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.Df != 0) {
        Df = other.Df;
      }
      if (other.Vf != 0) {
        Vf = other.Vf;
      }
      if (other.Dtf != 0) {
        Dtf = other.Dtf;
      }
      if (other.Af != 0) {
        Af = other.Af;
      }
      if (other.Agf != 0) {
        Agf = other.Agf;
      }
      if (other.Ib.Length != 0) {
        Ib = other.Ib;
      }
      if (other.Brokerid.Length != 0) {
        Brokerid = other.Brokerid;
      }
      if (other.Aeid.Length != 0) {
        Aeid = other.Aeid;
      }
      if (other.Stf != 0) {
        Stf = other.Stf;
      }
      if (other.Tomf != 0) {
        Tomf = other.Tomf;
      }
      subAccounts_.Add(other.subAccounts_);
      if (other.DmaIP.Length != 0) {
        DmaIP = other.DmaIP;
      }
      if (other.InfoAf != 0) {
        InfoAf = other.InfoAf;
      }
      if (other.BlfApi != 0) {
        BlfApi = other.BlfApi;
      }
      if (other.BlfMl != 0) {
        BlfMl = other.BlfMl;
      }
      if (other.Cf != 0) {
        Cf = other.Cf;
      }
      if (other.Gf != 0) {
        Gf = other.Gf;
      }
      if (other.Dlf != 0) {
        Dlf = other.Dlf;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            ID = input.ReadString();
            break;
          }
          case 24: {
            df_ = (global::Jsunfutures.Messages.DMAFlag) input.ReadEnum();
            break;
          }
          case 32: {
            vf_ = (global::Jsunfutures.Messages.VIPFlag) input.ReadEnum();
            break;
          }
          case 40: {
            dtf_ = (global::Jsunfutures.Messages.DayTradeFlag) input.ReadEnum();
            break;
          }
          case 48: {
            af_ = (global::Jsunfutures.Messages.ApiFlag) input.ReadEnum();
            break;
          }
          case 56: {
            agf_ = (global::Jsunfutures.Messages.AccountGroupCodeFlag) input.ReadEnum();
            break;
          }
          case 66: {
            Ib = input.ReadString();
            break;
          }
          case 74: {
            Brokerid = input.ReadString();
            break;
          }
          case 82: {
            Aeid = input.ReadString();
            break;
          }
          case 88: {
            stf_ = (global::Jsunfutures.Messages.StopTradeFlag) input.ReadEnum();
            break;
          }
          case 96: {
            tomf_ = (global::Jsunfutures.Messages.TandemOrderMarketFlag) input.ReadEnum();
            break;
          }
          case 106: {
            subAccounts_.AddEntriesFrom(input, _repeated_subAccounts_codec);
            break;
          }
          case 114: {
            DmaIP = input.ReadString();
            break;
          }
          case 120: {
            infoAf_ = (global::Jsunfutures.Messages.ApiFlag) input.ReadEnum();
            break;
          }
          case 128: {
            blfApi_ = (global::Jsunfutures.Messages.BlackListFlag) input.ReadEnum();
            break;
          }
          case 136: {
            blfMl_ = (global::Jsunfutures.Messages.BlackListFlag) input.ReadEnum();
            break;
          }
          case 144: {
            cf_ = (global::Jsunfutures.Messages.ClientFlag) input.ReadEnum();
            break;
          }
          case 152: {
            gf_ = (global::Jsunfutures.Messages.GatewayFlag) input.ReadEnum();
            break;
          }
          case 160: {
            dlf_ = (global::Jsunfutures.Messages.DirectLineFlag) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpecialAccountDetail : pb::IMessage<SpecialAccountDetail> {
    private static readonly pb::MessageParser<SpecialAccountDetail> _parser = new pb::MessageParser<SpecialAccountDetail>(() => new SpecialAccountDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecialAccountDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialAccountDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialAccountDetail(SpecialAccountDetail other) : this() {
      agf_ = other.agf_;
      brokerid_ = other.brokerid_;
      tomf_ = other.tomf_;
      gf_ = other.gf_;
      cf_ = other.cf_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialAccountDetail Clone() {
      return new SpecialAccountDetail(this);
    }

    /// <summary>Field number for the "agf" field.</summary>
    public const int AgfFieldNumber = 1;
    private global::Jsunfutures.Messages.AccountGroupCodeFlag agf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.AccountGroupCodeFlag Agf {
      get { return agf_; }
      set {
        agf_ = value;
      }
    }

    /// <summary>Field number for the "brokerid" field.</summary>
    public const int BrokeridFieldNumber = 2;
    private string brokerid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Brokerid {
      get { return brokerid_; }
      set {
        brokerid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tomf" field.</summary>
    public const int TomfFieldNumber = 3;
    private global::Jsunfutures.Messages.TandemOrderMarketFlag tomf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TandemOrderMarketFlag Tomf {
      get { return tomf_; }
      set {
        tomf_ = value;
      }
    }

    /// <summary>Field number for the "gf" field.</summary>
    public const int GfFieldNumber = 4;
    private global::Jsunfutures.Messages.GatewayFlag gf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.GatewayFlag Gf {
      get { return gf_; }
      set {
        gf_ = value;
      }
    }

    /// <summary>Field number for the "cf" field.</summary>
    public const int CfFieldNumber = 5;
    private global::Jsunfutures.Messages.ClientFlag cf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ClientFlag Cf {
      get { return cf_; }
      set {
        cf_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecialAccountDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecialAccountDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Agf != other.Agf) return false;
      if (Brokerid != other.Brokerid) return false;
      if (Tomf != other.Tomf) return false;
      if (Gf != other.Gf) return false;
      if (Cf != other.Cf) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Agf != 0) hash ^= Agf.GetHashCode();
      if (Brokerid.Length != 0) hash ^= Brokerid.GetHashCode();
      if (Tomf != 0) hash ^= Tomf.GetHashCode();
      if (Gf != 0) hash ^= Gf.GetHashCode();
      if (Cf != 0) hash ^= Cf.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Agf != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Agf);
      }
      if (Brokerid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Brokerid);
      }
      if (Tomf != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Tomf);
      }
      if (Gf != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Gf);
      }
      if (Cf != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Cf);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Agf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Agf);
      }
      if (Brokerid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Brokerid);
      }
      if (Tomf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tomf);
      }
      if (Gf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gf);
      }
      if (Cf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cf);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecialAccountDetail other) {
      if (other == null) {
        return;
      }
      if (other.Agf != 0) {
        Agf = other.Agf;
      }
      if (other.Brokerid.Length != 0) {
        Brokerid = other.Brokerid;
      }
      if (other.Tomf != 0) {
        Tomf = other.Tomf;
      }
      if (other.Gf != 0) {
        Gf = other.Gf;
      }
      if (other.Cf != 0) {
        Cf = other.Cf;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            agf_ = (global::Jsunfutures.Messages.AccountGroupCodeFlag) input.ReadEnum();
            break;
          }
          case 18: {
            Brokerid = input.ReadString();
            break;
          }
          case 24: {
            tomf_ = (global::Jsunfutures.Messages.TandemOrderMarketFlag) input.ReadEnum();
            break;
          }
          case 32: {
            gf_ = (global::Jsunfutures.Messages.GatewayFlag) input.ReadEnum();
            break;
          }
          case 40: {
            cf_ = (global::Jsunfutures.Messages.ClientFlag) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnStatus : pb::IMessage<ConnStatus> {
    private static readonly pb::MessageParser<ConnStatus> _parser = new pb::MessageParser<ConnStatus>(() => new ConnStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnStatus(ConnStatus other) : this() {
      iD_ = other.iD_;
      idendity_ = other.idendity_;
      status_ = other.status_;
      errorCode_ = other.errorCode_;
      errorMsg_ = other.errorMsg_;
      mode_ = other.mode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnStatus Clone() {
      return new ConnStatus(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private string iD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Idendity" field.</summary>
    public const int IdendityFieldNumber = 2;
    private string idendity_ = "";
    /// <summary>
    ///§o§i   _i￥y?°Seq
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idendity {
      get { return idendity_; }
      set {
        idendity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Jsunfutures.Messages.ConnFlag status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ConnFlag Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 4;
    private string errorCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ErrorMsg" field.</summary>
    public const int ErrorMsgFieldNumber = 5;
    private string errorMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMsg {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Mode" field.</summary>
    public const int ModeFieldNumber = 6;
    private global::Jsunfutures.Messages.OmsASModeFlag mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.OmsASModeFlag Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Idendity != other.Idendity) return false;
      if (Status != other.Status) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMsg != other.ErrorMsg) return false;
      if (Mode != other.Mode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (Idendity.Length != 0) hash ^= Idendity.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ErrorCode.Length != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (Idendity.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Idendity);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (ErrorCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ErrorCode);
      }
      if (ErrorMsg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ErrorMsg);
      }
      if (Mode != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Mode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (Idendity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idendity);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ErrorCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
      }
      if (ErrorMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnStatus other) {
      if (other == null) {
        return;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.Idendity.Length != 0) {
        Idendity = other.Idendity;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ErrorCode.Length != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorMsg.Length != 0) {
        ErrorMsg = other.ErrorMsg;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 18: {
            Idendity = input.ReadString();
            break;
          }
          case 24: {
            status_ = (global::Jsunfutures.Messages.ConnFlag) input.ReadEnum();
            break;
          }
          case 34: {
            ErrorCode = input.ReadString();
            break;
          }
          case 42: {
            ErrorMsg = input.ReadString();
            break;
          }
          case 48: {
            mode_ = (global::Jsunfutures.Messages.OmsASModeFlag) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeartBeat : pb::IMessage<HeartBeat> {
    private static readonly pb::MessageParser<HeartBeat> _parser = new pb::MessageParser<HeartBeat>(() => new HeartBeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat(HeartBeat other) : this() {
      status_ = other.status_;
      omsVersion_ = other.omsVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat Clone() {
      return new HeartBeat(this);
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Jsunfutures.Messages.ConnFlag status_ = 0;
    /// <summary>
    ///ConnFlag  =   Alive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ConnFlag Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "OmsVersion" field.</summary>
    public const int OmsVersionFieldNumber = 2;
    private string omsVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OmsVersion {
      get { return omsVersion_; }
      set {
        omsVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (OmsVersion != other.OmsVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (OmsVersion.Length != 0) hash ^= OmsVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (OmsVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OmsVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (OmsVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OmsVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeat other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.OmsVersion.Length != 0) {
        OmsVersion = other.OmsVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Jsunfutures.Messages.ConnFlag) input.ReadEnum();
            break;
          }
          case 18: {
            OmsVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportList : pb::IMessage<ReportList> {
    private static readonly pb::MessageParser<ReportList> _parser = new pb::MessageParser<ReportList>(() => new ReportList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportList(ReportList other) : this() {
      account_ = other.account_;
      identidy_ = other.identidy_;
      id_ = other.id_;
      startNo_ = other.startNo_;
      endNo_ = other.endNo_;
      reports_ = other.reports_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportList Clone() {
      return new ReportList(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identidy" field.</summary>
    public const int IdentidyFieldNumber = 2;
    private string identidy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identidy {
      get { return identidy_; }
      set {
        identidy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startNo" field.</summary>
    public const int StartNoFieldNumber = 4;
    private int startNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartNo {
      get { return startNo_; }
      set {
        startNo_ = value;
      }
    }

    /// <summary>Field number for the "endNo" field.</summary>
    public const int EndNoFieldNumber = 5;
    private int endNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndNo {
      get { return endNo_; }
      set {
        endNo_ = value;
      }
    }

    /// <summary>Field number for the "reports" field.</summary>
    public const int ReportsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.Report> _repeated_reports_codec
        = pb::FieldCodec.ForMessage(50, global::Jsunfutures.Messages.Report.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.Report> reports_ = new pbc::RepeatedField<global::Jsunfutures.Messages.Report>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.Report> Reports {
      get { return reports_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Identidy != other.Identidy) return false;
      if (Id != other.Id) return false;
      if (StartNo != other.StartNo) return false;
      if (EndNo != other.EndNo) return false;
      if(!reports_.Equals(other.reports_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Identidy.Length != 0) hash ^= Identidy.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (StartNo != 0) hash ^= StartNo.GetHashCode();
      if (EndNo != 0) hash ^= EndNo.GetHashCode();
      hash ^= reports_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Identidy.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Identidy);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
      if (StartNo != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StartNo);
      }
      if (EndNo != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EndNo);
      }
      reports_.WriteTo(output, _repeated_reports_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Identidy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identidy);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (StartNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartNo);
      }
      if (EndNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndNo);
      }
      size += reports_.CalculateSize(_repeated_reports_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportList other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Identidy.Length != 0) {
        Identidy = other.Identidy;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.StartNo != 0) {
        StartNo = other.StartNo;
      }
      if (other.EndNo != 0) {
        EndNo = other.EndNo;
      }
      reports_.Add(other.reports_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Identidy = input.ReadString();
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
          case 32: {
            StartNo = input.ReadInt32();
            break;
          }
          case 40: {
            EndNo = input.ReadInt32();
            break;
          }
          case 50: {
            reports_.AddEntriesFrom(input, _repeated_reports_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Positions : pb::IMessage<Positions> {
    private static readonly pb::MessageParser<Positions> _parser = new pb::MessageParser<Positions>(() => new Positions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Positions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Positions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Positions(Positions other) : this() {
      positions_ = other.positions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Positions Clone() {
      return new Positions(this);
    }

    /// <summary>Field number for the "positions" field.</summary>
    public const int Positions_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.Position> _repeated_positions_codec
        = pb::FieldCodec.ForMessage(10, global::Jsunfutures.Messages.Position.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.Position> positions_ = new pbc::RepeatedField<global::Jsunfutures.Messages.Position>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.Position> Positions_ {
      get { return positions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Positions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Positions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!positions_.Equals(other.positions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= positions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      positions_.WriteTo(output, _repeated_positions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += positions_.CalculateSize(_repeated_positions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Positions other) {
      if (other == null) {
        return;
      }
      positions_.Add(other.positions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            positions_.AddEntriesFrom(input, _repeated_positions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Orders : pb::IMessage<Orders> {
    private static readonly pb::MessageParser<Orders> _parser = new pb::MessageParser<Orders>(() => new Orders());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Orders> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Orders() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Orders(Orders other) : this() {
      orders_ = other.orders_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Orders Clone() {
      return new Orders(this);
    }

    /// <summary>Field number for the "orders" field.</summary>
    public const int Orders_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.Order> _repeated_orders_codec
        = pb::FieldCodec.ForMessage(10, global::Jsunfutures.Messages.Order.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.Order> orders_ = new pbc::RepeatedField<global::Jsunfutures.Messages.Order>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.Order> Orders_ {
      get { return orders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Orders);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Orders other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!orders_.Equals(other.orders_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= orders_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      orders_.WriteTo(output, _repeated_orders_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += orders_.CalculateSize(_repeated_orders_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Orders other) {
      if (other == null) {
        return;
      }
      orders_.Add(other.orders_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            orders_.AddEntriesFrom(input, _repeated_orders_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Order : pb::IMessage<Order> {
    private static readonly pb::MessageParser<Order> _parser = new pb::MessageParser<Order>(() => new Order());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Order> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order(Order other) : this() {
      account_ = other.account_;
      brokerID_ = other.brokerID_;
      bs_ = other.bs_;
      cAmessage_ = other.cAmessage_;
      clientFlag_ = other.clientFlag_;
      clientOrdNo_ = other.clientOrdNo_;
      cnt_ = other.cnt_;
      currencyIN_ = other.currencyIN_;
      currencyOut_ = other.currencyOut_;
      exchange_ = other.exchange_;
      iD_ = other.iD_;
      localmachineTime_ = other.localmachineTime_;
      marketflag_ = other.marketflag_;
      oMSResult_ = other.oMSResult_;
      optionflag_ = other.optionflag_;
      orderGateWay_ = other.orderGateWay_;
      orderIP_ = other.orderIP_;
      orderNo_ = other.orderNo_;
      ordertype_ = other.ordertype_;
      positionEffect_ = other.positionEffect_;
      price_ = other.price_;
      priceflag_ = other.priceflag_;
      qTY_ = other.qTY_;
      requestID_ = other.requestID_;
      sT_ = other.sT_;
      subAccount_ = other.subAccount_;
      symbol_ = other.symbol_;
      tif_ = other.tif_;
      tracerIDServerMake_ = other.tracerIDServerMake_;
      webID_ = other.webID_;
      cAKey_ = other.cAKey_;
      agf_ = other.agf_;
      ibNo_ = other.ibNo_;
      stopConditionflag_ = other.stopConditionflag_;
      stopPrice_ = other.stopPrice_;
      gtdExpireday_ = other.gtdExpireday_;
      ftf_ = other.ftf_;
      minQty_ = other.minQty_;
      timePeriod_ = other.timePeriod_;
      priceDen_ = other.priceDen_;
      priceNum_ = other.priceNum_;
      stopPriceDen_ = other.stopPriceDen_;
      stopPriceNum_ = other.stopPriceNum_;
      tomf_ = other.tomf_;
      suf_ = other.suf_;
      b2BID_ = other.b2BID_;
      checkCodeFromSSO_ = other.checkCodeFromSSO_;
      toTalAccount_ = other.toTalAccount_;
      aPKind_ = other.aPKind_;
      traderPASS_ = other.traderPASS_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order Clone() {
      return new Order(this);
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///客戶帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BrokerID" field.</summary>
    public const int BrokerIDFieldNumber = 2;
    private string brokerID_ = "";
    /// <summary>
    ///券商代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerID {
      get { return brokerID_; }
      set {
        brokerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Bs" field.</summary>
    public const int BsFieldNumber = 3;
    private global::Jsunfutures.Messages.BS bs_ = 0;
    /// <summary>
    ///買賣別,複式成交單:合併買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.BS Bs {
      get { return bs_; }
      set {
        bs_ = value;
      }
    }

    /// <summary>Field number for the "CAmessage" field.</summary>
    public const int CAmessageFieldNumber = 4;
    private string cAmessage_ = "";
    /// <summary>
    ///簽章碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CAmessage {
      get { return cAmessage_; }
      set {
        cAmessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientFlag" field.</summary>
    public const int ClientFlagFieldNumber = 5;
    private global::Jsunfutures.Messages.ClientFlag clientFlag_ = 0;
    /// <summary>
    ///    => 4 今明細 (WR_READ_DATA) 明細格式如下 : (400 bytes)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ClientFlag ClientFlag {
      get { return clientFlag_; }
      set {
        clientFlag_ = value;
      }
    }

    /// <summary>Field number for the "ClientOrdNo" field.</summary>
    public const int ClientOrdNoFieldNumber = 6;
    private string clientOrdNo_ = "";
    /// <summary>
    ///客戶委託序號(使用客戶委託序號對照原委託)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientOrdNo {
      get { return clientOrdNo_; }
      set {
        clientOrdNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Cnt" field.</summary>
    public const int CntFieldNumber = 7;
    private string cnt_ = "";
    /// <summary>
    ///API 自動產生的序號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cnt {
      get { return cnt_; }
      set {
        cnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrencyIN" field.</summary>
    public const int CurrencyINFieldNumber = 8;
    private global::Jsunfutures.Messages.Currency currencyIN_ = 0;
    /// <summary>
    ///委託幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Currency CurrencyIN {
      get { return currencyIN_; }
      set {
        currencyIN_ = value;
      }
    }

    /// <summary>Field number for the "CurrencyOut" field.</summary>
    public const int CurrencyOutFieldNumber = 9;
    private global::Jsunfutures.Messages.Currency currencyOut_ = 0;
    /// <summary>
    ///轉換幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Currency CurrencyOut {
      get { return currencyOut_; }
      set {
        currencyOut_ = value;
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 10;
    private global::Jsunfutures.Messages.ExchangeFlag exchange_ = 0;
    /// <summary>
    ///交易所
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ExchangeFlag Exchange {
      get { return exchange_; }
      set {
        exchange_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 11;
    private string iD_ = "";
    /// <summary>
    ///身分證字號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LocalmachineTime" field.</summary>
    public const int LocalmachineTimeFieldNumber = 12;
    private long localmachineTime_;
    /// <summary>
    ///委託時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LocalmachineTime {
      get { return localmachineTime_; }
      set {
        localmachineTime_ = value;
      }
    }

    /// <summary>Field number for the "Marketflag" field.</summary>
    public const int MarketflagFieldNumber = 13;
    private global::Jsunfutures.Messages.MarketFlag marketflag_ = 0;
    /// <summary>
    ///1_期貨,2_選擇權,3_複式選擇權,4_期貨價差交易
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.MarketFlag Marketflag {
      get { return marketflag_; }
      set {
        marketflag_ = value;
      }
    }

    /// <summary>Field number for the "OMS_Result" field.</summary>
    public const int OMSResultFieldNumber = 14;
    private string oMSResult_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OMSResult {
      get { return oMSResult_; }
      set {
        oMSResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Optionflag" field.</summary>
    public const int OptionflagFieldNumber = 15;
    private global::Jsunfutures.Messages.OptionFlag optionflag_ = 0;
    /// <summary>
    ///1_Call,2_Put
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.OptionFlag Optionflag {
      get { return optionflag_; }
      set {
        optionflag_ = value;
      }
    }

    /// <summary>Field number for the "OrderGateWay" field.</summary>
    public const int OrderGateWayFieldNumber = 16;
    private global::Jsunfutures.Messages.GatewayFlag orderGateWay_ = 0;
    /// <summary>
    ///使用交易閘道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.GatewayFlag OrderGateWay {
      get { return orderGateWay_; }
      set {
        orderGateWay_ = value;
      }
    }

    /// <summary>Field number for the "OrderIP" field.</summary>
    public const int OrderIPFieldNumber = 17;
    private string orderIP_ = "";
    /// <summary>
    ///委託IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderIP {
      get { return orderIP_; }
      set {
        orderIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderNo" field.</summary>
    public const int OrderNoFieldNumber = 18;
    private string orderNo_ = "";
    /// <summary>
    ///委託書號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderNo {
      get { return orderNo_; }
      set {
        orderNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ordertype" field.</summary>
    public const int OrdertypeFieldNumber = 19;
    private global::Jsunfutures.Messages.OrderType ordertype_ = 0;
    /// <summary>
    ///委託類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.OrderType Ordertype {
      get { return ordertype_; }
      set {
        ordertype_ = value;
      }
    }

    /// <summary>Field number for the "position_effect" field.</summary>
    public const int PositionEffectFieldNumber = 20;
    private global::Jsunfutures.Messages.Position_Effect positionEffect_ = 0;
    /// <summary>
    ///1_新增,2_沖銷,3_當沖,4_自動
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Position_Effect PositionEffect {
      get { return positionEffect_; }
      set {
        positionEffect_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 21;
    private double price_;
    /// <summary>
    ///委託價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Priceflag" field.</summary>
    public const int PriceflagFieldNumber = 22;
    private global::Jsunfutures.Messages.PriceFlag priceflag_ = 0;
    /// <summary>
    ///1:限價, 2:市價, 3:市價停損, 4:限價停損, 5:範圍市價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.PriceFlag Priceflag {
      get { return priceflag_; }
      set {
        priceflag_ = value;
      }
    }

    /// <summary>Field number for the "QTY" field.</summary>
    public const int QTYFieldNumber = 23;
    private int qTY_;
    /// <summary>
    ///委託數量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QTY {
      get { return qTY_; }
      set {
        qTY_ = value;
      }
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 24;
    private string requestID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestID {
      get { return requestID_; }
      set {
        requestID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ST" field.</summary>
    public const int STFieldNumber = 25;
    private string sT_ = "";
    /// <summary>
    ///策略名稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ST {
      get { return sT_; }
      set {
        sT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubAccount" field.</summary>
    public const int SubAccountFieldNumber = 26;
    private string subAccount_ = "";
    /// <summary>
    ///子帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubAccount {
      get { return subAccount_; }
      set {
        subAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 27;
    private string symbol_ = "";
    /// <summary>
    ///商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Tif" field.</summary>
    public const int TifFieldNumber = 28;
    private global::Jsunfutures.Messages.TIF tif_ = 0;
    /// <summary>
    ///委託條件:1_ROD,2_FOK,3_IOC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TIF Tif {
      get { return tif_; }
      set {
        tif_ = value;
      }
    }

    /// <summary>Field number for the "TracerID_ServerMake" field.</summary>
    public const int TracerIDServerMakeFieldNumber = 29;
    private long tracerIDServerMake_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TracerIDServerMake {
      get { return tracerIDServerMake_; }
      set {
        tracerIDServerMake_ = value;
      }
    }

    /// <summary>Field number for the "WebID" field.</summary>
    public const int WebIDFieldNumber = 30;
    private string webID_ = "";
    /// <summary>
    ///櫃號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WebID {
      get { return webID_; }
      set {
        webID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CAKey" field.</summary>
    public const int CAKeyFieldNumber = 31;
    private string cAKey_ = "";
    /// <summary>
    ///簽章碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CAKey {
      get { return cAKey_; }
      set {
        cAKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "agf" field.</summary>
    public const int AgfFieldNumber = 32;
    private global::Jsunfutures.Messages.AccountGroupCodeFlag agf_ = 0;
    /// <summary>
    ///戶別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.AccountGroupCodeFlag Agf {
      get { return agf_; }
      set {
        agf_ = value;
      }
    }

    /// <summary>Field number for the "IbNo" field.</summary>
    public const int IbNoFieldNumber = 33;
    private string ibNo_ = "";
    /// <summary>
    ///IB代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IbNo {
      get { return ibNo_; }
      set {
        ibNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopConditionflag" field.</summary>
    public const int StopConditionflagFieldNumber = 34;
    private global::Jsunfutures.Messages.StopConditionFlag stopConditionflag_ = 0;
    /// <summary>
    ///停損單
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.StopConditionFlag StopConditionflag {
      get { return stopConditionflag_; }
      set {
        stopConditionflag_ = value;
      }
    }

    /// <summary>Field number for the "StopPrice" field.</summary>
    public const int StopPriceFieldNumber = 35;
    private double stopPrice_;
    /// <summary>
    ///停損單
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopPrice {
      get { return stopPrice_; }
      set {
        stopPrice_ = value;
      }
    }

    /// <summary>Field number for the "GtdExpireday" field.</summary>
    public const int GtdExpiredayFieldNumber = 36;
    private int gtdExpireday_;
    /// <summary>
    ///GTD委託單之過期日  yyyyMMdd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GtdExpireday {
      get { return gtdExpireday_; }
      set {
        gtdExpireday_ = value;
      }
    }

    /// <summary>Field number for the "ftf" field.</summary>
    public const int FtfFieldNumber = 37;
    private global::Jsunfutures.Messages.FillTypeFlag ftf_ = 0;
    /// <summary>
    ///可不帶, 預設為 Any  以 TIF=IOC, FILL_TYPE=All 來代表 FOK (Fill Or Kill, 全部成交否則取消)  ICE GateWay
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.FillTypeFlag Ftf {
      get { return ftf_; }
      set {
        ftf_ = value;
      }
    }

    /// <summary>Field number for the "MinQty" field.</summary>
    public const int MinQtyFieldNumber = 38;
    private int minQty_;
    /// <summary>
    ///當FillTypeFlag==Min  則  需要帶入此值  ICEGate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinQty {
      get { return minQty_; }
      set {
        minQty_ = value;
      }
    }

    /// <summary>Field number for the "TimePeriod" field.</summary>
    public const int TimePeriodFieldNumber = 39;
    private global::Jsunfutures.Messages.TimePeriod timePeriod_ = 0;
    /// <summary>
    ///日盤或夜盤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TimePeriod TimePeriod {
      get { return timePeriod_; }
      set {
        timePeriod_ = value;
      }
    }

    /// <summary>Field number for the "PriceDen" field.</summary>
    public const int PriceDenFieldNumber = 40;
    private double priceDen_;
    /// <summary>
    ///委託價分母
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceDen {
      get { return priceDen_; }
      set {
        priceDen_ = value;
      }
    }

    /// <summary>Field number for the "PriceNum" field.</summary>
    public const int PriceNumFieldNumber = 41;
    private double priceNum_;
    /// <summary>
    ///委託價分子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceNum {
      get { return priceNum_; }
      set {
        priceNum_ = value;
      }
    }

    /// <summary>Field number for the "StopPriceDen" field.</summary>
    public const int StopPriceDenFieldNumber = 42;
    private double stopPriceDen_;
    /// <summary>
    ///停損價分母
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopPriceDen {
      get { return stopPriceDen_; }
      set {
        stopPriceDen_ = value;
      }
    }

    /// <summary>Field number for the "StopPriceNum" field.</summary>
    public const int StopPriceNumFieldNumber = 43;
    private double stopPriceNum_;
    /// <summary>
    ///停損價分子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopPriceNum {
      get { return stopPriceNum_; }
      set {
        stopPriceNum_ = value;
      }
    }

    /// <summary>Field number for the "tomf" field.</summary>
    public const int TomfFieldNumber = 44;
    private global::Jsunfutures.Messages.TandemOrderMarketFlag tomf_ = 0;
    /// <summary>
    ///下單市場別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TandemOrderMarketFlag Tomf {
      get { return tomf_; }
      set {
        tomf_ = value;
      }
    }

    /// <summary>Field number for the "suf" field.</summary>
    public const int SufFieldNumber = 45;
    private global::Jsunfutures.Messages.SpecialUserFlag suf_ = 0;
    /// <summary>
    ///B2B
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.SpecialUserFlag Suf {
      get { return suf_; }
      set {
        suf_ = value;
      }
    }

    /// <summary>Field number for the "B2BID" field.</summary>
    public const int B2BIDFieldNumber = 46;
    private string b2BID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string B2BID {
      get { return b2BID_; }
      set {
        b2BID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CheckCodeFromSSO" field.</summary>
    public const int CheckCodeFromSSOFieldNumber = 47;
    private string checkCodeFromSSO_ = "";
    /// <summary>
    ///CA USE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CheckCodeFromSSO {
      get { return checkCodeFromSSO_; }
      set {
        checkCodeFromSSO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToTalAccount" field.</summary>
    public const int ToTalAccountFieldNumber = 48;
    private string toTalAccount_ = "";
    /// <summary>
    ///SSO Use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToTalAccount {
      get { return toTalAccount_; }
      set {
        toTalAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AP_Kind" field.</summary>
    public const int APKindFieldNumber = 49;
    private string aPKind_ = "";
    /// <summary>
    ///交易密碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string APKind {
      get { return aPKind_; }
      set {
        aPKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TraderPASS" field.</summary>
    public const int TraderPASSFieldNumber = 50;
    private string traderPASS_ = "";
    /// <summary>
    ///交易密碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraderPASS {
      get { return traderPASS_; }
      set {
        traderPASS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Order);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Order other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (BrokerID != other.BrokerID) return false;
      if (Bs != other.Bs) return false;
      if (CAmessage != other.CAmessage) return false;
      if (ClientFlag != other.ClientFlag) return false;
      if (ClientOrdNo != other.ClientOrdNo) return false;
      if (Cnt != other.Cnt) return false;
      if (CurrencyIN != other.CurrencyIN) return false;
      if (CurrencyOut != other.CurrencyOut) return false;
      if (Exchange != other.Exchange) return false;
      if (ID != other.ID) return false;
      if (LocalmachineTime != other.LocalmachineTime) return false;
      if (Marketflag != other.Marketflag) return false;
      if (OMSResult != other.OMSResult) return false;
      if (Optionflag != other.Optionflag) return false;
      if (OrderGateWay != other.OrderGateWay) return false;
      if (OrderIP != other.OrderIP) return false;
      if (OrderNo != other.OrderNo) return false;
      if (Ordertype != other.Ordertype) return false;
      if (PositionEffect != other.PositionEffect) return false;
      if (Price != other.Price) return false;
      if (Priceflag != other.Priceflag) return false;
      if (QTY != other.QTY) return false;
      if (RequestID != other.RequestID) return false;
      if (ST != other.ST) return false;
      if (SubAccount != other.SubAccount) return false;
      if (Symbol != other.Symbol) return false;
      if (Tif != other.Tif) return false;
      if (TracerIDServerMake != other.TracerIDServerMake) return false;
      if (WebID != other.WebID) return false;
      if (CAKey != other.CAKey) return false;
      if (Agf != other.Agf) return false;
      if (IbNo != other.IbNo) return false;
      if (StopConditionflag != other.StopConditionflag) return false;
      if (StopPrice != other.StopPrice) return false;
      if (GtdExpireday != other.GtdExpireday) return false;
      if (Ftf != other.Ftf) return false;
      if (MinQty != other.MinQty) return false;
      if (TimePeriod != other.TimePeriod) return false;
      if (PriceDen != other.PriceDen) return false;
      if (PriceNum != other.PriceNum) return false;
      if (StopPriceDen != other.StopPriceDen) return false;
      if (StopPriceNum != other.StopPriceNum) return false;
      if (Tomf != other.Tomf) return false;
      if (Suf != other.Suf) return false;
      if (B2BID != other.B2BID) return false;
      if (CheckCodeFromSSO != other.CheckCodeFromSSO) return false;
      if (ToTalAccount != other.ToTalAccount) return false;
      if (APKind != other.APKind) return false;
      if (TraderPASS != other.TraderPASS) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (BrokerID.Length != 0) hash ^= BrokerID.GetHashCode();
      if (Bs != 0) hash ^= Bs.GetHashCode();
      if (CAmessage.Length != 0) hash ^= CAmessage.GetHashCode();
      if (ClientFlag != 0) hash ^= ClientFlag.GetHashCode();
      if (ClientOrdNo.Length != 0) hash ^= ClientOrdNo.GetHashCode();
      if (Cnt.Length != 0) hash ^= Cnt.GetHashCode();
      if (CurrencyIN != 0) hash ^= CurrencyIN.GetHashCode();
      if (CurrencyOut != 0) hash ^= CurrencyOut.GetHashCode();
      if (Exchange != 0) hash ^= Exchange.GetHashCode();
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (LocalmachineTime != 0L) hash ^= LocalmachineTime.GetHashCode();
      if (Marketflag != 0) hash ^= Marketflag.GetHashCode();
      if (OMSResult.Length != 0) hash ^= OMSResult.GetHashCode();
      if (Optionflag != 0) hash ^= Optionflag.GetHashCode();
      if (OrderGateWay != 0) hash ^= OrderGateWay.GetHashCode();
      if (OrderIP.Length != 0) hash ^= OrderIP.GetHashCode();
      if (OrderNo.Length != 0) hash ^= OrderNo.GetHashCode();
      if (Ordertype != 0) hash ^= Ordertype.GetHashCode();
      if (PositionEffect != 0) hash ^= PositionEffect.GetHashCode();
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (Priceflag != 0) hash ^= Priceflag.GetHashCode();
      if (QTY != 0) hash ^= QTY.GetHashCode();
      if (RequestID.Length != 0) hash ^= RequestID.GetHashCode();
      if (ST.Length != 0) hash ^= ST.GetHashCode();
      if (SubAccount.Length != 0) hash ^= SubAccount.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Tif != 0) hash ^= Tif.GetHashCode();
      if (TracerIDServerMake != 0L) hash ^= TracerIDServerMake.GetHashCode();
      if (WebID.Length != 0) hash ^= WebID.GetHashCode();
      if (CAKey.Length != 0) hash ^= CAKey.GetHashCode();
      if (Agf != 0) hash ^= Agf.GetHashCode();
      if (IbNo.Length != 0) hash ^= IbNo.GetHashCode();
      if (StopConditionflag != 0) hash ^= StopConditionflag.GetHashCode();
      if (StopPrice != 0D) hash ^= StopPrice.GetHashCode();
      if (GtdExpireday != 0) hash ^= GtdExpireday.GetHashCode();
      if (Ftf != 0) hash ^= Ftf.GetHashCode();
      if (MinQty != 0) hash ^= MinQty.GetHashCode();
      if (TimePeriod != 0) hash ^= TimePeriod.GetHashCode();
      if (PriceDen != 0D) hash ^= PriceDen.GetHashCode();
      if (PriceNum != 0D) hash ^= PriceNum.GetHashCode();
      if (StopPriceDen != 0D) hash ^= StopPriceDen.GetHashCode();
      if (StopPriceNum != 0D) hash ^= StopPriceNum.GetHashCode();
      if (Tomf != 0) hash ^= Tomf.GetHashCode();
      if (Suf != 0) hash ^= Suf.GetHashCode();
      if (B2BID.Length != 0) hash ^= B2BID.GetHashCode();
      if (CheckCodeFromSSO.Length != 0) hash ^= CheckCodeFromSSO.GetHashCode();
      if (ToTalAccount.Length != 0) hash ^= ToTalAccount.GetHashCode();
      if (APKind.Length != 0) hash ^= APKind.GetHashCode();
      if (TraderPASS.Length != 0) hash ^= TraderPASS.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (BrokerID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BrokerID);
      }
      if (Bs != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Bs);
      }
      if (CAmessage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CAmessage);
      }
      if (ClientFlag != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ClientFlag);
      }
      if (ClientOrdNo.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ClientOrdNo);
      }
      if (Cnt.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Cnt);
      }
      if (CurrencyIN != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) CurrencyIN);
      }
      if (CurrencyOut != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CurrencyOut);
      }
      if (Exchange != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Exchange);
      }
      if (ID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ID);
      }
      if (LocalmachineTime != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(LocalmachineTime);
      }
      if (Marketflag != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Marketflag);
      }
      if (OMSResult.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(OMSResult);
      }
      if (Optionflag != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Optionflag);
      }
      if (OrderGateWay != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) OrderGateWay);
      }
      if (OrderIP.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(OrderIP);
      }
      if (OrderNo.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(OrderNo);
      }
      if (Ordertype != 0) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) Ordertype);
      }
      if (PositionEffect != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) PositionEffect);
      }
      if (Price != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(Price);
      }
      if (Priceflag != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) Priceflag);
      }
      if (QTY != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(QTY);
      }
      if (RequestID.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(RequestID);
      }
      if (ST.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(ST);
      }
      if (SubAccount.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(SubAccount);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Symbol);
      }
      if (Tif != 0) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) Tif);
      }
      if (TracerIDServerMake != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(TracerIDServerMake);
      }
      if (WebID.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(WebID);
      }
      if (CAKey.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(CAKey);
      }
      if (Agf != 0) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) Agf);
      }
      if (IbNo.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(IbNo);
      }
      if (StopConditionflag != 0) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) StopConditionflag);
      }
      if (StopPrice != 0D) {
        output.WriteRawTag(153, 2);
        output.WriteDouble(StopPrice);
      }
      if (GtdExpireday != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(GtdExpireday);
      }
      if (Ftf != 0) {
        output.WriteRawTag(168, 2);
        output.WriteEnum((int) Ftf);
      }
      if (MinQty != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(MinQty);
      }
      if (TimePeriod != 0) {
        output.WriteRawTag(184, 2);
        output.WriteEnum((int) TimePeriod);
      }
      if (PriceDen != 0D) {
        output.WriteRawTag(193, 2);
        output.WriteDouble(PriceDen);
      }
      if (PriceNum != 0D) {
        output.WriteRawTag(201, 2);
        output.WriteDouble(PriceNum);
      }
      if (StopPriceDen != 0D) {
        output.WriteRawTag(209, 2);
        output.WriteDouble(StopPriceDen);
      }
      if (StopPriceNum != 0D) {
        output.WriteRawTag(217, 2);
        output.WriteDouble(StopPriceNum);
      }
      if (Tomf != 0) {
        output.WriteRawTag(224, 2);
        output.WriteEnum((int) Tomf);
      }
      if (Suf != 0) {
        output.WriteRawTag(232, 2);
        output.WriteEnum((int) Suf);
      }
      if (B2BID.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(B2BID);
      }
      if (CheckCodeFromSSO.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(CheckCodeFromSSO);
      }
      if (ToTalAccount.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(ToTalAccount);
      }
      if (APKind.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(APKind);
      }
      if (TraderPASS.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(TraderPASS);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (BrokerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerID);
      }
      if (Bs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Bs);
      }
      if (CAmessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CAmessage);
      }
      if (ClientFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClientFlag);
      }
      if (ClientOrdNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientOrdNo);
      }
      if (Cnt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cnt);
      }
      if (CurrencyIN != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrencyIN);
      }
      if (CurrencyOut != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrencyOut);
      }
      if (Exchange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Exchange);
      }
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (LocalmachineTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LocalmachineTime);
      }
      if (Marketflag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Marketflag);
      }
      if (OMSResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OMSResult);
      }
      if (Optionflag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Optionflag);
      }
      if (OrderGateWay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderGateWay);
      }
      if (OrderIP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderIP);
      }
      if (OrderNo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderNo);
      }
      if (Ordertype != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Ordertype);
      }
      if (PositionEffect != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionEffect);
      }
      if (Price != 0D) {
        size += 2 + 8;
      }
      if (Priceflag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Priceflag);
      }
      if (QTY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(QTY);
      }
      if (RequestID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RequestID);
      }
      if (ST.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ST);
      }
      if (SubAccount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SubAccount);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Tif != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Tif);
      }
      if (TracerIDServerMake != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TracerIDServerMake);
      }
      if (WebID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WebID);
      }
      if (CAKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CAKey);
      }
      if (Agf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Agf);
      }
      if (IbNo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IbNo);
      }
      if (StopConditionflag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StopConditionflag);
      }
      if (StopPrice != 0D) {
        size += 2 + 8;
      }
      if (GtdExpireday != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GtdExpireday);
      }
      if (Ftf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Ftf);
      }
      if (MinQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinQty);
      }
      if (TimePeriod != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TimePeriod);
      }
      if (PriceDen != 0D) {
        size += 2 + 8;
      }
      if (PriceNum != 0D) {
        size += 2 + 8;
      }
      if (StopPriceDen != 0D) {
        size += 2 + 8;
      }
      if (StopPriceNum != 0D) {
        size += 2 + 8;
      }
      if (Tomf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Tomf);
      }
      if (Suf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Suf);
      }
      if (B2BID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(B2BID);
      }
      if (CheckCodeFromSSO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CheckCodeFromSSO);
      }
      if (ToTalAccount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ToTalAccount);
      }
      if (APKind.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(APKind);
      }
      if (TraderPASS.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TraderPASS);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Order other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.BrokerID.Length != 0) {
        BrokerID = other.BrokerID;
      }
      if (other.Bs != 0) {
        Bs = other.Bs;
      }
      if (other.CAmessage.Length != 0) {
        CAmessage = other.CAmessage;
      }
      if (other.ClientFlag != 0) {
        ClientFlag = other.ClientFlag;
      }
      if (other.ClientOrdNo.Length != 0) {
        ClientOrdNo = other.ClientOrdNo;
      }
      if (other.Cnt.Length != 0) {
        Cnt = other.Cnt;
      }
      if (other.CurrencyIN != 0) {
        CurrencyIN = other.CurrencyIN;
      }
      if (other.CurrencyOut != 0) {
        CurrencyOut = other.CurrencyOut;
      }
      if (other.Exchange != 0) {
        Exchange = other.Exchange;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.LocalmachineTime != 0L) {
        LocalmachineTime = other.LocalmachineTime;
      }
      if (other.Marketflag != 0) {
        Marketflag = other.Marketflag;
      }
      if (other.OMSResult.Length != 0) {
        OMSResult = other.OMSResult;
      }
      if (other.Optionflag != 0) {
        Optionflag = other.Optionflag;
      }
      if (other.OrderGateWay != 0) {
        OrderGateWay = other.OrderGateWay;
      }
      if (other.OrderIP.Length != 0) {
        OrderIP = other.OrderIP;
      }
      if (other.OrderNo.Length != 0) {
        OrderNo = other.OrderNo;
      }
      if (other.Ordertype != 0) {
        Ordertype = other.Ordertype;
      }
      if (other.PositionEffect != 0) {
        PositionEffect = other.PositionEffect;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Priceflag != 0) {
        Priceflag = other.Priceflag;
      }
      if (other.QTY != 0) {
        QTY = other.QTY;
      }
      if (other.RequestID.Length != 0) {
        RequestID = other.RequestID;
      }
      if (other.ST.Length != 0) {
        ST = other.ST;
      }
      if (other.SubAccount.Length != 0) {
        SubAccount = other.SubAccount;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Tif != 0) {
        Tif = other.Tif;
      }
      if (other.TracerIDServerMake != 0L) {
        TracerIDServerMake = other.TracerIDServerMake;
      }
      if (other.WebID.Length != 0) {
        WebID = other.WebID;
      }
      if (other.CAKey.Length != 0) {
        CAKey = other.CAKey;
      }
      if (other.Agf != 0) {
        Agf = other.Agf;
      }
      if (other.IbNo.Length != 0) {
        IbNo = other.IbNo;
      }
      if (other.StopConditionflag != 0) {
        StopConditionflag = other.StopConditionflag;
      }
      if (other.StopPrice != 0D) {
        StopPrice = other.StopPrice;
      }
      if (other.GtdExpireday != 0) {
        GtdExpireday = other.GtdExpireday;
      }
      if (other.Ftf != 0) {
        Ftf = other.Ftf;
      }
      if (other.MinQty != 0) {
        MinQty = other.MinQty;
      }
      if (other.TimePeriod != 0) {
        TimePeriod = other.TimePeriod;
      }
      if (other.PriceDen != 0D) {
        PriceDen = other.PriceDen;
      }
      if (other.PriceNum != 0D) {
        PriceNum = other.PriceNum;
      }
      if (other.StopPriceDen != 0D) {
        StopPriceDen = other.StopPriceDen;
      }
      if (other.StopPriceNum != 0D) {
        StopPriceNum = other.StopPriceNum;
      }
      if (other.Tomf != 0) {
        Tomf = other.Tomf;
      }
      if (other.Suf != 0) {
        Suf = other.Suf;
      }
      if (other.B2BID.Length != 0) {
        B2BID = other.B2BID;
      }
      if (other.CheckCodeFromSSO.Length != 0) {
        CheckCodeFromSSO = other.CheckCodeFromSSO;
      }
      if (other.ToTalAccount.Length != 0) {
        ToTalAccount = other.ToTalAccount;
      }
      if (other.APKind.Length != 0) {
        APKind = other.APKind;
      }
      if (other.TraderPASS.Length != 0) {
        TraderPASS = other.TraderPASS;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            BrokerID = input.ReadString();
            break;
          }
          case 24: {
            bs_ = (global::Jsunfutures.Messages.BS) input.ReadEnum();
            break;
          }
          case 34: {
            CAmessage = input.ReadString();
            break;
          }
          case 40: {
            clientFlag_ = (global::Jsunfutures.Messages.ClientFlag) input.ReadEnum();
            break;
          }
          case 50: {
            ClientOrdNo = input.ReadString();
            break;
          }
          case 58: {
            Cnt = input.ReadString();
            break;
          }
          case 64: {
            currencyIN_ = (global::Jsunfutures.Messages.Currency) input.ReadEnum();
            break;
          }
          case 72: {
            currencyOut_ = (global::Jsunfutures.Messages.Currency) input.ReadEnum();
            break;
          }
          case 80: {
            exchange_ = (global::Jsunfutures.Messages.ExchangeFlag) input.ReadEnum();
            break;
          }
          case 90: {
            ID = input.ReadString();
            break;
          }
          case 96: {
            LocalmachineTime = input.ReadInt64();
            break;
          }
          case 104: {
            marketflag_ = (global::Jsunfutures.Messages.MarketFlag) input.ReadEnum();
            break;
          }
          case 114: {
            OMSResult = input.ReadString();
            break;
          }
          case 120: {
            optionflag_ = (global::Jsunfutures.Messages.OptionFlag) input.ReadEnum();
            break;
          }
          case 128: {
            orderGateWay_ = (global::Jsunfutures.Messages.GatewayFlag) input.ReadEnum();
            break;
          }
          case 138: {
            OrderIP = input.ReadString();
            break;
          }
          case 146: {
            OrderNo = input.ReadString();
            break;
          }
          case 152: {
            ordertype_ = (global::Jsunfutures.Messages.OrderType) input.ReadEnum();
            break;
          }
          case 160: {
            positionEffect_ = (global::Jsunfutures.Messages.Position_Effect) input.ReadEnum();
            break;
          }
          case 169: {
            Price = input.ReadDouble();
            break;
          }
          case 176: {
            priceflag_ = (global::Jsunfutures.Messages.PriceFlag) input.ReadEnum();
            break;
          }
          case 184: {
            QTY = input.ReadInt32();
            break;
          }
          case 194: {
            RequestID = input.ReadString();
            break;
          }
          case 202: {
            ST = input.ReadString();
            break;
          }
          case 210: {
            SubAccount = input.ReadString();
            break;
          }
          case 218: {
            Symbol = input.ReadString();
            break;
          }
          case 224: {
            tif_ = (global::Jsunfutures.Messages.TIF) input.ReadEnum();
            break;
          }
          case 232: {
            TracerIDServerMake = input.ReadInt64();
            break;
          }
          case 242: {
            WebID = input.ReadString();
            break;
          }
          case 250: {
            CAKey = input.ReadString();
            break;
          }
          case 256: {
            agf_ = (global::Jsunfutures.Messages.AccountGroupCodeFlag) input.ReadEnum();
            break;
          }
          case 266: {
            IbNo = input.ReadString();
            break;
          }
          case 272: {
            stopConditionflag_ = (global::Jsunfutures.Messages.StopConditionFlag) input.ReadEnum();
            break;
          }
          case 281: {
            StopPrice = input.ReadDouble();
            break;
          }
          case 288: {
            GtdExpireday = input.ReadInt32();
            break;
          }
          case 296: {
            ftf_ = (global::Jsunfutures.Messages.FillTypeFlag) input.ReadEnum();
            break;
          }
          case 304: {
            MinQty = input.ReadInt32();
            break;
          }
          case 312: {
            timePeriod_ = (global::Jsunfutures.Messages.TimePeriod) input.ReadEnum();
            break;
          }
          case 321: {
            PriceDen = input.ReadDouble();
            break;
          }
          case 329: {
            PriceNum = input.ReadDouble();
            break;
          }
          case 337: {
            StopPriceDen = input.ReadDouble();
            break;
          }
          case 345: {
            StopPriceNum = input.ReadDouble();
            break;
          }
          case 352: {
            tomf_ = (global::Jsunfutures.Messages.TandemOrderMarketFlag) input.ReadEnum();
            break;
          }
          case 360: {
            suf_ = (global::Jsunfutures.Messages.SpecialUserFlag) input.ReadEnum();
            break;
          }
          case 370: {
            B2BID = input.ReadString();
            break;
          }
          case 378: {
            CheckCodeFromSSO = input.ReadString();
            break;
          }
          case 386: {
            ToTalAccount = input.ReadString();
            break;
          }
          case 394: {
            APKind = input.ReadString();
            break;
          }
          case 402: {
            TraderPASS = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Reports : pb::IMessage<Reports> {
    private static readonly pb::MessageParser<Reports> _parser = new pb::MessageParser<Reports>(() => new Reports());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reports> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reports() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reports(Reports other) : this() {
      reports_ = other.reports_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reports Clone() {
      return new Reports(this);
    }

    /// <summary>Field number for the "reports" field.</summary>
    public const int Reports_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.Report> _repeated_reports_codec
        = pb::FieldCodec.ForMessage(10, global::Jsunfutures.Messages.Report.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.Report> reports_ = new pbc::RepeatedField<global::Jsunfutures.Messages.Report>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.Report> Reports_ {
      get { return reports_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reports);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reports other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reports_.Equals(other.reports_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reports_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      reports_.WriteTo(output, _repeated_reports_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reports_.CalculateSize(_repeated_reports_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reports other) {
      if (other == null) {
        return;
      }
      reports_.Add(other.reports_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            reports_.AddEntriesFrom(input, _repeated_reports_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Report : pb::IMessage<Report> {
    private static readonly pb::MessageParser<Report> _parser = new pb::MessageParser<Report>(() => new Report());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Report> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report(Report other) : this() {
      account_ = other.account_;
      afterQty_ = other.afterQty_;
      beforeQty_ = other.beforeQty_;
      brokerID_ = other.brokerID_;
      bs_ = other.bs_;
      clientFlag_ = other.clientFlag_;
      clientOrdNo_ = other.clientOrdNo_;
      cnt_ = other.cnt_;
      currencyIN_ = other.currencyIN_;
      currencyOut_ = other.currencyOut_;
      errMsg_ = other.errMsg_;
      errorCode_ = other.errorCode_;
      exchange_ = other.exchange_;
      exchangeRate_ = other.exchangeRate_;
      exchangeServerReveiveTime_ = other.exchangeServerReveiveTime_;
      exchangeServerReveiveTimeUTC_ = other.exchangeServerReveiveTimeUTC_;
      marketflag_ = other.marketflag_;
      matchQty_ = other.matchQty_;
      orderfunc_ = other.orderfunc_;
      orderGateWay_ = other.orderGateWay_;
      orderIP_ = other.orderIP_;
      orderNo_ = other.orderNo_;
      positionEffect_ = other.positionEffect_;
      price_ = other.price_;
      priceflag_ = other.priceflag_;
      qTY_ = other.qTY_;
      reportSequence_ = other.reportSequence_;
      requestID_ = other.requestID_;
      subAccount_ = other.subAccount_;
      sT_ = other.sT_;
      symbol_ = other.symbol_;
      tif_ = other.tif_;
      tracerID_ = other.tracerID_;
      tradeServerReceiveTime_ = other.tradeServerReceiveTime_;
      tradeServerReceiveTimeUTC_ = other.tradeServerReceiveTimeUTC_;
      trader_ = other.trader_;
      webID_ = other.webID_;
      ibNo_ = other.ibNo_;
      clientMachineTime_ = other.clientMachineTime_;
      timePeriod_ = other.timePeriod_;
      stopPrice_ = other.stopPrice_;
      ftf_ = other.ftf_;
      gtdExpireday_ = other.gtdExpireday_;
      miniQty_ = other.miniQty_;
      scf_ = other.scf_;
      priceDen_ = other.priceDen_;
      priceNum_ = other.priceNum_;
      stopPriceDen_ = other.stopPriceDen_;
      stopPriceNum_ = other.stopPriceNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report Clone() {
      return new Report(this);
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///客戶帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AfterQty" field.</summary>
    public const int AfterQtyFieldNumber = 2;
    private int afterQty_;
    /// <summary>
    ///剩餘口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AfterQty {
      get { return afterQty_; }
      set {
        afterQty_ = value;
      }
    }

    /// <summary>Field number for the "BeforeQty" field.</summary>
    public const int BeforeQtyFieldNumber = 3;
    private int beforeQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeforeQty {
      get { return beforeQty_; }
      set {
        beforeQty_ = value;
      }
    }

    /// <summary>Field number for the "BrokerID" field.</summary>
    public const int BrokerIDFieldNumber = 4;
    private string brokerID_ = "";
    /// <summary>
    ///券商代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerID {
      get { return brokerID_; }
      set {
        brokerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Bs" field.</summary>
    public const int BsFieldNumber = 5;
    private global::Jsunfutures.Messages.BS bs_ = 0;
    /// <summary>
    ///買賣別,複式成交單:合併買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.BS Bs {
      get { return bs_; }
      set {
        bs_ = value;
      }
    }

    /// <summary>Field number for the "ClientFlag" field.</summary>
    public const int ClientFlagFieldNumber = 6;
    private global::Jsunfutures.Messages.ClientFlag clientFlag_ = 0;
    /// <summary>
    ///委託來源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ClientFlag ClientFlag {
      get { return clientFlag_; }
      set {
        clientFlag_ = value;
      }
    }

    /// <summary>Field number for the "ClientOrdNo" field.</summary>
    public const int ClientOrdNoFieldNumber = 7;
    private string clientOrdNo_ = "";
    /// <summary>
    ///客戶委託序號(使用客戶委託序號對照原委託)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientOrdNo {
      get { return clientOrdNo_; }
      set {
        clientOrdNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Cnt" field.</summary>
    public const int CntFieldNumber = 8;
    private string cnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cnt {
      get { return cnt_; }
      set {
        cnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrencyIN" field.</summary>
    public const int CurrencyINFieldNumber = 9;
    private global::Jsunfutures.Messages.Currency currencyIN_ = 0;
    /// <summary>
    ///委託幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Currency CurrencyIN {
      get { return currencyIN_; }
      set {
        currencyIN_ = value;
      }
    }

    /// <summary>Field number for the "CurrencyOut" field.</summary>
    public const int CurrencyOutFieldNumber = 10;
    private global::Jsunfutures.Messages.Currency currencyOut_ = 0;
    /// <summary>
    ///轉換幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Currency CurrencyOut {
      get { return currencyOut_; }
      set {
        currencyOut_ = value;
      }
    }

    /// <summary>Field number for the "ErrMsg" field.</summary>
    public const int ErrMsgFieldNumber = 11;
    private string errMsg_ = "";
    /// <summary>
    ///錯誤訊息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 12;
    private string errorCode_ = "";
    /// <summary>
    ///錯誤訊息代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 13;
    private global::Jsunfutures.Messages.ExchangeFlag exchange_ = 0;
    /// <summary>
    ///交易所
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ExchangeFlag Exchange {
      get { return exchange_; }
      set {
        exchange_ = value;
      }
    }

    /// <summary>Field number for the "ExchangeRate" field.</summary>
    public const int ExchangeRateFieldNumber = 14;
    private double exchangeRate_;
    /// <summary>
    ///匯率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExchangeRate {
      get { return exchangeRate_; }
      set {
        exchangeRate_ = value;
      }
    }

    /// <summary>Field number for the "ExchangeServerReveiveTime" field.</summary>
    public const int ExchangeServerReveiveTimeFieldNumber = 15;
    private long exchangeServerReveiveTime_;
    /// <summary>
    ///交易所接收時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExchangeServerReveiveTime {
      get { return exchangeServerReveiveTime_; }
      set {
        exchangeServerReveiveTime_ = value;
      }
    }

    /// <summary>Field number for the "ExchangeServerReveiveTime_UTC" field.</summary>
    public const int ExchangeServerReveiveTimeUTCFieldNumber = 16;
    private long exchangeServerReveiveTimeUTC_;
    /// <summary>
    ///交易所接收UTC時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExchangeServerReveiveTimeUTC {
      get { return exchangeServerReveiveTimeUTC_; }
      set {
        exchangeServerReveiveTimeUTC_ = value;
      }
    }

    /// <summary>Field number for the "Marketflag" field.</summary>
    public const int MarketflagFieldNumber = 17;
    private global::Jsunfutures.Messages.MarketFlag marketflag_ = 0;
    /// <summary>
    ///1_期貨,2_選擇權,3_複式選擇權,4_期貨價差交易
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.MarketFlag Marketflag {
      get { return marketflag_; }
      set {
        marketflag_ = value;
      }
    }

    /// <summary>Field number for the "MatchQty" field.</summary>
    public const int MatchQtyFieldNumber = 18;
    private int matchQty_;
    /// <summary>
    ///成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchQty {
      get { return matchQty_; }
      set {
        matchQty_ = value;
      }
    }

    /// <summary>Field number for the "Orderfunc" field.</summary>
    public const int OrderfuncFieldNumber = 19;
    private global::Jsunfutures.Messages.OrderType orderfunc_ = 0;
    /// <summary>
    ///委託類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.OrderType Orderfunc {
      get { return orderfunc_; }
      set {
        orderfunc_ = value;
      }
    }

    /// <summary>Field number for the "OrderGateWay" field.</summary>
    public const int OrderGateWayFieldNumber = 20;
    private global::Jsunfutures.Messages.GatewayFlag orderGateWay_ = 0;
    /// <summary>
    ///使用交易閘道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.GatewayFlag OrderGateWay {
      get { return orderGateWay_; }
      set {
        orderGateWay_ = value;
      }
    }

    /// <summary>Field number for the "OrderIP" field.</summary>
    public const int OrderIPFieldNumber = 21;
    private string orderIP_ = "";
    /// <summary>
    ///委託IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderIP {
      get { return orderIP_; }
      set {
        orderIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderNo" field.</summary>
    public const int OrderNoFieldNumber = 22;
    private string orderNo_ = "";
    /// <summary>
    ///委託書號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderNo {
      get { return orderNo_; }
      set {
        orderNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Position_effect" field.</summary>
    public const int PositionEffectFieldNumber = 23;
    private global::Jsunfutures.Messages.Position_Effect positionEffect_ = 0;
    /// <summary>
    ///1_新增,2_沖銷,3_當沖,4_自動
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Position_Effect PositionEffect {
      get { return positionEffect_; }
      set {
        positionEffect_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 24;
    private double price_;
    /// <summary>
    ///委託價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Priceflag" field.</summary>
    public const int PriceflagFieldNumber = 25;
    private global::Jsunfutures.Messages.PriceFlag priceflag_ = 0;
    /// <summary>
    ///1:限價, 2:市價, 3:市價停損, 4:限價停損, 5:範圍市價,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.PriceFlag Priceflag {
      get { return priceflag_; }
      set {
        priceflag_ = value;
      }
    }

    /// <summary>Field number for the "QTY" field.</summary>
    public const int QTYFieldNumber = 26;
    private int qTY_;
    /// <summary>
    ///委託口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QTY {
      get { return qTY_; }
      set {
        qTY_ = value;
      }
    }

    /// <summary>Field number for the "ReportSequence" field.</summary>
    public const int ReportSequenceFieldNumber = 27;
    private long reportSequence_;
    /// <summary>
    ///回報序號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportSequence {
      get { return reportSequence_; }
      set {
        reportSequence_ = value;
      }
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 28;
    private string requestID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestID {
      get { return requestID_; }
      set {
        requestID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubAccount" field.</summary>
    public const int SubAccountFieldNumber = 29;
    private string subAccount_ = "";
    /// <summary>
    ///子帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubAccount {
      get { return subAccount_; }
      set {
        subAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ST" field.</summary>
    public const int STFieldNumber = 30;
    private string sT_ = "";
    /// <summary>
    ///策略名稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ST {
      get { return sT_; }
      set {
        sT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 31;
    private string symbol_ = "";
    /// <summary>
    ///商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Tif" field.</summary>
    public const int TifFieldNumber = 32;
    private global::Jsunfutures.Messages.TIF tif_ = 0;
    /// <summary>
    ///委託條件:1_ROD,2_FOK,3_IOC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TIF Tif {
      get { return tif_; }
      set {
        tif_ = value;
      }
    }

    /// <summary>Field number for the "TracerID" field.</summary>
    public const int TracerIDFieldNumber = 33;
    private string tracerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TracerID {
      get { return tracerID_; }
      set {
        tracerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TradeServerReceiveTime" field.</summary>
    public const int TradeServerReceiveTimeFieldNumber = 34;
    private long tradeServerReceiveTime_;
    /// <summary>
    ///委託時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TradeServerReceiveTime {
      get { return tradeServerReceiveTime_; }
      set {
        tradeServerReceiveTime_ = value;
      }
    }

    /// <summary>Field number for the "TradeServerReceiveTime_UTC" field.</summary>
    public const int TradeServerReceiveTimeUTCFieldNumber = 35;
    private long tradeServerReceiveTimeUTC_;
    /// <summary>
    ///委託UTC時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TradeServerReceiveTimeUTC {
      get { return tradeServerReceiveTimeUTC_; }
      set {
        tradeServerReceiveTimeUTC_ = value;
      }
    }

    /// <summary>Field number for the "Trader" field.</summary>
    public const int TraderFieldNumber = 36;
    private string trader_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Trader {
      get { return trader_; }
      set {
        trader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WebID" field.</summary>
    public const int WebIDFieldNumber = 37;
    private string webID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WebID {
      get { return webID_; }
      set {
        webID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IbNo" field.</summary>
    public const int IbNoFieldNumber = 38;
    private string ibNo_ = "";
    /// <summary>
    ///IB 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IbNo {
      get { return ibNo_; }
      set {
        ibNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientMachineTime" field.</summary>
    public const int ClientMachineTimeFieldNumber = 39;
    private long clientMachineTime_;
    /// <summary>
    ///本機接收時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientMachineTime {
      get { return clientMachineTime_; }
      set {
        clientMachineTime_ = value;
      }
    }

    /// <summary>Field number for the "TimePeriod" field.</summary>
    public const int TimePeriodFieldNumber = 40;
    private global::Jsunfutures.Messages.TimePeriod timePeriod_ = 0;
    /// <summary>
    ///日盤或夜盤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TimePeriod TimePeriod {
      get { return timePeriod_; }
      set {
        timePeriod_ = value;
      }
    }

    /// <summary>Field number for the "StopPrice" field.</summary>
    public const int StopPriceFieldNumber = 41;
    private double stopPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopPrice {
      get { return stopPrice_; }
      set {
        stopPrice_ = value;
      }
    }

    /// <summary>Field number for the "ftf" field.</summary>
    public const int FtfFieldNumber = 42;
    private global::Jsunfutures.Messages.FillTypeFlag ftf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.FillTypeFlag Ftf {
      get { return ftf_; }
      set {
        ftf_ = value;
      }
    }

    /// <summary>Field number for the "GtdExpireday" field.</summary>
    public const int GtdExpiredayFieldNumber = 43;
    private int gtdExpireday_;
    /// <summary>
    ///GTD委託單之過期日  yyyyMMdd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GtdExpireday {
      get { return gtdExpireday_; }
      set {
        gtdExpireday_ = value;
      }
    }

    /// <summary>Field number for the "MiniQty" field.</summary>
    public const int MiniQtyFieldNumber = 44;
    private int miniQty_;
    /// <summary>
    ///ICE gateway 當FILL_TYPE=Min 時，此欄衛生效，表示如果該次搓合無法達到最少成交數量時，則不成交
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MiniQty {
      get { return miniQty_; }
      set {
        miniQty_ = value;
      }
    }

    /// <summary>Field number for the "scf" field.</summary>
    public const int ScfFieldNumber = 45;
    private global::Jsunfutures.Messages.StopConditionFlag scf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.StopConditionFlag Scf {
      get { return scf_; }
      set {
        scf_ = value;
      }
    }

    /// <summary>Field number for the "PriceDen" field.</summary>
    public const int PriceDenFieldNumber = 46;
    private double priceDen_;
    /// <summary>
    ///委託價分母
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceDen {
      get { return priceDen_; }
      set {
        priceDen_ = value;
      }
    }

    /// <summary>Field number for the "PriceNum" field.</summary>
    public const int PriceNumFieldNumber = 47;
    private double priceNum_;
    /// <summary>
    ///委託價分子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceNum {
      get { return priceNum_; }
      set {
        priceNum_ = value;
      }
    }

    /// <summary>Field number for the "StopPriceDen" field.</summary>
    public const int StopPriceDenFieldNumber = 48;
    private double stopPriceDen_;
    /// <summary>
    ///停損價分母
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopPriceDen {
      get { return stopPriceDen_; }
      set {
        stopPriceDen_ = value;
      }
    }

    /// <summary>Field number for the "StopPriceNum" field.</summary>
    public const int StopPriceNumFieldNumber = 49;
    private double stopPriceNum_;
    /// <summary>
    ///停損價分子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopPriceNum {
      get { return stopPriceNum_; }
      set {
        stopPriceNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Report);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Report other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (AfterQty != other.AfterQty) return false;
      if (BeforeQty != other.BeforeQty) return false;
      if (BrokerID != other.BrokerID) return false;
      if (Bs != other.Bs) return false;
      if (ClientFlag != other.ClientFlag) return false;
      if (ClientOrdNo != other.ClientOrdNo) return false;
      if (Cnt != other.Cnt) return false;
      if (CurrencyIN != other.CurrencyIN) return false;
      if (CurrencyOut != other.CurrencyOut) return false;
      if (ErrMsg != other.ErrMsg) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (Exchange != other.Exchange) return false;
      if (ExchangeRate != other.ExchangeRate) return false;
      if (ExchangeServerReveiveTime != other.ExchangeServerReveiveTime) return false;
      if (ExchangeServerReveiveTimeUTC != other.ExchangeServerReveiveTimeUTC) return false;
      if (Marketflag != other.Marketflag) return false;
      if (MatchQty != other.MatchQty) return false;
      if (Orderfunc != other.Orderfunc) return false;
      if (OrderGateWay != other.OrderGateWay) return false;
      if (OrderIP != other.OrderIP) return false;
      if (OrderNo != other.OrderNo) return false;
      if (PositionEffect != other.PositionEffect) return false;
      if (Price != other.Price) return false;
      if (Priceflag != other.Priceflag) return false;
      if (QTY != other.QTY) return false;
      if (ReportSequence != other.ReportSequence) return false;
      if (RequestID != other.RequestID) return false;
      if (SubAccount != other.SubAccount) return false;
      if (ST != other.ST) return false;
      if (Symbol != other.Symbol) return false;
      if (Tif != other.Tif) return false;
      if (TracerID != other.TracerID) return false;
      if (TradeServerReceiveTime != other.TradeServerReceiveTime) return false;
      if (TradeServerReceiveTimeUTC != other.TradeServerReceiveTimeUTC) return false;
      if (Trader != other.Trader) return false;
      if (WebID != other.WebID) return false;
      if (IbNo != other.IbNo) return false;
      if (ClientMachineTime != other.ClientMachineTime) return false;
      if (TimePeriod != other.TimePeriod) return false;
      if (StopPrice != other.StopPrice) return false;
      if (Ftf != other.Ftf) return false;
      if (GtdExpireday != other.GtdExpireday) return false;
      if (MiniQty != other.MiniQty) return false;
      if (Scf != other.Scf) return false;
      if (PriceDen != other.PriceDen) return false;
      if (PriceNum != other.PriceNum) return false;
      if (StopPriceDen != other.StopPriceDen) return false;
      if (StopPriceNum != other.StopPriceNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (AfterQty != 0) hash ^= AfterQty.GetHashCode();
      if (BeforeQty != 0) hash ^= BeforeQty.GetHashCode();
      if (BrokerID.Length != 0) hash ^= BrokerID.GetHashCode();
      if (Bs != 0) hash ^= Bs.GetHashCode();
      if (ClientFlag != 0) hash ^= ClientFlag.GetHashCode();
      if (ClientOrdNo.Length != 0) hash ^= ClientOrdNo.GetHashCode();
      if (Cnt.Length != 0) hash ^= Cnt.GetHashCode();
      if (CurrencyIN != 0) hash ^= CurrencyIN.GetHashCode();
      if (CurrencyOut != 0) hash ^= CurrencyOut.GetHashCode();
      if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
      if (ErrorCode.Length != 0) hash ^= ErrorCode.GetHashCode();
      if (Exchange != 0) hash ^= Exchange.GetHashCode();
      if (ExchangeRate != 0D) hash ^= ExchangeRate.GetHashCode();
      if (ExchangeServerReveiveTime != 0L) hash ^= ExchangeServerReveiveTime.GetHashCode();
      if (ExchangeServerReveiveTimeUTC != 0L) hash ^= ExchangeServerReveiveTimeUTC.GetHashCode();
      if (Marketflag != 0) hash ^= Marketflag.GetHashCode();
      if (MatchQty != 0) hash ^= MatchQty.GetHashCode();
      if (Orderfunc != 0) hash ^= Orderfunc.GetHashCode();
      if (OrderGateWay != 0) hash ^= OrderGateWay.GetHashCode();
      if (OrderIP.Length != 0) hash ^= OrderIP.GetHashCode();
      if (OrderNo.Length != 0) hash ^= OrderNo.GetHashCode();
      if (PositionEffect != 0) hash ^= PositionEffect.GetHashCode();
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (Priceflag != 0) hash ^= Priceflag.GetHashCode();
      if (QTY != 0) hash ^= QTY.GetHashCode();
      if (ReportSequence != 0L) hash ^= ReportSequence.GetHashCode();
      if (RequestID.Length != 0) hash ^= RequestID.GetHashCode();
      if (SubAccount.Length != 0) hash ^= SubAccount.GetHashCode();
      if (ST.Length != 0) hash ^= ST.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Tif != 0) hash ^= Tif.GetHashCode();
      if (TracerID.Length != 0) hash ^= TracerID.GetHashCode();
      if (TradeServerReceiveTime != 0L) hash ^= TradeServerReceiveTime.GetHashCode();
      if (TradeServerReceiveTimeUTC != 0L) hash ^= TradeServerReceiveTimeUTC.GetHashCode();
      if (Trader.Length != 0) hash ^= Trader.GetHashCode();
      if (WebID.Length != 0) hash ^= WebID.GetHashCode();
      if (IbNo.Length != 0) hash ^= IbNo.GetHashCode();
      if (ClientMachineTime != 0L) hash ^= ClientMachineTime.GetHashCode();
      if (TimePeriod != 0) hash ^= TimePeriod.GetHashCode();
      if (StopPrice != 0D) hash ^= StopPrice.GetHashCode();
      if (Ftf != 0) hash ^= Ftf.GetHashCode();
      if (GtdExpireday != 0) hash ^= GtdExpireday.GetHashCode();
      if (MiniQty != 0) hash ^= MiniQty.GetHashCode();
      if (Scf != 0) hash ^= Scf.GetHashCode();
      if (PriceDen != 0D) hash ^= PriceDen.GetHashCode();
      if (PriceNum != 0D) hash ^= PriceNum.GetHashCode();
      if (StopPriceDen != 0D) hash ^= StopPriceDen.GetHashCode();
      if (StopPriceNum != 0D) hash ^= StopPriceNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (AfterQty != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AfterQty);
      }
      if (BeforeQty != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BeforeQty);
      }
      if (BrokerID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BrokerID);
      }
      if (Bs != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Bs);
      }
      if (ClientFlag != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ClientFlag);
      }
      if (ClientOrdNo.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ClientOrdNo);
      }
      if (Cnt.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cnt);
      }
      if (CurrencyIN != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CurrencyIN);
      }
      if (CurrencyOut != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) CurrencyOut);
      }
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ErrMsg);
      }
      if (ErrorCode.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ErrorCode);
      }
      if (Exchange != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Exchange);
      }
      if (ExchangeRate != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(ExchangeRate);
      }
      if (ExchangeServerReveiveTime != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(ExchangeServerReveiveTime);
      }
      if (ExchangeServerReveiveTimeUTC != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(ExchangeServerReveiveTimeUTC);
      }
      if (Marketflag != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Marketflag);
      }
      if (MatchQty != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MatchQty);
      }
      if (Orderfunc != 0) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) Orderfunc);
      }
      if (OrderGateWay != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) OrderGateWay);
      }
      if (OrderIP.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(OrderIP);
      }
      if (OrderNo.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(OrderNo);
      }
      if (PositionEffect != 0) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) PositionEffect);
      }
      if (Price != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(Price);
      }
      if (Priceflag != 0) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) Priceflag);
      }
      if (QTY != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(QTY);
      }
      if (ReportSequence != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(ReportSequence);
      }
      if (RequestID.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(RequestID);
      }
      if (SubAccount.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(SubAccount);
      }
      if (ST.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(ST);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Symbol);
      }
      if (Tif != 0) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) Tif);
      }
      if (TracerID.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(TracerID);
      }
      if (TradeServerReceiveTime != 0L) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(TradeServerReceiveTime);
      }
      if (TradeServerReceiveTimeUTC != 0L) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(TradeServerReceiveTimeUTC);
      }
      if (Trader.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(Trader);
      }
      if (WebID.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(WebID);
      }
      if (IbNo.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(IbNo);
      }
      if (ClientMachineTime != 0L) {
        output.WriteRawTag(184, 2);
        output.WriteInt64(ClientMachineTime);
      }
      if (TimePeriod != 0) {
        output.WriteRawTag(192, 2);
        output.WriteEnum((int) TimePeriod);
      }
      if (StopPrice != 0D) {
        output.WriteRawTag(201, 2);
        output.WriteDouble(StopPrice);
      }
      if (Ftf != 0) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) Ftf);
      }
      if (GtdExpireday != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(GtdExpireday);
      }
      if (MiniQty != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(MiniQty);
      }
      if (Scf != 0) {
        output.WriteRawTag(232, 2);
        output.WriteEnum((int) Scf);
      }
      if (PriceDen != 0D) {
        output.WriteRawTag(241, 2);
        output.WriteDouble(PriceDen);
      }
      if (PriceNum != 0D) {
        output.WriteRawTag(249, 2);
        output.WriteDouble(PriceNum);
      }
      if (StopPriceDen != 0D) {
        output.WriteRawTag(129, 3);
        output.WriteDouble(StopPriceDen);
      }
      if (StopPriceNum != 0D) {
        output.WriteRawTag(137, 3);
        output.WriteDouble(StopPriceNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (AfterQty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AfterQty);
      }
      if (BeforeQty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeforeQty);
      }
      if (BrokerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerID);
      }
      if (Bs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Bs);
      }
      if (ClientFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClientFlag);
      }
      if (ClientOrdNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientOrdNo);
      }
      if (Cnt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cnt);
      }
      if (CurrencyIN != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrencyIN);
      }
      if (CurrencyOut != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrencyOut);
      }
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (ErrorCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
      }
      if (Exchange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Exchange);
      }
      if (ExchangeRate != 0D) {
        size += 1 + 8;
      }
      if (ExchangeServerReveiveTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExchangeServerReveiveTime);
      }
      if (ExchangeServerReveiveTimeUTC != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExchangeServerReveiveTimeUTC);
      }
      if (Marketflag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Marketflag);
      }
      if (MatchQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MatchQty);
      }
      if (Orderfunc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Orderfunc);
      }
      if (OrderGateWay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderGateWay);
      }
      if (OrderIP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderIP);
      }
      if (OrderNo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderNo);
      }
      if (PositionEffect != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionEffect);
      }
      if (Price != 0D) {
        size += 2 + 8;
      }
      if (Priceflag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Priceflag);
      }
      if (QTY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(QTY);
      }
      if (ReportSequence != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ReportSequence);
      }
      if (RequestID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RequestID);
      }
      if (SubAccount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SubAccount);
      }
      if (ST.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ST);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Tif != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Tif);
      }
      if (TracerID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TracerID);
      }
      if (TradeServerReceiveTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TradeServerReceiveTime);
      }
      if (TradeServerReceiveTimeUTC != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TradeServerReceiveTimeUTC);
      }
      if (Trader.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Trader);
      }
      if (WebID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WebID);
      }
      if (IbNo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IbNo);
      }
      if (ClientMachineTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ClientMachineTime);
      }
      if (TimePeriod != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TimePeriod);
      }
      if (StopPrice != 0D) {
        size += 2 + 8;
      }
      if (Ftf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Ftf);
      }
      if (GtdExpireday != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GtdExpireday);
      }
      if (MiniQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MiniQty);
      }
      if (Scf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Scf);
      }
      if (PriceDen != 0D) {
        size += 2 + 8;
      }
      if (PriceNum != 0D) {
        size += 2 + 8;
      }
      if (StopPriceDen != 0D) {
        size += 2 + 8;
      }
      if (StopPriceNum != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Report other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.AfterQty != 0) {
        AfterQty = other.AfterQty;
      }
      if (other.BeforeQty != 0) {
        BeforeQty = other.BeforeQty;
      }
      if (other.BrokerID.Length != 0) {
        BrokerID = other.BrokerID;
      }
      if (other.Bs != 0) {
        Bs = other.Bs;
      }
      if (other.ClientFlag != 0) {
        ClientFlag = other.ClientFlag;
      }
      if (other.ClientOrdNo.Length != 0) {
        ClientOrdNo = other.ClientOrdNo;
      }
      if (other.Cnt.Length != 0) {
        Cnt = other.Cnt;
      }
      if (other.CurrencyIN != 0) {
        CurrencyIN = other.CurrencyIN;
      }
      if (other.CurrencyOut != 0) {
        CurrencyOut = other.CurrencyOut;
      }
      if (other.ErrMsg.Length != 0) {
        ErrMsg = other.ErrMsg;
      }
      if (other.ErrorCode.Length != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.Exchange != 0) {
        Exchange = other.Exchange;
      }
      if (other.ExchangeRate != 0D) {
        ExchangeRate = other.ExchangeRate;
      }
      if (other.ExchangeServerReveiveTime != 0L) {
        ExchangeServerReveiveTime = other.ExchangeServerReveiveTime;
      }
      if (other.ExchangeServerReveiveTimeUTC != 0L) {
        ExchangeServerReveiveTimeUTC = other.ExchangeServerReveiveTimeUTC;
      }
      if (other.Marketflag != 0) {
        Marketflag = other.Marketflag;
      }
      if (other.MatchQty != 0) {
        MatchQty = other.MatchQty;
      }
      if (other.Orderfunc != 0) {
        Orderfunc = other.Orderfunc;
      }
      if (other.OrderGateWay != 0) {
        OrderGateWay = other.OrderGateWay;
      }
      if (other.OrderIP.Length != 0) {
        OrderIP = other.OrderIP;
      }
      if (other.OrderNo.Length != 0) {
        OrderNo = other.OrderNo;
      }
      if (other.PositionEffect != 0) {
        PositionEffect = other.PositionEffect;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Priceflag != 0) {
        Priceflag = other.Priceflag;
      }
      if (other.QTY != 0) {
        QTY = other.QTY;
      }
      if (other.ReportSequence != 0L) {
        ReportSequence = other.ReportSequence;
      }
      if (other.RequestID.Length != 0) {
        RequestID = other.RequestID;
      }
      if (other.SubAccount.Length != 0) {
        SubAccount = other.SubAccount;
      }
      if (other.ST.Length != 0) {
        ST = other.ST;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Tif != 0) {
        Tif = other.Tif;
      }
      if (other.TracerID.Length != 0) {
        TracerID = other.TracerID;
      }
      if (other.TradeServerReceiveTime != 0L) {
        TradeServerReceiveTime = other.TradeServerReceiveTime;
      }
      if (other.TradeServerReceiveTimeUTC != 0L) {
        TradeServerReceiveTimeUTC = other.TradeServerReceiveTimeUTC;
      }
      if (other.Trader.Length != 0) {
        Trader = other.Trader;
      }
      if (other.WebID.Length != 0) {
        WebID = other.WebID;
      }
      if (other.IbNo.Length != 0) {
        IbNo = other.IbNo;
      }
      if (other.ClientMachineTime != 0L) {
        ClientMachineTime = other.ClientMachineTime;
      }
      if (other.TimePeriod != 0) {
        TimePeriod = other.TimePeriod;
      }
      if (other.StopPrice != 0D) {
        StopPrice = other.StopPrice;
      }
      if (other.Ftf != 0) {
        Ftf = other.Ftf;
      }
      if (other.GtdExpireday != 0) {
        GtdExpireday = other.GtdExpireday;
      }
      if (other.MiniQty != 0) {
        MiniQty = other.MiniQty;
      }
      if (other.Scf != 0) {
        Scf = other.Scf;
      }
      if (other.PriceDen != 0D) {
        PriceDen = other.PriceDen;
      }
      if (other.PriceNum != 0D) {
        PriceNum = other.PriceNum;
      }
      if (other.StopPriceDen != 0D) {
        StopPriceDen = other.StopPriceDen;
      }
      if (other.StopPriceNum != 0D) {
        StopPriceNum = other.StopPriceNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 16: {
            AfterQty = input.ReadInt32();
            break;
          }
          case 24: {
            BeforeQty = input.ReadInt32();
            break;
          }
          case 34: {
            BrokerID = input.ReadString();
            break;
          }
          case 40: {
            bs_ = (global::Jsunfutures.Messages.BS) input.ReadEnum();
            break;
          }
          case 48: {
            clientFlag_ = (global::Jsunfutures.Messages.ClientFlag) input.ReadEnum();
            break;
          }
          case 58: {
            ClientOrdNo = input.ReadString();
            break;
          }
          case 66: {
            Cnt = input.ReadString();
            break;
          }
          case 72: {
            currencyIN_ = (global::Jsunfutures.Messages.Currency) input.ReadEnum();
            break;
          }
          case 80: {
            currencyOut_ = (global::Jsunfutures.Messages.Currency) input.ReadEnum();
            break;
          }
          case 90: {
            ErrMsg = input.ReadString();
            break;
          }
          case 98: {
            ErrorCode = input.ReadString();
            break;
          }
          case 104: {
            exchange_ = (global::Jsunfutures.Messages.ExchangeFlag) input.ReadEnum();
            break;
          }
          case 113: {
            ExchangeRate = input.ReadDouble();
            break;
          }
          case 120: {
            ExchangeServerReveiveTime = input.ReadInt64();
            break;
          }
          case 128: {
            ExchangeServerReveiveTimeUTC = input.ReadInt64();
            break;
          }
          case 136: {
            marketflag_ = (global::Jsunfutures.Messages.MarketFlag) input.ReadEnum();
            break;
          }
          case 144: {
            MatchQty = input.ReadInt32();
            break;
          }
          case 152: {
            orderfunc_ = (global::Jsunfutures.Messages.OrderType) input.ReadEnum();
            break;
          }
          case 160: {
            orderGateWay_ = (global::Jsunfutures.Messages.GatewayFlag) input.ReadEnum();
            break;
          }
          case 170: {
            OrderIP = input.ReadString();
            break;
          }
          case 178: {
            OrderNo = input.ReadString();
            break;
          }
          case 184: {
            positionEffect_ = (global::Jsunfutures.Messages.Position_Effect) input.ReadEnum();
            break;
          }
          case 193: {
            Price = input.ReadDouble();
            break;
          }
          case 200: {
            priceflag_ = (global::Jsunfutures.Messages.PriceFlag) input.ReadEnum();
            break;
          }
          case 208: {
            QTY = input.ReadInt32();
            break;
          }
          case 216: {
            ReportSequence = input.ReadInt64();
            break;
          }
          case 226: {
            RequestID = input.ReadString();
            break;
          }
          case 234: {
            SubAccount = input.ReadString();
            break;
          }
          case 242: {
            ST = input.ReadString();
            break;
          }
          case 250: {
            Symbol = input.ReadString();
            break;
          }
          case 256: {
            tif_ = (global::Jsunfutures.Messages.TIF) input.ReadEnum();
            break;
          }
          case 266: {
            TracerID = input.ReadString();
            break;
          }
          case 272: {
            TradeServerReceiveTime = input.ReadInt64();
            break;
          }
          case 280: {
            TradeServerReceiveTimeUTC = input.ReadInt64();
            break;
          }
          case 290: {
            Trader = input.ReadString();
            break;
          }
          case 298: {
            WebID = input.ReadString();
            break;
          }
          case 306: {
            IbNo = input.ReadString();
            break;
          }
          case 312: {
            ClientMachineTime = input.ReadInt64();
            break;
          }
          case 320: {
            timePeriod_ = (global::Jsunfutures.Messages.TimePeriod) input.ReadEnum();
            break;
          }
          case 329: {
            StopPrice = input.ReadDouble();
            break;
          }
          case 336: {
            ftf_ = (global::Jsunfutures.Messages.FillTypeFlag) input.ReadEnum();
            break;
          }
          case 344: {
            GtdExpireday = input.ReadInt32();
            break;
          }
          case 352: {
            MiniQty = input.ReadInt32();
            break;
          }
          case 360: {
            scf_ = (global::Jsunfutures.Messages.StopConditionFlag) input.ReadEnum();
            break;
          }
          case 369: {
            PriceDen = input.ReadDouble();
            break;
          }
          case 377: {
            PriceNum = input.ReadDouble();
            break;
          }
          case 385: {
            StopPriceDen = input.ReadDouble();
            break;
          }
          case 393: {
            StopPriceNum = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Trades : pb::IMessage<Trades> {
    private static readonly pb::MessageParser<Trades> _parser = new pb::MessageParser<Trades>(() => new Trades());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trades> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades(Trades other) : this() {
      trades_ = other.trades_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades Clone() {
      return new Trades(this);
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int Trades_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.Trade> _repeated_trades_codec
        = pb::FieldCodec.ForMessage(10, global::Jsunfutures.Messages.Trade.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.Trade> trades_ = new pbc::RepeatedField<global::Jsunfutures.Messages.Trade>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.Trade> Trades_ {
      get { return trades_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trades);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trades other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trades_.Equals(other.trades_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trades_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      trades_.WriteTo(output, _repeated_trades_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trades_.CalculateSize(_repeated_trades_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trades other) {
      if (other == null) {
        return;
      }
      trades_.Add(other.trades_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            trades_.AddEntriesFrom(input, _repeated_trades_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Trade : pb::IMessage<Trade> {
    private static readonly pb::MessageParser<Trade> _parser = new pb::MessageParser<Trade>(() => new Trade());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade(Trade other) : this() {
      account_ = other.account_;
      brokerID_ = other.brokerID_;
      brokerIDSeq_ = other.brokerIDSeq_;
      bs_ = other.bs_;
      bs1_ = other.bs1_;
      bs2_ = other.bs2_;
      clientFlag_ = other.clientFlag_;
      clientOrderNo_ = other.clientOrderNo_;
      currencyIN_ = other.currencyIN_;
      currencyOut_ = other.currencyOut_;
      dealTime_ = other.dealTime_;
      dealTimeUTC_ = other.dealTimeUTC_;
      exchange_ = other.exchange_;
      exchangeRate_ = other.exchangeRate_;
      marketflag_ = other.marketflag_;
      orderGateWay_ = other.orderGateWay_;
      orderIP_ = other.orderIP_;
      orderNo_ = other.orderNo_;
      positionEffect_ = other.positionEffect_;
      price_ = other.price_;
      price1_ = other.price1_;
      price2_ = other.price2_;
      priceflag_ = other.priceflag_;
      qty_ = other.qty_;
      qty1_ = other.qty1_;
      qty2_ = other.qty2_;
      reportSequence_ = other.reportSequence_;
      sT_ = other.sT_;
      symbol_ = other.symbol_;
      symbol1_ = other.symbol1_;
      symbol2_ = other.symbol2_;
      subAccount_ = other.subAccount_;
      tif_ = other.tif_;
      tolkenID_ = other.tolkenID_;
      traderID_ = other.traderID_;
      tradeNo_ = other.tradeNo_;
      ibNo_ = other.ibNo_;
      clientMachineTime_ = other.clientMachineTime_;
      timePeriod_ = other.timePeriod_;
      requestID_ = other.requestID_;
      priceDen_ = other.priceDen_;
      priceNum_ = other.priceNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade Clone() {
      return new Trade(this);
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///客戶帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BrokerID" field.</summary>
    public const int BrokerIDFieldNumber = 2;
    private string brokerID_ = "";
    /// <summary>
    ///券商代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerID {
      get { return brokerID_; }
      set {
        brokerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BrokerIDSeq" field.</summary>
    public const int BrokerIDSeqFieldNumber = 3;
    private string brokerIDSeq_ = "";
    /// <summary>
    ///券商成交序號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerIDSeq {
      get { return brokerIDSeq_; }
      set {
        brokerIDSeq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Bs" field.</summary>
    public const int BsFieldNumber = 4;
    private global::Jsunfutures.Messages.BS bs_ = 0;
    /// <summary>
    ///買賣別,複式成交單:合併買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.BS Bs {
      get { return bs_; }
      set {
        bs_ = value;
      }
    }

    /// <summary>Field number for the "Bs1" field.</summary>
    public const int Bs1FieldNumber = 5;
    private global::Jsunfutures.Messages.BS bs1_ = 0;
    /// <summary>
    ///買賣別1,複式商品第一邊,價差為第一方成交價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.BS Bs1 {
      get { return bs1_; }
      set {
        bs1_ = value;
      }
    }

    /// <summary>Field number for the "Bs2" field.</summary>
    public const int Bs2FieldNumber = 6;
    private global::Jsunfutures.Messages.BS bs2_ = 0;
    /// <summary>
    ///買賣別2,複式商品第二邊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.BS Bs2 {
      get { return bs2_; }
      set {
        bs2_ = value;
      }
    }

    /// <summary>Field number for the "ClientFlag" field.</summary>
    public const int ClientFlagFieldNumber = 7;
    private global::Jsunfutures.Messages.ClientFlag clientFlag_ = 0;
    /// <summary>
    ///委託來源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ClientFlag ClientFlag {
      get { return clientFlag_; }
      set {
        clientFlag_ = value;
      }
    }

    /// <summary>Field number for the "ClientOrderNo" field.</summary>
    public const int ClientOrderNoFieldNumber = 8;
    private string clientOrderNo_ = "";
    /// <summary>
    ///客戶委託序號(使用客戶委託序號對照原委託)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientOrderNo {
      get { return clientOrderNo_; }
      set {
        clientOrderNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrencyIN" field.</summary>
    public const int CurrencyINFieldNumber = 9;
    private global::Jsunfutures.Messages.Currency currencyIN_ = 0;
    /// <summary>
    ///委託幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Currency CurrencyIN {
      get { return currencyIN_; }
      set {
        currencyIN_ = value;
      }
    }

    /// <summary>Field number for the "CurrencyOut" field.</summary>
    public const int CurrencyOutFieldNumber = 10;
    private global::Jsunfutures.Messages.Currency currencyOut_ = 0;
    /// <summary>
    ///轉換幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Currency CurrencyOut {
      get { return currencyOut_; }
      set {
        currencyOut_ = value;
      }
    }

    /// <summary>Field number for the "DealTime" field.</summary>
    public const int DealTimeFieldNumber = 11;
    private long dealTime_;
    /// <summary>
    ///成交時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DealTime {
      get { return dealTime_; }
      set {
        dealTime_ = value;
      }
    }

    /// <summary>Field number for the "DealTime_UTC" field.</summary>
    public const int DealTimeUTCFieldNumber = 12;
    private long dealTimeUTC_;
    /// <summary>
    ///成交UTC時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DealTimeUTC {
      get { return dealTimeUTC_; }
      set {
        dealTimeUTC_ = value;
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 13;
    private global::Jsunfutures.Messages.ExchangeFlag exchange_ = 0;
    /// <summary>
    ///交易所
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ExchangeFlag Exchange {
      get { return exchange_; }
      set {
        exchange_ = value;
      }
    }

    /// <summary>Field number for the "ExchangeRate" field.</summary>
    public const int ExchangeRateFieldNumber = 14;
    private double exchangeRate_;
    /// <summary>
    ///匯率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExchangeRate {
      get { return exchangeRate_; }
      set {
        exchangeRate_ = value;
      }
    }

    /// <summary>Field number for the "Marketflag" field.</summary>
    public const int MarketflagFieldNumber = 15;
    private global::Jsunfutures.Messages.MarketFlag marketflag_ = 0;
    /// <summary>
    ///1_期貨,2_選擇權,3_複式選擇權,4_期貨價差交易
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.MarketFlag Marketflag {
      get { return marketflag_; }
      set {
        marketflag_ = value;
      }
    }

    /// <summary>Field number for the "OrderGateWay" field.</summary>
    public const int OrderGateWayFieldNumber = 16;
    private global::Jsunfutures.Messages.GatewayFlag orderGateWay_ = 0;
    /// <summary>
    ///使用交易閘道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.GatewayFlag OrderGateWay {
      get { return orderGateWay_; }
      set {
        orderGateWay_ = value;
      }
    }

    /// <summary>Field number for the "OrderIP" field.</summary>
    public const int OrderIPFieldNumber = 17;
    private string orderIP_ = "";
    /// <summary>
    ///委託IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderIP {
      get { return orderIP_; }
      set {
        orderIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderNo" field.</summary>
    public const int OrderNoFieldNumber = 18;
    private string orderNo_ = "";
    /// <summary>
    ///委託書號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderNo {
      get { return orderNo_; }
      set {
        orderNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Position_effect" field.</summary>
    public const int PositionEffectFieldNumber = 19;
    private global::Jsunfutures.Messages.Position_Effect positionEffect_ = 0;
    /// <summary>
    ///1_新增,2_沖銷,3_當沖,4_自動
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Position_Effect PositionEffect {
      get { return positionEffect_; }
      set {
        positionEffect_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 20;
    private double price_;
    /// <summary>
    ///成交價格,複式成交單:價和價差, [小數位數4位]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Price1" field.</summary>
    public const int Price1FieldNumber = 21;
    private double price1_;
    /// <summary>
    ///成交價格1,複式商品第一邊,價差同DealPri[小數位數4位]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price1 {
      get { return price1_; }
      set {
        price1_ = value;
      }
    }

    /// <summary>Field number for the "Price2" field.</summary>
    public const int Price2FieldNumber = 22;
    private double price2_;
    /// <summary>
    ///成交價格2,複式商品第二邊,價差為第二方成交價[小數位數4位]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price2 {
      get { return price2_; }
      set {
        price2_ = value;
      }
    }

    /// <summary>Field number for the "Priceflag" field.</summary>
    public const int PriceflagFieldNumber = 23;
    private global::Jsunfutures.Messages.PriceFlag priceflag_ = 0;
    /// <summary>
    ///1:限價, 2:市價, 3:市價停損, 4:限價停損, 5:範圍市價,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.PriceFlag Priceflag {
      get { return priceflag_; }
      set {
        priceflag_ = value;
      }
    }

    /// <summary>Field number for the "Qty" field.</summary>
    public const int QtyFieldNumber = 24;
    private int qty_;
    /// <summary>
    ///成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "Qty1" field.</summary>
    public const int Qty1FieldNumber = 25;
    private int qty1_;
    /// <summary>
    ///成交口數1,複式商品第一邊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Qty1 {
      get { return qty1_; }
      set {
        qty1_ = value;
      }
    }

    /// <summary>Field number for the "Qty2" field.</summary>
    public const int Qty2FieldNumber = 26;
    private int qty2_;
    /// <summary>
    ///成交口數2,複式商品第二邊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Qty2 {
      get { return qty2_; }
      set {
        qty2_ = value;
      }
    }

    /// <summary>Field number for the "ReportSequence" field.</summary>
    public const int ReportSequenceFieldNumber = 27;
    private long reportSequence_;
    /// <summary>
    ///回報序號,應連續
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportSequence {
      get { return reportSequence_; }
      set {
        reportSequence_ = value;
      }
    }

    /// <summary>Field number for the "ST" field.</summary>
    public const int STFieldNumber = 28;
    private string sT_ = "";
    /// <summary>
    ///策略名稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ST {
      get { return sT_; }
      set {
        sT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 29;
    private string symbol_ = "";
    /// <summary>
    ///商品代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Symbol1" field.</summary>
    public const int Symbol1FieldNumber = 30;
    private string symbol1_ = "";
    /// <summary>
    ///商品代號1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol1 {
      get { return symbol1_; }
      set {
        symbol1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Symbol2" field.</summary>
    public const int Symbol2FieldNumber = 31;
    private string symbol2_ = "";
    /// <summary>
    ///商品代號2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol2 {
      get { return symbol2_; }
      set {
        symbol2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubAccount" field.</summary>
    public const int SubAccountFieldNumber = 32;
    private string subAccount_ = "";
    /// <summary>
    ///客戶子帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubAccount {
      get { return subAccount_; }
      set {
        subAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Tif" field.</summary>
    public const int TifFieldNumber = 33;
    private global::Jsunfutures.Messages.TIF tif_ = 0;
    /// <summary>
    ///委託條件:1_ROD,2_FOK,3_IOC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TIF Tif {
      get { return tif_; }
      set {
        tif_ = value;
      }
    }

    /// <summary>Field number for the "TolkenID" field.</summary>
    public const int TolkenIDFieldNumber = 34;
    private long tolkenID_;
    /// <summary>
    ///Token for multiIOC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TolkenID {
      get { return tolkenID_; }
      set {
        tolkenID_ = value;
      }
    }

    /// <summary>Field number for the "TraderID" field.</summary>
    public const int TraderIDFieldNumber = 35;
    private string traderID_ = "";
    /// <summary>
    ///TraderID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraderID {
      get { return traderID_; }
      set {
        traderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TradeNo" field.</summary>
    public const int TradeNoFieldNumber = 36;
    private string tradeNo_ = "";
    /// <summary>
    ///成交序號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeNo {
      get { return tradeNo_; }
      set {
        tradeNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IbNo" field.</summary>
    public const int IbNoFieldNumber = 37;
    private string ibNo_ = "";
    /// <summary>
    ///IB 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IbNo {
      get { return ibNo_; }
      set {
        ibNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientMachineTime" field.</summary>
    public const int ClientMachineTimeFieldNumber = 38;
    private long clientMachineTime_;
    /// <summary>
    ///本機接收時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientMachineTime {
      get { return clientMachineTime_; }
      set {
        clientMachineTime_ = value;
      }
    }

    /// <summary>Field number for the "TimePeriod" field.</summary>
    public const int TimePeriodFieldNumber = 39;
    private global::Jsunfutures.Messages.TimePeriod timePeriod_ = 0;
    /// <summary>
    ///日盤或夜盤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TimePeriod TimePeriod {
      get { return timePeriod_; }
      set {
        timePeriod_ = value;
      }
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 40;
    private string requestID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestID {
      get { return requestID_; }
      set {
        requestID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PriceDen" field.</summary>
    public const int PriceDenFieldNumber = 41;
    private double priceDen_;
    /// <summary>
    ///委託價分母
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceDen {
      get { return priceDen_; }
      set {
        priceDen_ = value;
      }
    }

    /// <summary>Field number for the "PriceNum" field.</summary>
    public const int PriceNumFieldNumber = 42;
    private double priceNum_;
    /// <summary>
    ///委託價分子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceNum {
      get { return priceNum_; }
      set {
        priceNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (BrokerID != other.BrokerID) return false;
      if (BrokerIDSeq != other.BrokerIDSeq) return false;
      if (Bs != other.Bs) return false;
      if (Bs1 != other.Bs1) return false;
      if (Bs2 != other.Bs2) return false;
      if (ClientFlag != other.ClientFlag) return false;
      if (ClientOrderNo != other.ClientOrderNo) return false;
      if (CurrencyIN != other.CurrencyIN) return false;
      if (CurrencyOut != other.CurrencyOut) return false;
      if (DealTime != other.DealTime) return false;
      if (DealTimeUTC != other.DealTimeUTC) return false;
      if (Exchange != other.Exchange) return false;
      if (ExchangeRate != other.ExchangeRate) return false;
      if (Marketflag != other.Marketflag) return false;
      if (OrderGateWay != other.OrderGateWay) return false;
      if (OrderIP != other.OrderIP) return false;
      if (OrderNo != other.OrderNo) return false;
      if (PositionEffect != other.PositionEffect) return false;
      if (Price != other.Price) return false;
      if (Price1 != other.Price1) return false;
      if (Price2 != other.Price2) return false;
      if (Priceflag != other.Priceflag) return false;
      if (Qty != other.Qty) return false;
      if (Qty1 != other.Qty1) return false;
      if (Qty2 != other.Qty2) return false;
      if (ReportSequence != other.ReportSequence) return false;
      if (ST != other.ST) return false;
      if (Symbol != other.Symbol) return false;
      if (Symbol1 != other.Symbol1) return false;
      if (Symbol2 != other.Symbol2) return false;
      if (SubAccount != other.SubAccount) return false;
      if (Tif != other.Tif) return false;
      if (TolkenID != other.TolkenID) return false;
      if (TraderID != other.TraderID) return false;
      if (TradeNo != other.TradeNo) return false;
      if (IbNo != other.IbNo) return false;
      if (ClientMachineTime != other.ClientMachineTime) return false;
      if (TimePeriod != other.TimePeriod) return false;
      if (RequestID != other.RequestID) return false;
      if (PriceDen != other.PriceDen) return false;
      if (PriceNum != other.PriceNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (BrokerID.Length != 0) hash ^= BrokerID.GetHashCode();
      if (BrokerIDSeq.Length != 0) hash ^= BrokerIDSeq.GetHashCode();
      if (Bs != 0) hash ^= Bs.GetHashCode();
      if (Bs1 != 0) hash ^= Bs1.GetHashCode();
      if (Bs2 != 0) hash ^= Bs2.GetHashCode();
      if (ClientFlag != 0) hash ^= ClientFlag.GetHashCode();
      if (ClientOrderNo.Length != 0) hash ^= ClientOrderNo.GetHashCode();
      if (CurrencyIN != 0) hash ^= CurrencyIN.GetHashCode();
      if (CurrencyOut != 0) hash ^= CurrencyOut.GetHashCode();
      if (DealTime != 0L) hash ^= DealTime.GetHashCode();
      if (DealTimeUTC != 0L) hash ^= DealTimeUTC.GetHashCode();
      if (Exchange != 0) hash ^= Exchange.GetHashCode();
      if (ExchangeRate != 0D) hash ^= ExchangeRate.GetHashCode();
      if (Marketflag != 0) hash ^= Marketflag.GetHashCode();
      if (OrderGateWay != 0) hash ^= OrderGateWay.GetHashCode();
      if (OrderIP.Length != 0) hash ^= OrderIP.GetHashCode();
      if (OrderNo.Length != 0) hash ^= OrderNo.GetHashCode();
      if (PositionEffect != 0) hash ^= PositionEffect.GetHashCode();
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (Price1 != 0D) hash ^= Price1.GetHashCode();
      if (Price2 != 0D) hash ^= Price2.GetHashCode();
      if (Priceflag != 0) hash ^= Priceflag.GetHashCode();
      if (Qty != 0) hash ^= Qty.GetHashCode();
      if (Qty1 != 0) hash ^= Qty1.GetHashCode();
      if (Qty2 != 0) hash ^= Qty2.GetHashCode();
      if (ReportSequence != 0L) hash ^= ReportSequence.GetHashCode();
      if (ST.Length != 0) hash ^= ST.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Symbol1.Length != 0) hash ^= Symbol1.GetHashCode();
      if (Symbol2.Length != 0) hash ^= Symbol2.GetHashCode();
      if (SubAccount.Length != 0) hash ^= SubAccount.GetHashCode();
      if (Tif != 0) hash ^= Tif.GetHashCode();
      if (TolkenID != 0L) hash ^= TolkenID.GetHashCode();
      if (TraderID.Length != 0) hash ^= TraderID.GetHashCode();
      if (TradeNo.Length != 0) hash ^= TradeNo.GetHashCode();
      if (IbNo.Length != 0) hash ^= IbNo.GetHashCode();
      if (ClientMachineTime != 0L) hash ^= ClientMachineTime.GetHashCode();
      if (TimePeriod != 0) hash ^= TimePeriod.GetHashCode();
      if (RequestID.Length != 0) hash ^= RequestID.GetHashCode();
      if (PriceDen != 0D) hash ^= PriceDen.GetHashCode();
      if (PriceNum != 0D) hash ^= PriceNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (BrokerID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BrokerID);
      }
      if (BrokerIDSeq.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BrokerIDSeq);
      }
      if (Bs != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Bs);
      }
      if (Bs1 != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Bs1);
      }
      if (Bs2 != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Bs2);
      }
      if (ClientFlag != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ClientFlag);
      }
      if (ClientOrderNo.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ClientOrderNo);
      }
      if (CurrencyIN != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CurrencyIN);
      }
      if (CurrencyOut != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) CurrencyOut);
      }
      if (DealTime != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(DealTime);
      }
      if (DealTimeUTC != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(DealTimeUTC);
      }
      if (Exchange != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Exchange);
      }
      if (ExchangeRate != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(ExchangeRate);
      }
      if (Marketflag != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Marketflag);
      }
      if (OrderGateWay != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) OrderGateWay);
      }
      if (OrderIP.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(OrderIP);
      }
      if (OrderNo.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(OrderNo);
      }
      if (PositionEffect != 0) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) PositionEffect);
      }
      if (Price != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Price);
      }
      if (Price1 != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(Price1);
      }
      if (Price2 != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Price2);
      }
      if (Priceflag != 0) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) Priceflag);
      }
      if (Qty != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Qty);
      }
      if (Qty1 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Qty1);
      }
      if (Qty2 != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Qty2);
      }
      if (ReportSequence != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(ReportSequence);
      }
      if (ST.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(ST);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Symbol);
      }
      if (Symbol1.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Symbol1);
      }
      if (Symbol2.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Symbol2);
      }
      if (SubAccount.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(SubAccount);
      }
      if (Tif != 0) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Tif);
      }
      if (TolkenID != 0L) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(TolkenID);
      }
      if (TraderID.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(TraderID);
      }
      if (TradeNo.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(TradeNo);
      }
      if (IbNo.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(IbNo);
      }
      if (ClientMachineTime != 0L) {
        output.WriteRawTag(176, 2);
        output.WriteInt64(ClientMachineTime);
      }
      if (TimePeriod != 0) {
        output.WriteRawTag(184, 2);
        output.WriteEnum((int) TimePeriod);
      }
      if (RequestID.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(RequestID);
      }
      if (PriceDen != 0D) {
        output.WriteRawTag(201, 2);
        output.WriteDouble(PriceDen);
      }
      if (PriceNum != 0D) {
        output.WriteRawTag(209, 2);
        output.WriteDouble(PriceNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (BrokerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerID);
      }
      if (BrokerIDSeq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerIDSeq);
      }
      if (Bs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Bs);
      }
      if (Bs1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Bs1);
      }
      if (Bs2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Bs2);
      }
      if (ClientFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClientFlag);
      }
      if (ClientOrderNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientOrderNo);
      }
      if (CurrencyIN != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrencyIN);
      }
      if (CurrencyOut != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrencyOut);
      }
      if (DealTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DealTime);
      }
      if (DealTimeUTC != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DealTimeUTC);
      }
      if (Exchange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Exchange);
      }
      if (ExchangeRate != 0D) {
        size += 1 + 8;
      }
      if (Marketflag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Marketflag);
      }
      if (OrderGateWay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderGateWay);
      }
      if (OrderIP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderIP);
      }
      if (OrderNo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderNo);
      }
      if (PositionEffect != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionEffect);
      }
      if (Price != 0D) {
        size += 2 + 8;
      }
      if (Price1 != 0D) {
        size += 2 + 8;
      }
      if (Price2 != 0D) {
        size += 2 + 8;
      }
      if (Priceflag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Priceflag);
      }
      if (Qty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Qty);
      }
      if (Qty1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Qty1);
      }
      if (Qty2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Qty2);
      }
      if (ReportSequence != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ReportSequence);
      }
      if (ST.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ST);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Symbol1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol1);
      }
      if (Symbol2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol2);
      }
      if (SubAccount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SubAccount);
      }
      if (Tif != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Tif);
      }
      if (TolkenID != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TolkenID);
      }
      if (TraderID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TraderID);
      }
      if (TradeNo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TradeNo);
      }
      if (IbNo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IbNo);
      }
      if (ClientMachineTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ClientMachineTime);
      }
      if (TimePeriod != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TimePeriod);
      }
      if (RequestID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RequestID);
      }
      if (PriceDen != 0D) {
        size += 2 + 8;
      }
      if (PriceNum != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trade other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.BrokerID.Length != 0) {
        BrokerID = other.BrokerID;
      }
      if (other.BrokerIDSeq.Length != 0) {
        BrokerIDSeq = other.BrokerIDSeq;
      }
      if (other.Bs != 0) {
        Bs = other.Bs;
      }
      if (other.Bs1 != 0) {
        Bs1 = other.Bs1;
      }
      if (other.Bs2 != 0) {
        Bs2 = other.Bs2;
      }
      if (other.ClientFlag != 0) {
        ClientFlag = other.ClientFlag;
      }
      if (other.ClientOrderNo.Length != 0) {
        ClientOrderNo = other.ClientOrderNo;
      }
      if (other.CurrencyIN != 0) {
        CurrencyIN = other.CurrencyIN;
      }
      if (other.CurrencyOut != 0) {
        CurrencyOut = other.CurrencyOut;
      }
      if (other.DealTime != 0L) {
        DealTime = other.DealTime;
      }
      if (other.DealTimeUTC != 0L) {
        DealTimeUTC = other.DealTimeUTC;
      }
      if (other.Exchange != 0) {
        Exchange = other.Exchange;
      }
      if (other.ExchangeRate != 0D) {
        ExchangeRate = other.ExchangeRate;
      }
      if (other.Marketflag != 0) {
        Marketflag = other.Marketflag;
      }
      if (other.OrderGateWay != 0) {
        OrderGateWay = other.OrderGateWay;
      }
      if (other.OrderIP.Length != 0) {
        OrderIP = other.OrderIP;
      }
      if (other.OrderNo.Length != 0) {
        OrderNo = other.OrderNo;
      }
      if (other.PositionEffect != 0) {
        PositionEffect = other.PositionEffect;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Price1 != 0D) {
        Price1 = other.Price1;
      }
      if (other.Price2 != 0D) {
        Price2 = other.Price2;
      }
      if (other.Priceflag != 0) {
        Priceflag = other.Priceflag;
      }
      if (other.Qty != 0) {
        Qty = other.Qty;
      }
      if (other.Qty1 != 0) {
        Qty1 = other.Qty1;
      }
      if (other.Qty2 != 0) {
        Qty2 = other.Qty2;
      }
      if (other.ReportSequence != 0L) {
        ReportSequence = other.ReportSequence;
      }
      if (other.ST.Length != 0) {
        ST = other.ST;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Symbol1.Length != 0) {
        Symbol1 = other.Symbol1;
      }
      if (other.Symbol2.Length != 0) {
        Symbol2 = other.Symbol2;
      }
      if (other.SubAccount.Length != 0) {
        SubAccount = other.SubAccount;
      }
      if (other.Tif != 0) {
        Tif = other.Tif;
      }
      if (other.TolkenID != 0L) {
        TolkenID = other.TolkenID;
      }
      if (other.TraderID.Length != 0) {
        TraderID = other.TraderID;
      }
      if (other.TradeNo.Length != 0) {
        TradeNo = other.TradeNo;
      }
      if (other.IbNo.Length != 0) {
        IbNo = other.IbNo;
      }
      if (other.ClientMachineTime != 0L) {
        ClientMachineTime = other.ClientMachineTime;
      }
      if (other.TimePeriod != 0) {
        TimePeriod = other.TimePeriod;
      }
      if (other.RequestID.Length != 0) {
        RequestID = other.RequestID;
      }
      if (other.PriceDen != 0D) {
        PriceDen = other.PriceDen;
      }
      if (other.PriceNum != 0D) {
        PriceNum = other.PriceNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            BrokerID = input.ReadString();
            break;
          }
          case 26: {
            BrokerIDSeq = input.ReadString();
            break;
          }
          case 32: {
            bs_ = (global::Jsunfutures.Messages.BS) input.ReadEnum();
            break;
          }
          case 40: {
            bs1_ = (global::Jsunfutures.Messages.BS) input.ReadEnum();
            break;
          }
          case 48: {
            bs2_ = (global::Jsunfutures.Messages.BS) input.ReadEnum();
            break;
          }
          case 56: {
            clientFlag_ = (global::Jsunfutures.Messages.ClientFlag) input.ReadEnum();
            break;
          }
          case 66: {
            ClientOrderNo = input.ReadString();
            break;
          }
          case 72: {
            currencyIN_ = (global::Jsunfutures.Messages.Currency) input.ReadEnum();
            break;
          }
          case 80: {
            currencyOut_ = (global::Jsunfutures.Messages.Currency) input.ReadEnum();
            break;
          }
          case 88: {
            DealTime = input.ReadInt64();
            break;
          }
          case 96: {
            DealTimeUTC = input.ReadInt64();
            break;
          }
          case 104: {
            exchange_ = (global::Jsunfutures.Messages.ExchangeFlag) input.ReadEnum();
            break;
          }
          case 113: {
            ExchangeRate = input.ReadDouble();
            break;
          }
          case 120: {
            marketflag_ = (global::Jsunfutures.Messages.MarketFlag) input.ReadEnum();
            break;
          }
          case 128: {
            orderGateWay_ = (global::Jsunfutures.Messages.GatewayFlag) input.ReadEnum();
            break;
          }
          case 138: {
            OrderIP = input.ReadString();
            break;
          }
          case 146: {
            OrderNo = input.ReadString();
            break;
          }
          case 152: {
            positionEffect_ = (global::Jsunfutures.Messages.Position_Effect) input.ReadEnum();
            break;
          }
          case 161: {
            Price = input.ReadDouble();
            break;
          }
          case 169: {
            Price1 = input.ReadDouble();
            break;
          }
          case 177: {
            Price2 = input.ReadDouble();
            break;
          }
          case 184: {
            priceflag_ = (global::Jsunfutures.Messages.PriceFlag) input.ReadEnum();
            break;
          }
          case 192: {
            Qty = input.ReadInt32();
            break;
          }
          case 200: {
            Qty1 = input.ReadInt32();
            break;
          }
          case 208: {
            Qty2 = input.ReadInt32();
            break;
          }
          case 216: {
            ReportSequence = input.ReadInt64();
            break;
          }
          case 226: {
            ST = input.ReadString();
            break;
          }
          case 234: {
            Symbol = input.ReadString();
            break;
          }
          case 242: {
            Symbol1 = input.ReadString();
            break;
          }
          case 250: {
            Symbol2 = input.ReadString();
            break;
          }
          case 258: {
            SubAccount = input.ReadString();
            break;
          }
          case 264: {
            tif_ = (global::Jsunfutures.Messages.TIF) input.ReadEnum();
            break;
          }
          case 272: {
            TolkenID = input.ReadInt64();
            break;
          }
          case 282: {
            TraderID = input.ReadString();
            break;
          }
          case 290: {
            TradeNo = input.ReadString();
            break;
          }
          case 298: {
            IbNo = input.ReadString();
            break;
          }
          case 304: {
            ClientMachineTime = input.ReadInt64();
            break;
          }
          case 312: {
            timePeriod_ = (global::Jsunfutures.Messages.TimePeriod) input.ReadEnum();
            break;
          }
          case 322: {
            RequestID = input.ReadString();
            break;
          }
          case 329: {
            PriceDen = input.ReadDouble();
            break;
          }
          case 337: {
            PriceNum = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Query : pb::IMessage<Query> {
    private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Query> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query(Query other) : this() {
      idendity_ = other.idendity_;
      account_ = other.account_;
      iD_ = other.iD_;
      qf_ = other.qf_;
      exchange_ = other.exchange_;
      startOrdNo_ = other.startOrdNo_;
      endOrdno_ = other.endOrdno_;
      date_ = other.date_;
      ibNo_ = other.ibNo_;
      subaccount_ = other.subaccount_;
      brokerID_ = other.brokerID_;
      tomf_ = other.tomf_;
      timePeriod_ = other.timePeriod_;
      clientFlag_ = other.clientFlag_;
      reports_ = other.reports_.Clone();
      trades_ = other.trades_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query Clone() {
      return new Query(this);
    }

    /// <summary>Field number for the "Idendity" field.</summary>
    public const int IdendityFieldNumber = 1;
    private string idendity_ = "";
    /// <summary>
    ///查詢編號 idendity 改  Idendity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idendity {
      get { return idendity_; }
      set {
        idendity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 3;
    private string iD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qf" field.</summary>
    public const int QfFieldNumber = 4;
    private global::Jsunfutures.Messages.QueryFlag qf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.QueryFlag Qf {
      get { return qf_; }
      set {
        qf_ = value;
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 5;
    private global::Jsunfutures.Messages.ExchangeFlag exchange_ = 0;
    /// <summary>
    ///交易所
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ExchangeFlag Exchange {
      get { return exchange_; }
      set {
        exchange_ = value;
      }
    }

    /// <summary>Field number for the "StartOrdNo" field.</summary>
    public const int StartOrdNoFieldNumber = 6;
    private string startOrdNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartOrdNo {
      get { return startOrdNo_; }
      set {
        startOrdNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EndOrdno" field.</summary>
    public const int EndOrdnoFieldNumber = 7;
    private string endOrdno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndOrdno {
      get { return endOrdno_; }
      set {
        endOrdno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Date" field.</summary>
    public const int DateFieldNumber = 8;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IbNo" field.</summary>
    public const int IbNoFieldNumber = 9;
    private string ibNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IbNo {
      get { return ibNo_; }
      set {
        ibNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subaccount" field.</summary>
    public const int SubaccountFieldNumber = 10;
    private string subaccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subaccount {
      get { return subaccount_; }
      set {
        subaccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BrokerID" field.</summary>
    public const int BrokerIDFieldNumber = 11;
    private string brokerID_ = "";
    /// <summary>
    ///期貨商代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerID {
      get { return brokerID_; }
      set {
        brokerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tomf" field.</summary>
    public const int TomfFieldNumber = 12;
    private global::Jsunfutures.Messages.TandemOrderMarketFlag tomf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TandemOrderMarketFlag Tomf {
      get { return tomf_; }
      set {
        tomf_ = value;
      }
    }

    /// <summary>Field number for the "TimePeriod" field.</summary>
    public const int TimePeriodFieldNumber = 13;
    private global::Jsunfutures.Messages.TimePeriod timePeriod_ = 0;
    /// <summary>
    ///日盤或夜盤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TimePeriod TimePeriod {
      get { return timePeriod_; }
      set {
        timePeriod_ = value;
      }
    }

    /// <summary>Field number for the "ClientFlag" field.</summary>
    public const int ClientFlagFieldNumber = 14;
    private global::Jsunfutures.Messages.ClientFlag clientFlag_ = 0;
    /// <summary>
    ///查詢來源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ClientFlag ClientFlag {
      get { return clientFlag_; }
      set {
        clientFlag_ = value;
      }
    }

    /// <summary>Field number for the "reports" field.</summary>
    public const int ReportsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.Report> _repeated_reports_codec
        = pb::FieldCodec.ForMessage(122, global::Jsunfutures.Messages.Report.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.Report> reports_ = new pbc::RepeatedField<global::Jsunfutures.Messages.Report>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.Report> Reports {
      get { return reports_; }
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.Trade> _repeated_trades_codec
        = pb::FieldCodec.ForMessage(130, global::Jsunfutures.Messages.Trade.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.Trade> trades_ = new pbc::RepeatedField<global::Jsunfutures.Messages.Trade>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.Trade> Trades {
      get { return trades_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Query);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Query other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idendity != other.Idendity) return false;
      if (Account != other.Account) return false;
      if (ID != other.ID) return false;
      if (Qf != other.Qf) return false;
      if (Exchange != other.Exchange) return false;
      if (StartOrdNo != other.StartOrdNo) return false;
      if (EndOrdno != other.EndOrdno) return false;
      if (Date != other.Date) return false;
      if (IbNo != other.IbNo) return false;
      if (Subaccount != other.Subaccount) return false;
      if (BrokerID != other.BrokerID) return false;
      if (Tomf != other.Tomf) return false;
      if (TimePeriod != other.TimePeriod) return false;
      if (ClientFlag != other.ClientFlag) return false;
      if(!reports_.Equals(other.reports_)) return false;
      if(!trades_.Equals(other.trades_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Idendity.Length != 0) hash ^= Idendity.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (Qf != 0) hash ^= Qf.GetHashCode();
      if (Exchange != 0) hash ^= Exchange.GetHashCode();
      if (StartOrdNo.Length != 0) hash ^= StartOrdNo.GetHashCode();
      if (EndOrdno.Length != 0) hash ^= EndOrdno.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (IbNo.Length != 0) hash ^= IbNo.GetHashCode();
      if (Subaccount.Length != 0) hash ^= Subaccount.GetHashCode();
      if (BrokerID.Length != 0) hash ^= BrokerID.GetHashCode();
      if (Tomf != 0) hash ^= Tomf.GetHashCode();
      if (TimePeriod != 0) hash ^= TimePeriod.GetHashCode();
      if (ClientFlag != 0) hash ^= ClientFlag.GetHashCode();
      hash ^= reports_.GetHashCode();
      hash ^= trades_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Idendity.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Idendity);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (ID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ID);
      }
      if (Qf != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Qf);
      }
      if (Exchange != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Exchange);
      }
      if (StartOrdNo.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StartOrdNo);
      }
      if (EndOrdno.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(EndOrdno);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Date);
      }
      if (IbNo.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(IbNo);
      }
      if (Subaccount.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Subaccount);
      }
      if (BrokerID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(BrokerID);
      }
      if (Tomf != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Tomf);
      }
      if (TimePeriod != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) TimePeriod);
      }
      if (ClientFlag != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) ClientFlag);
      }
      reports_.WriteTo(output, _repeated_reports_codec);
      trades_.WriteTo(output, _repeated_trades_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Idendity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idendity);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (Qf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Qf);
      }
      if (Exchange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Exchange);
      }
      if (StartOrdNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartOrdNo);
      }
      if (EndOrdno.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndOrdno);
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (IbNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IbNo);
      }
      if (Subaccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subaccount);
      }
      if (BrokerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerID);
      }
      if (Tomf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tomf);
      }
      if (TimePeriod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimePeriod);
      }
      if (ClientFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClientFlag);
      }
      size += reports_.CalculateSize(_repeated_reports_codec);
      size += trades_.CalculateSize(_repeated_trades_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Query other) {
      if (other == null) {
        return;
      }
      if (other.Idendity.Length != 0) {
        Idendity = other.Idendity;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.Qf != 0) {
        Qf = other.Qf;
      }
      if (other.Exchange != 0) {
        Exchange = other.Exchange;
      }
      if (other.StartOrdNo.Length != 0) {
        StartOrdNo = other.StartOrdNo;
      }
      if (other.EndOrdno.Length != 0) {
        EndOrdno = other.EndOrdno;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.IbNo.Length != 0) {
        IbNo = other.IbNo;
      }
      if (other.Subaccount.Length != 0) {
        Subaccount = other.Subaccount;
      }
      if (other.BrokerID.Length != 0) {
        BrokerID = other.BrokerID;
      }
      if (other.Tomf != 0) {
        Tomf = other.Tomf;
      }
      if (other.TimePeriod != 0) {
        TimePeriod = other.TimePeriod;
      }
      if (other.ClientFlag != 0) {
        ClientFlag = other.ClientFlag;
      }
      reports_.Add(other.reports_);
      trades_.Add(other.trades_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Idendity = input.ReadString();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            ID = input.ReadString();
            break;
          }
          case 32: {
            qf_ = (global::Jsunfutures.Messages.QueryFlag) input.ReadEnum();
            break;
          }
          case 40: {
            exchange_ = (global::Jsunfutures.Messages.ExchangeFlag) input.ReadEnum();
            break;
          }
          case 50: {
            StartOrdNo = input.ReadString();
            break;
          }
          case 58: {
            EndOrdno = input.ReadString();
            break;
          }
          case 66: {
            Date = input.ReadString();
            break;
          }
          case 74: {
            IbNo = input.ReadString();
            break;
          }
          case 82: {
            Subaccount = input.ReadString();
            break;
          }
          case 90: {
            BrokerID = input.ReadString();
            break;
          }
          case 96: {
            tomf_ = (global::Jsunfutures.Messages.TandemOrderMarketFlag) input.ReadEnum();
            break;
          }
          case 104: {
            timePeriod_ = (global::Jsunfutures.Messages.TimePeriod) input.ReadEnum();
            break;
          }
          case 112: {
            clientFlag_ = (global::Jsunfutures.Messages.ClientFlag) input.ReadEnum();
            break;
          }
          case 122: {
            reports_.AddEntriesFrom(input, _repeated_reports_codec);
            break;
          }
          case 130: {
            trades_.AddEntriesFrom(input, _repeated_trades_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FEPQuery : pb::IMessage<FEPQuery> {
    private static readonly pb::MessageParser<FEPQuery> _parser = new pb::MessageParser<FEPQuery>(() => new FEPQuery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FEPQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEPQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEPQuery(FEPQuery other) : this() {
      idendity_ = other.idendity_;
      account_ = other.account_;
      brokerID_ = other.brokerID_;
      fepqueryflag_ = other.fepqueryflag_;
      exchange_ = other.exchange_;
      ibNo_ = other.ibNo_;
      subAccount_ = other.subAccount_;
      tomf_ = other.tomf_;
      timePeriod_ = other.timePeriod_;
      fromCurrency_ = other.fromCurrency_;
      toCurrency_ = other.toCurrency_;
      amount_ = other.amount_;
      password_ = other.password_;
      fromTxDate_ = other.fromTxDate_;
      toTxDate_ = other.toTxDate_;
      setCurrency_ = other.setCurrency_;
      idendityID_ = other.idendityID_;
      setTransferFlag_ = other.setTransferFlag_;
      sEQNOIDX_ = other.sEQNOIDX_.Clone();
      wRQUEDETAIL_ = other.wRQUEDETAIL_.Clone();
      cancelList_ = other.cancelList_.Clone();
      clientFlag_ = other.clientFlag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEPQuery Clone() {
      return new FEPQuery(this);
    }

    /// <summary>Field number for the "Idendity" field.</summary>
    public const int IdendityFieldNumber = 1;
    private string idendity_ = "";
    /// <summary>
    ///查詢編號  QueryNO 改  Idendity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idendity {
      get { return idendity_; }
      set {
        idendity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    /// <summary>
    ///客戶帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BrokerID" field.</summary>
    public const int BrokerIDFieldNumber = 3;
    private string brokerID_ = "";
    /// <summary>
    ///期貨商代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerID {
      get { return brokerID_; }
      set {
        brokerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fepqueryflag" field.</summary>
    public const int FepqueryflagFieldNumber = 4;
    private global::Jsunfutures.Messages.QueryFlag fepqueryflag_ = 0;
    /// <summary>
    ///查詢種類(參考FEP)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.QueryFlag Fepqueryflag {
      get { return fepqueryflag_; }
      set {
        fepqueryflag_ = value;
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 5;
    private global::Jsunfutures.Messages.ExchangeFlag exchange_ = 0;
    /// <summary>
    ///交易所
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ExchangeFlag Exchange {
      get { return exchange_; }
      set {
        exchange_ = value;
      }
    }

    /// <summary>Field number for the "IbNo" field.</summary>
    public const int IbNoFieldNumber = 6;
    private string ibNo_ = "";
    /// <summary>
    ///分公司代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IbNo {
      get { return ibNo_; }
      set {
        ibNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubAccount" field.</summary>
    public const int SubAccountFieldNumber = 7;
    private string subAccount_ = "";
    /// <summary>
    ///子帳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubAccount {
      get { return subAccount_; }
      set {
        subAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tomf" field.</summary>
    public const int TomfFieldNumber = 8;
    private global::Jsunfutures.Messages.TandemOrderMarketFlag tomf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TandemOrderMarketFlag Tomf {
      get { return tomf_; }
      set {
        tomf_ = value;
      }
    }

    /// <summary>Field number for the "TimePeriod" field.</summary>
    public const int TimePeriodFieldNumber = 9;
    private global::Jsunfutures.Messages.TimePeriod timePeriod_ = 0;
    /// <summary>
    ///日盤或夜盤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TimePeriod TimePeriod {
      get { return timePeriod_; }
      set {
        timePeriod_ = value;
      }
    }

    /// <summary>Field number for the "FromCurrency" field.</summary>
    public const int FromCurrencyFieldNumber = 10;
    private global::Jsunfutures.Messages.Currency fromCurrency_ = 0;
    /// <summary>
    ///提領幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Currency FromCurrency {
      get { return fromCurrency_; }
      set {
        fromCurrency_ = value;
      }
    }

    /// <summary>Field number for the "ToCurrency" field.</summary>
    public const int ToCurrencyFieldNumber = 11;
    private global::Jsunfutures.Messages.Currency toCurrency_ = 0;
    /// <summary>
    ///出金幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Currency ToCurrency {
      get { return toCurrency_; }
      set {
        toCurrency_ = value;
      }
    }

    /// <summary>Field number for the "Amount" field.</summary>
    public const int AmountFieldNumber = 12;
    private double amount_;
    /// <summary>
    ///金額 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 13;
    private string password_ = "";
    /// <summary>
    ///交易密碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FromTxDate" field.</summary>
    public const int FromTxDateFieldNumber = 14;
    private string fromTxDate_ = "";
    /// <summary>
    ///開始時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromTxDate {
      get { return fromTxDate_; }
      set {
        fromTxDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToTxDate" field.</summary>
    public const int ToTxDateFieldNumber = 15;
    private string toTxDate_ = "";
    /// <summary>
    ///結束時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToTxDate {
      get { return toTxDate_; }
      set {
        toTxDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SetCurrency" field.</summary>
    public const int SetCurrencyFieldNumber = 16;
    private global::Jsunfutures.Messages.Currency setCurrency_ = 0;
    /// <summary>
    ///查詢幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Currency SetCurrency {
      get { return setCurrency_; }
      set {
        setCurrency_ = value;
      }
    }

    /// <summary>Field number for the "IdendityID" field.</summary>
    public const int IdendityIDFieldNumber = 17;
    private string idendityID_ = "";
    /// <summary>
    ///UserID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdendityID {
      get { return idendityID_; }
      set {
        idendityID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SetTransferFlag" field.</summary>
    public const int SetTransferFlagFieldNumber = 18;
    private global::Jsunfutures.Messages.TransferFlag setTransferFlag_ = 0;
    /// <summary>
    ///內轉外 or 外轉內
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TransferFlag SetTransferFlag {
      get { return setTransferFlag_; }
      set {
        setTransferFlag_ = value;
      }
    }

    /// <summary>Field number for the "SEQNOIDX" field.</summary>
    public const int SEQNOIDXFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.futseqno> _repeated_sEQNOIDX_codec
        = pb::FieldCodec.ForMessage(154, global::Jsunfutures.Messages.futseqno.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.futseqno> sEQNOIDX_ = new pbc::RepeatedField<global::Jsunfutures.Messages.futseqno>();
    /// <summary>
    ///取消單據流水號index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.futseqno> SEQNOIDX {
      get { return sEQNOIDX_; }
    }

    /// <summary>Field number for the "WR_QUE_DETAIL" field.</summary>
    public const int WRQUEDETAILFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.que_detail> _repeated_wRQUEDETAIL_codec
        = pb::FieldCodec.ForMessage(162, global::Jsunfutures.Messages.que_detail.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.que_detail> wRQUEDETAIL_ = new pbc::RepeatedField<global::Jsunfutures.Messages.que_detail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.que_detail> WRQUEDETAIL {
      get { return wRQUEDETAIL_; }
    }

    /// <summary>Field number for the "cancelList" field.</summary>
    public const int CancelListFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.WithdrawMarginCancelQuery> _repeated_cancelList_codec
        = pb::FieldCodec.ForMessage(170, global::Jsunfutures.Messages.WithdrawMarginCancelQuery.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.WithdrawMarginCancelQuery> cancelList_ = new pbc::RepeatedField<global::Jsunfutures.Messages.WithdrawMarginCancelQuery>();
    /// <summary>
    ///國外出金取消
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.WithdrawMarginCancelQuery> CancelList {
      get { return cancelList_; }
    }

    /// <summary>Field number for the "ClientFlag" field.</summary>
    public const int ClientFlagFieldNumber = 22;
    private global::Jsunfutures.Messages.ClientFlag clientFlag_ = 0;
    /// <summary>
    ///查詢來源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ClientFlag ClientFlag {
      get { return clientFlag_; }
      set {
        clientFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FEPQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FEPQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idendity != other.Idendity) return false;
      if (Account != other.Account) return false;
      if (BrokerID != other.BrokerID) return false;
      if (Fepqueryflag != other.Fepqueryflag) return false;
      if (Exchange != other.Exchange) return false;
      if (IbNo != other.IbNo) return false;
      if (SubAccount != other.SubAccount) return false;
      if (Tomf != other.Tomf) return false;
      if (TimePeriod != other.TimePeriod) return false;
      if (FromCurrency != other.FromCurrency) return false;
      if (ToCurrency != other.ToCurrency) return false;
      if (Amount != other.Amount) return false;
      if (Password != other.Password) return false;
      if (FromTxDate != other.FromTxDate) return false;
      if (ToTxDate != other.ToTxDate) return false;
      if (SetCurrency != other.SetCurrency) return false;
      if (IdendityID != other.IdendityID) return false;
      if (SetTransferFlag != other.SetTransferFlag) return false;
      if(!sEQNOIDX_.Equals(other.sEQNOIDX_)) return false;
      if(!wRQUEDETAIL_.Equals(other.wRQUEDETAIL_)) return false;
      if(!cancelList_.Equals(other.cancelList_)) return false;
      if (ClientFlag != other.ClientFlag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Idendity.Length != 0) hash ^= Idendity.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (BrokerID.Length != 0) hash ^= BrokerID.GetHashCode();
      if (Fepqueryflag != 0) hash ^= Fepqueryflag.GetHashCode();
      if (Exchange != 0) hash ^= Exchange.GetHashCode();
      if (IbNo.Length != 0) hash ^= IbNo.GetHashCode();
      if (SubAccount.Length != 0) hash ^= SubAccount.GetHashCode();
      if (Tomf != 0) hash ^= Tomf.GetHashCode();
      if (TimePeriod != 0) hash ^= TimePeriod.GetHashCode();
      if (FromCurrency != 0) hash ^= FromCurrency.GetHashCode();
      if (ToCurrency != 0) hash ^= ToCurrency.GetHashCode();
      if (Amount != 0D) hash ^= Amount.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (FromTxDate.Length != 0) hash ^= FromTxDate.GetHashCode();
      if (ToTxDate.Length != 0) hash ^= ToTxDate.GetHashCode();
      if (SetCurrency != 0) hash ^= SetCurrency.GetHashCode();
      if (IdendityID.Length != 0) hash ^= IdendityID.GetHashCode();
      if (SetTransferFlag != 0) hash ^= SetTransferFlag.GetHashCode();
      hash ^= sEQNOIDX_.GetHashCode();
      hash ^= wRQUEDETAIL_.GetHashCode();
      hash ^= cancelList_.GetHashCode();
      if (ClientFlag != 0) hash ^= ClientFlag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Idendity.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Idendity);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (BrokerID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BrokerID);
      }
      if (Fepqueryflag != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Fepqueryflag);
      }
      if (Exchange != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Exchange);
      }
      if (IbNo.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IbNo);
      }
      if (SubAccount.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SubAccount);
      }
      if (Tomf != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Tomf);
      }
      if (TimePeriod != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) TimePeriod);
      }
      if (FromCurrency != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) FromCurrency);
      }
      if (ToCurrency != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) ToCurrency);
      }
      if (Amount != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Amount);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Password);
      }
      if (FromTxDate.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(FromTxDate);
      }
      if (ToTxDate.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(ToTxDate);
      }
      if (SetCurrency != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) SetCurrency);
      }
      if (IdendityID.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(IdendityID);
      }
      if (SetTransferFlag != 0) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) SetTransferFlag);
      }
      sEQNOIDX_.WriteTo(output, _repeated_sEQNOIDX_codec);
      wRQUEDETAIL_.WriteTo(output, _repeated_wRQUEDETAIL_codec);
      cancelList_.WriteTo(output, _repeated_cancelList_codec);
      if (ClientFlag != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) ClientFlag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Idendity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idendity);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (BrokerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerID);
      }
      if (Fepqueryflag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Fepqueryflag);
      }
      if (Exchange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Exchange);
      }
      if (IbNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IbNo);
      }
      if (SubAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubAccount);
      }
      if (Tomf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tomf);
      }
      if (TimePeriod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimePeriod);
      }
      if (FromCurrency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FromCurrency);
      }
      if (ToCurrency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ToCurrency);
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (FromTxDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromTxDate);
      }
      if (ToTxDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToTxDate);
      }
      if (SetCurrency != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SetCurrency);
      }
      if (IdendityID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IdendityID);
      }
      if (SetTransferFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SetTransferFlag);
      }
      size += sEQNOIDX_.CalculateSize(_repeated_sEQNOIDX_codec);
      size += wRQUEDETAIL_.CalculateSize(_repeated_wRQUEDETAIL_codec);
      size += cancelList_.CalculateSize(_repeated_cancelList_codec);
      if (ClientFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ClientFlag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FEPQuery other) {
      if (other == null) {
        return;
      }
      if (other.Idendity.Length != 0) {
        Idendity = other.Idendity;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.BrokerID.Length != 0) {
        BrokerID = other.BrokerID;
      }
      if (other.Fepqueryflag != 0) {
        Fepqueryflag = other.Fepqueryflag;
      }
      if (other.Exchange != 0) {
        Exchange = other.Exchange;
      }
      if (other.IbNo.Length != 0) {
        IbNo = other.IbNo;
      }
      if (other.SubAccount.Length != 0) {
        SubAccount = other.SubAccount;
      }
      if (other.Tomf != 0) {
        Tomf = other.Tomf;
      }
      if (other.TimePeriod != 0) {
        TimePeriod = other.TimePeriod;
      }
      if (other.FromCurrency != 0) {
        FromCurrency = other.FromCurrency;
      }
      if (other.ToCurrency != 0) {
        ToCurrency = other.ToCurrency;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.FromTxDate.Length != 0) {
        FromTxDate = other.FromTxDate;
      }
      if (other.ToTxDate.Length != 0) {
        ToTxDate = other.ToTxDate;
      }
      if (other.SetCurrency != 0) {
        SetCurrency = other.SetCurrency;
      }
      if (other.IdendityID.Length != 0) {
        IdendityID = other.IdendityID;
      }
      if (other.SetTransferFlag != 0) {
        SetTransferFlag = other.SetTransferFlag;
      }
      sEQNOIDX_.Add(other.sEQNOIDX_);
      wRQUEDETAIL_.Add(other.wRQUEDETAIL_);
      cancelList_.Add(other.cancelList_);
      if (other.ClientFlag != 0) {
        ClientFlag = other.ClientFlag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Idendity = input.ReadString();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            BrokerID = input.ReadString();
            break;
          }
          case 32: {
            fepqueryflag_ = (global::Jsunfutures.Messages.QueryFlag) input.ReadEnum();
            break;
          }
          case 40: {
            exchange_ = (global::Jsunfutures.Messages.ExchangeFlag) input.ReadEnum();
            break;
          }
          case 50: {
            IbNo = input.ReadString();
            break;
          }
          case 58: {
            SubAccount = input.ReadString();
            break;
          }
          case 64: {
            tomf_ = (global::Jsunfutures.Messages.TandemOrderMarketFlag) input.ReadEnum();
            break;
          }
          case 72: {
            timePeriod_ = (global::Jsunfutures.Messages.TimePeriod) input.ReadEnum();
            break;
          }
          case 80: {
            fromCurrency_ = (global::Jsunfutures.Messages.Currency) input.ReadEnum();
            break;
          }
          case 88: {
            toCurrency_ = (global::Jsunfutures.Messages.Currency) input.ReadEnum();
            break;
          }
          case 97: {
            Amount = input.ReadDouble();
            break;
          }
          case 106: {
            Password = input.ReadString();
            break;
          }
          case 114: {
            FromTxDate = input.ReadString();
            break;
          }
          case 122: {
            ToTxDate = input.ReadString();
            break;
          }
          case 128: {
            setCurrency_ = (global::Jsunfutures.Messages.Currency) input.ReadEnum();
            break;
          }
          case 138: {
            IdendityID = input.ReadString();
            break;
          }
          case 144: {
            setTransferFlag_ = (global::Jsunfutures.Messages.TransferFlag) input.ReadEnum();
            break;
          }
          case 154: {
            sEQNOIDX_.AddEntriesFrom(input, _repeated_sEQNOIDX_codec);
            break;
          }
          case 162: {
            wRQUEDETAIL_.AddEntriesFrom(input, _repeated_wRQUEDETAIL_codec);
            break;
          }
          case 170: {
            cancelList_.AddEntriesFrom(input, _repeated_cancelList_codec);
            break;
          }
          case 176: {
            clientFlag_ = (global::Jsunfutures.Messages.ClientFlag) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FEPResult : pb::IMessage<FEPResult> {
    private static readonly pb::MessageParser<FEPResult> _parser = new pb::MessageParser<FEPResult>(() => new FEPResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FEPResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEPResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEPResult(FEPResult other) : this() {
      idendity_ = other.idendity_;
      account_ = other.account_;
      brokerID_ = other.brokerID_;
      fepqueryflag_ = other.fepqueryflag_;
      Equity = other.equity_ != null ? other.Equity.Clone() : null;
      positions_ = other.positions_.Clone();
      errorCode_ = other.errorCode_;
      errorMsg_ = other.errorMsg_;
      ibNo_ = other.ibNo_;
      subAccount_ = other.subAccount_;
      tomf_ = other.tomf_;
      withdrawMarginInquire_ = other.withdrawMarginInquire_.Clone();
      withdrawMarginResult_ = other.withdrawMarginResult_;
      withdrawMarginCancel_ = other.withdrawMarginCancel_.Clone();
      transferMarginResult_ = other.transferMarginResult_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEPResult Clone() {
      return new FEPResult(this);
    }

    /// <summary>Field number for the "Idendity" field.</summary>
    public const int IdendityFieldNumber = 1;
    private string idendity_ = "";
    /// <summary>
    ///查詢編號   QueryNO 改  Idendity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idendity {
      get { return idendity_; }
      set {
        idendity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    /// <summary>
    ///客戶帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BrokerID" field.</summary>
    public const int BrokerIDFieldNumber = 3;
    private string brokerID_ = "";
    /// <summary>
    ///期貨商代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerID {
      get { return brokerID_; }
      set {
        brokerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fepqueryflag" field.</summary>
    public const int FepqueryflagFieldNumber = 4;
    private global::Jsunfutures.Messages.QueryFlag fepqueryflag_ = 0;
    /// <summary>
    ///查詢種類(參考FEP)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.QueryFlag Fepqueryflag {
      get { return fepqueryflag_; }
      set {
        fepqueryflag_ = value;
      }
    }

    /// <summary>Field number for the "equity" field.</summary>
    public const int EquityFieldNumber = 5;
    private global::Jsunfutures.Messages.Equity equity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Equity Equity {
      get { return equity_; }
      set {
        equity_ = value;
      }
    }

    /// <summary>Field number for the "positions" field.</summary>
    public const int PositionsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.Position> _repeated_positions_codec
        = pb::FieldCodec.ForMessage(50, global::Jsunfutures.Messages.Position.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.Position> positions_ = new pbc::RepeatedField<global::Jsunfutures.Messages.Position>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.Position> Positions {
      get { return positions_; }
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 7;
    private global::Jsunfutures.Messages.FEPResultErrorCode errorCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.FEPResultErrorCode ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "errorMsg" field.</summary>
    public const int ErrorMsgFieldNumber = 8;
    private string errorMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMsg {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IbNo" field.</summary>
    public const int IbNoFieldNumber = 9;
    private string ibNo_ = "";
    /// <summary>
    ///分公司代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IbNo {
      get { return ibNo_; }
      set {
        ibNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubAccount" field.</summary>
    public const int SubAccountFieldNumber = 10;
    private string subAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubAccount {
      get { return subAccount_; }
      set {
        subAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tomf" field.</summary>
    public const int TomfFieldNumber = 11;
    private global::Jsunfutures.Messages.TandemOrderMarketFlag tomf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TandemOrderMarketFlag Tomf {
      get { return tomf_; }
      set {
        tomf_ = value;
      }
    }

    /// <summary>Field number for the "withdrawMarginInquire" field.</summary>
    public const int WithdrawMarginInquireFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.WithdrawMarginInquireResult> _repeated_withdrawMarginInquire_codec
        = pb::FieldCodec.ForMessage(98, global::Jsunfutures.Messages.WithdrawMarginInquireResult.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.WithdrawMarginInquireResult> withdrawMarginInquire_ = new pbc::RepeatedField<global::Jsunfutures.Messages.WithdrawMarginInquireResult>();
    /// <summary>
    ///出金查詢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.WithdrawMarginInquireResult> WithdrawMarginInquire {
      get { return withdrawMarginInquire_; }
    }

    /// <summary>Field number for the "withdrawMarginResult" field.</summary>
    public const int WithdrawMarginResultFieldNumber = 13;
    private string withdrawMarginResult_ = "";
    /// <summary>
    ///出金申請取消筆數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WithdrawMarginResult {
      get { return withdrawMarginResult_; }
      set {
        withdrawMarginResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "withdrawMarginCancel" field.</summary>
    public const int WithdrawMarginCancelFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.WithdrawMarginCancelResult> _repeated_withdrawMarginCancel_codec
        = pb::FieldCodec.ForMessage(114, global::Jsunfutures.Messages.WithdrawMarginCancelResult.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.WithdrawMarginCancelResult> withdrawMarginCancel_ = new pbc::RepeatedField<global::Jsunfutures.Messages.WithdrawMarginCancelResult>();
    /// <summary>
    ///出金申請取消
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.WithdrawMarginCancelResult> WithdrawMarginCancel {
      get { return withdrawMarginCancel_; }
    }

    /// <summary>Field number for the "transferMarginResult" field.</summary>
    public const int TransferMarginResultFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.TransferMarginResult> _repeated_transferMarginResult_codec
        = pb::FieldCodec.ForMessage(122, global::Jsunfutures.Messages.TransferMarginResult.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.TransferMarginResult> transferMarginResult_ = new pbc::RepeatedField<global::Jsunfutures.Messages.TransferMarginResult>();
    /// <summary>
    ///保證金內外互轉查詢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.TransferMarginResult> TransferMarginResult {
      get { return transferMarginResult_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FEPResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FEPResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idendity != other.Idendity) return false;
      if (Account != other.Account) return false;
      if (BrokerID != other.BrokerID) return false;
      if (Fepqueryflag != other.Fepqueryflag) return false;
      if (!object.Equals(Equity, other.Equity)) return false;
      if(!positions_.Equals(other.positions_)) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMsg != other.ErrorMsg) return false;
      if (IbNo != other.IbNo) return false;
      if (SubAccount != other.SubAccount) return false;
      if (Tomf != other.Tomf) return false;
      if(!withdrawMarginInquire_.Equals(other.withdrawMarginInquire_)) return false;
      if (WithdrawMarginResult != other.WithdrawMarginResult) return false;
      if(!withdrawMarginCancel_.Equals(other.withdrawMarginCancel_)) return false;
      if(!transferMarginResult_.Equals(other.transferMarginResult_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Idendity.Length != 0) hash ^= Idendity.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (BrokerID.Length != 0) hash ^= BrokerID.GetHashCode();
      if (Fepqueryflag != 0) hash ^= Fepqueryflag.GetHashCode();
      if (equity_ != null) hash ^= Equity.GetHashCode();
      hash ^= positions_.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
      if (IbNo.Length != 0) hash ^= IbNo.GetHashCode();
      if (SubAccount.Length != 0) hash ^= SubAccount.GetHashCode();
      if (Tomf != 0) hash ^= Tomf.GetHashCode();
      hash ^= withdrawMarginInquire_.GetHashCode();
      if (WithdrawMarginResult.Length != 0) hash ^= WithdrawMarginResult.GetHashCode();
      hash ^= withdrawMarginCancel_.GetHashCode();
      hash ^= transferMarginResult_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Idendity.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Idendity);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (BrokerID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BrokerID);
      }
      if (Fepqueryflag != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Fepqueryflag);
      }
      if (equity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Equity);
      }
      positions_.WriteTo(output, _repeated_positions_codec);
      if (ErrorCode != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ErrorCode);
      }
      if (ErrorMsg.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ErrorMsg);
      }
      if (IbNo.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(IbNo);
      }
      if (SubAccount.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SubAccount);
      }
      if (Tomf != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Tomf);
      }
      withdrawMarginInquire_.WriteTo(output, _repeated_withdrawMarginInquire_codec);
      if (WithdrawMarginResult.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WithdrawMarginResult);
      }
      withdrawMarginCancel_.WriteTo(output, _repeated_withdrawMarginCancel_codec);
      transferMarginResult_.WriteTo(output, _repeated_transferMarginResult_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Idendity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idendity);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (BrokerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerID);
      }
      if (Fepqueryflag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Fepqueryflag);
      }
      if (equity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equity);
      }
      size += positions_.CalculateSize(_repeated_positions_codec);
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (ErrorMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
      }
      if (IbNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IbNo);
      }
      if (SubAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubAccount);
      }
      if (Tomf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tomf);
      }
      size += withdrawMarginInquire_.CalculateSize(_repeated_withdrawMarginInquire_codec);
      if (WithdrawMarginResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WithdrawMarginResult);
      }
      size += withdrawMarginCancel_.CalculateSize(_repeated_withdrawMarginCancel_codec);
      size += transferMarginResult_.CalculateSize(_repeated_transferMarginResult_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FEPResult other) {
      if (other == null) {
        return;
      }
      if (other.Idendity.Length != 0) {
        Idendity = other.Idendity;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.BrokerID.Length != 0) {
        BrokerID = other.BrokerID;
      }
      if (other.Fepqueryflag != 0) {
        Fepqueryflag = other.Fepqueryflag;
      }
      if (other.equity_ != null) {
        if (equity_ == null) {
          equity_ = new global::Jsunfutures.Messages.Equity();
        }
        Equity.MergeFrom(other.Equity);
      }
      positions_.Add(other.positions_);
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorMsg.Length != 0) {
        ErrorMsg = other.ErrorMsg;
      }
      if (other.IbNo.Length != 0) {
        IbNo = other.IbNo;
      }
      if (other.SubAccount.Length != 0) {
        SubAccount = other.SubAccount;
      }
      if (other.Tomf != 0) {
        Tomf = other.Tomf;
      }
      withdrawMarginInquire_.Add(other.withdrawMarginInquire_);
      if (other.WithdrawMarginResult.Length != 0) {
        WithdrawMarginResult = other.WithdrawMarginResult;
      }
      withdrawMarginCancel_.Add(other.withdrawMarginCancel_);
      transferMarginResult_.Add(other.transferMarginResult_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Idendity = input.ReadString();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            BrokerID = input.ReadString();
            break;
          }
          case 32: {
            fepqueryflag_ = (global::Jsunfutures.Messages.QueryFlag) input.ReadEnum();
            break;
          }
          case 42: {
            if (equity_ == null) {
              equity_ = new global::Jsunfutures.Messages.Equity();
            }
            input.ReadMessage(equity_);
            break;
          }
          case 50: {
            positions_.AddEntriesFrom(input, _repeated_positions_codec);
            break;
          }
          case 56: {
            errorCode_ = (global::Jsunfutures.Messages.FEPResultErrorCode) input.ReadEnum();
            break;
          }
          case 66: {
            ErrorMsg = input.ReadString();
            break;
          }
          case 74: {
            IbNo = input.ReadString();
            break;
          }
          case 82: {
            SubAccount = input.ReadString();
            break;
          }
          case 88: {
            tomf_ = (global::Jsunfutures.Messages.TandemOrderMarketFlag) input.ReadEnum();
            break;
          }
          case 98: {
            withdrawMarginInquire_.AddEntriesFrom(input, _repeated_withdrawMarginInquire_codec);
            break;
          }
          case 106: {
            WithdrawMarginResult = input.ReadString();
            break;
          }
          case 114: {
            withdrawMarginCancel_.AddEntriesFrom(input, _repeated_withdrawMarginCancel_codec);
            break;
          }
          case 122: {
            transferMarginResult_.AddEntriesFrom(input, _repeated_transferMarginResult_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      idendity_ = other.idendity_;
      account_ = other.account_;
      iD_ = other.iD_;
      qf_ = other.qf_;
      exchange_ = other.exchange_;
      errorCode_ = other.errorCode_;
      errorMsg_ = other.errorMsg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "idendity" field.</summary>
    public const int IdendityFieldNumber = 1;
    private string idendity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idendity {
      get { return idendity_; }
      set {
        idendity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 3;
    private string iD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qf" field.</summary>
    public const int QfFieldNumber = 4;
    private global::Jsunfutures.Messages.QueryFlag qf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.QueryFlag Qf {
      get { return qf_; }
      set {
        qf_ = value;
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 5;
    private global::Jsunfutures.Messages.ExchangeFlag exchange_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ExchangeFlag Exchange {
      get { return exchange_; }
      set {
        exchange_ = value;
      }
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 6;
    private string errorCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ErrorMsg" field.</summary>
    public const int ErrorMsgFieldNumber = 7;
    private string errorMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMsg {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idendity != other.Idendity) return false;
      if (Account != other.Account) return false;
      if (ID != other.ID) return false;
      if (Qf != other.Qf) return false;
      if (Exchange != other.Exchange) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMsg != other.ErrorMsg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Idendity.Length != 0) hash ^= Idendity.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (Qf != 0) hash ^= Qf.GetHashCode();
      if (Exchange != 0) hash ^= Exchange.GetHashCode();
      if (ErrorCode.Length != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Idendity.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Idendity);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (ID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ID);
      }
      if (Qf != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Qf);
      }
      if (Exchange != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Exchange);
      }
      if (ErrorCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ErrorCode);
      }
      if (ErrorMsg.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ErrorMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Idendity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idendity);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (Qf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Qf);
      }
      if (Exchange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Exchange);
      }
      if (ErrorCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
      }
      if (ErrorMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Idendity.Length != 0) {
        Idendity = other.Idendity;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.Qf != 0) {
        Qf = other.Qf;
      }
      if (other.Exchange != 0) {
        Exchange = other.Exchange;
      }
      if (other.ErrorCode.Length != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorMsg.Length != 0) {
        ErrorMsg = other.ErrorMsg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Idendity = input.ReadString();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            ID = input.ReadString();
            break;
          }
          case 32: {
            qf_ = (global::Jsunfutures.Messages.QueryFlag) input.ReadEnum();
            break;
          }
          case 40: {
            exchange_ = (global::Jsunfutures.Messages.ExchangeFlag) input.ReadEnum();
            break;
          }
          case 50: {
            ErrorCode = input.ReadString();
            break;
          }
          case 58: {
            ErrorMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      bS_ = other.bS_;
      symbol_ = other.symbol_;
      exchangeFlag_ = other.exchangeFlag_;
      exchangeRate_ = other.exchangeRate_;
      marketflag_ = other.marketflag_;
      bAvgPrice_ = other.bAvgPrice_;
      bTotalQty_ = other.bTotalQty_;
      sAvgPrice_ = other.sAvgPrice_;
      sTotalQty_ = other.sTotalQty_;
      currency_ = other.currency_;
      optionflag_ = other.optionflag_;
      yyyyMM_ = other.yyyyMM_;
      strikePrice_ = other.strikePrice_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "BS" field.</summary>
    public const int BSFieldNumber = 1;
    private global::Jsunfutures.Messages.BS bS_ = 0;
    /// <summary>
    ///買方或賣方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.BS BS {
      get { return bS_; }
      set {
        bS_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    /// <summary>
    ///商品代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange_flag" field.</summary>
    public const int ExchangeFlagFieldNumber = 3;
    private global::Jsunfutures.Messages.ExchangeFlag exchangeFlag_ = 0;
    /// <summary>
    ///交易所
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ExchangeFlag ExchangeFlag {
      get { return exchangeFlag_; }
      set {
        exchangeFlag_ = value;
      }
    }

    /// <summary>Field number for the "ExchangeRate" field.</summary>
    public const int ExchangeRateFieldNumber = 4;
    private double exchangeRate_;
    /// <summary>
    ///匯率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExchangeRate {
      get { return exchangeRate_; }
      set {
        exchangeRate_ = value;
      }
    }

    /// <summary>Field number for the "Marketflag" field.</summary>
    public const int MarketflagFieldNumber = 5;
    private global::Jsunfutures.Messages.MarketFlag marketflag_ = 0;
    /// <summary>
    ///商品別  //1_期貨,2_選擇權,3_複式選擇權,4_期貨價差交易
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.MarketFlag Marketflag {
      get { return marketflag_; }
      set {
        marketflag_ = value;
      }
    }

    /// <summary>Field number for the "B_AvgPrice" field.</summary>
    public const int BAvgPriceFieldNumber = 6;
    private double bAvgPrice_;
    /// <summary>
    ///買方成交價格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BAvgPrice {
      get { return bAvgPrice_; }
      set {
        bAvgPrice_ = value;
      }
    }

    /// <summary>Field number for the "B_TotalQty" field.</summary>
    public const int BTotalQtyFieldNumber = 7;
    private int bTotalQty_;
    /// <summary>
    ///買方總量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BTotalQty {
      get { return bTotalQty_; }
      set {
        bTotalQty_ = value;
      }
    }

    /// <summary>Field number for the "S_AvgPrice" field.</summary>
    public const int SAvgPriceFieldNumber = 8;
    private double sAvgPrice_;
    /// <summary>
    ///賣方成交價格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SAvgPrice {
      get { return sAvgPrice_; }
      set {
        sAvgPrice_ = value;
      }
    }

    /// <summary>Field number for the "S_TotalQty" field.</summary>
    public const int STotalQtyFieldNumber = 9;
    private int sTotalQty_;
    /// <summary>
    ///賣方總量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int STotalQty {
      get { return sTotalQty_; }
      set {
        sTotalQty_ = value;
      }
    }

    /// <summary>Field number for the "Currency" field.</summary>
    public const int CurrencyFieldNumber = 10;
    private global::Jsunfutures.Messages.Currency currency_ = 0;
    /// <summary>
    ///幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Currency Currency {
      get { return currency_; }
      set {
        currency_ = value;
      }
    }

    /// <summary>Field number for the "optionflag" field.</summary>
    public const int OptionflagFieldNumber = 11;
    private global::Jsunfutures.Messages.OptionFlag optionflag_ = 0;
    /// <summary>
    ///買賣權
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.OptionFlag Optionflag {
      get { return optionflag_; }
      set {
        optionflag_ = value;
      }
    }

    /// <summary>Field number for the "yyyyMM" field.</summary>
    public const int YyyyMMFieldNumber = 12;
    private int yyyyMM_;
    /// <summary>
    ///商品年月
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YyyyMM {
      get { return yyyyMM_; }
      set {
        yyyyMM_ = value;
      }
    }

    /// <summary>Field number for the "StrikePrice" field.</summary>
    public const int StrikePriceFieldNumber = 13;
    private double strikePrice_;
    /// <summary>
    ///履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StrikePrice {
      get { return strikePrice_; }
      set {
        strikePrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BS != other.BS) return false;
      if (Symbol != other.Symbol) return false;
      if (ExchangeFlag != other.ExchangeFlag) return false;
      if (ExchangeRate != other.ExchangeRate) return false;
      if (Marketflag != other.Marketflag) return false;
      if (BAvgPrice != other.BAvgPrice) return false;
      if (BTotalQty != other.BTotalQty) return false;
      if (SAvgPrice != other.SAvgPrice) return false;
      if (STotalQty != other.STotalQty) return false;
      if (Currency != other.Currency) return false;
      if (Optionflag != other.Optionflag) return false;
      if (YyyyMM != other.YyyyMM) return false;
      if (StrikePrice != other.StrikePrice) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BS != 0) hash ^= BS.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (ExchangeFlag != 0) hash ^= ExchangeFlag.GetHashCode();
      if (ExchangeRate != 0D) hash ^= ExchangeRate.GetHashCode();
      if (Marketflag != 0) hash ^= Marketflag.GetHashCode();
      if (BAvgPrice != 0D) hash ^= BAvgPrice.GetHashCode();
      if (BTotalQty != 0) hash ^= BTotalQty.GetHashCode();
      if (SAvgPrice != 0D) hash ^= SAvgPrice.GetHashCode();
      if (STotalQty != 0) hash ^= STotalQty.GetHashCode();
      if (Currency != 0) hash ^= Currency.GetHashCode();
      if (Optionflag != 0) hash ^= Optionflag.GetHashCode();
      if (YyyyMM != 0) hash ^= YyyyMM.GetHashCode();
      if (StrikePrice != 0D) hash ^= StrikePrice.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BS != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BS);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (ExchangeFlag != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ExchangeFlag);
      }
      if (ExchangeRate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(ExchangeRate);
      }
      if (Marketflag != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Marketflag);
      }
      if (BAvgPrice != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(BAvgPrice);
      }
      if (BTotalQty != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BTotalQty);
      }
      if (SAvgPrice != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(SAvgPrice);
      }
      if (STotalQty != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(STotalQty);
      }
      if (Currency != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Currency);
      }
      if (Optionflag != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Optionflag);
      }
      if (YyyyMM != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(YyyyMM);
      }
      if (StrikePrice != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(StrikePrice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BS);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (ExchangeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExchangeFlag);
      }
      if (ExchangeRate != 0D) {
        size += 1 + 8;
      }
      if (Marketflag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Marketflag);
      }
      if (BAvgPrice != 0D) {
        size += 1 + 8;
      }
      if (BTotalQty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BTotalQty);
      }
      if (SAvgPrice != 0D) {
        size += 1 + 8;
      }
      if (STotalQty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(STotalQty);
      }
      if (Currency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Currency);
      }
      if (Optionflag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Optionflag);
      }
      if (YyyyMM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YyyyMM);
      }
      if (StrikePrice != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.BS != 0) {
        BS = other.BS;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.ExchangeFlag != 0) {
        ExchangeFlag = other.ExchangeFlag;
      }
      if (other.ExchangeRate != 0D) {
        ExchangeRate = other.ExchangeRate;
      }
      if (other.Marketflag != 0) {
        Marketflag = other.Marketflag;
      }
      if (other.BAvgPrice != 0D) {
        BAvgPrice = other.BAvgPrice;
      }
      if (other.BTotalQty != 0) {
        BTotalQty = other.BTotalQty;
      }
      if (other.SAvgPrice != 0D) {
        SAvgPrice = other.SAvgPrice;
      }
      if (other.STotalQty != 0) {
        STotalQty = other.STotalQty;
      }
      if (other.Currency != 0) {
        Currency = other.Currency;
      }
      if (other.Optionflag != 0) {
        Optionflag = other.Optionflag;
      }
      if (other.YyyyMM != 0) {
        YyyyMM = other.YyyyMM;
      }
      if (other.StrikePrice != 0D) {
        StrikePrice = other.StrikePrice;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bS_ = (global::Jsunfutures.Messages.BS) input.ReadEnum();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            exchangeFlag_ = (global::Jsunfutures.Messages.ExchangeFlag) input.ReadEnum();
            break;
          }
          case 33: {
            ExchangeRate = input.ReadDouble();
            break;
          }
          case 40: {
            marketflag_ = (global::Jsunfutures.Messages.MarketFlag) input.ReadEnum();
            break;
          }
          case 49: {
            BAvgPrice = input.ReadDouble();
            break;
          }
          case 56: {
            BTotalQty = input.ReadInt32();
            break;
          }
          case 65: {
            SAvgPrice = input.ReadDouble();
            break;
          }
          case 72: {
            STotalQty = input.ReadInt32();
            break;
          }
          case 80: {
            currency_ = (global::Jsunfutures.Messages.Currency) input.ReadEnum();
            break;
          }
          case 88: {
            optionflag_ = (global::Jsunfutures.Messages.OptionFlag) input.ReadEnum();
            break;
          }
          case 96: {
            YyyyMM = input.ReadInt32();
            break;
          }
          case 105: {
            StrikePrice = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Equity : pb::IMessage<Equity> {
    private static readonly pb::MessageParser<Equity> _parser = new pb::MessageParser<Equity>(() => new Equity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Equity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equity(Equity other) : this() {
      wRMAINTAINRATE_ = other.wRMAINTAINRATE_;
      wRACCOUNTEQUITY_ = other.wRACCOUNTEQUITY_;
      wRINOUTAMT_ = other.wRINOUTAMT_;
      wRUSABLEMARGIN_ = other.wRUSABLEMARGIN_;
      wRCOVERINCOME_ = other.wRCOVERINCOME_;
      wRINITIALMARGIN_ = other.wRINITIALMARGIN_;
      wRMAINTAINMARGIN_ = other.wRMAINTAINMARGIN_;
      wRVARINCOME_ = other.wRVARINCOME_;
      wRACCOUNTBALANCE_ = other.wRACCOUNTBALANCE_;
      wRREALIZEPREMIUN_ = other.wRREALIZEPREMIUN_;
      wRUNREALIZEPREMIUM_ = other.wRUNREALIZEPREMIUM_;
      wRBOPTIONVALUE_ = other.wRBOPTIONVALUE_;
      wRSOPTIONVALUE_ = other.wRSOPTIONVALUE_;
      wRYESEQU_ = other.wRYESEQU_;
      wRYESACCOUNTBALANCE_ = other.wRYESACCOUNTBALANCE_;
      wRTODAYTOT_ = other.wRTODAYTOT_;
      wRTODAYTAX_ = other.wRTODAYTAX_;
      wREQUITY_ = other.wREQUITY_;
      wRRISKRATE_ = other.wRRISKRATE_;
      wRCOVERRATE_ = other.wRCOVERRATE_;
      wRFULLMARGIN_ = other.wRFULLMARGIN_;
      wRFULLMAINTAINMARGIN_ = other.wRFULLMAINTAINMARGIN_;
      wRFULLUSABLEMARGIN_ = other.wRFULLUSABLEMARGIN_;
      wRFULLRATE_ = other.wRFULLRATE_;
      wRFULLRISKRATE_ = other.wRFULLRISKRATE_;
      wRDAYTRADEFLAG_ = other.wRDAYTRADEFLAG_;
      wRIOPFLAG_ = other.wRIOPFLAG_;
      wRYESTOTEQUITY_ = other.wRYESTOTEQUITY_;
      wRIBNO_ = other.wRIBNO_;
      wRCOVEREDAMT_ = other.wRCOVEREDAMT_;
      wRADDMARGIN_ = other.wRADDMARGIN_;
      wRCASHUSABLE_ = other.wRCASHUSABLE_;
      wRFULLCASHUSABLE_ = other.wRFULLCASHUSABLE_;
      wRUNREALIZEDINCOME_ = other.wRUNREALIZEDINCOME_;
      wROINITIALMARGIN_ = other.wROINITIALMARGIN_;
      wROMAINTAINMARGIN_ = other.wROMAINTAINMARGIN_;
      wROFULLINITIALMARGIN_ = other.wROFULLINITIALMARGIN_;
      wROFULLMAINTAINMARGIN_ = other.wROFULLMAINTAINMARGIN_;
      wRADDITIONMARGIN_ = other.wRADDITIONMARGIN_;
      wRNOMARGIN_ = other.wRNOMARGIN_;
      wRPROMPTAMT_ = other.wRPROMPTAMT_;
      wRBPOPTIONVALUE_ = other.wRBPOPTIONVALUE_;
      wRSPOPTIONVALUE_ = other.wRSPOPTIONVALUE_;
      wRBCOPTIONVALUE_ = other.wRBCOPTIONVALUE_;
      wRSCOPTIONVALUE_ = other.wRSCOPTIONVALUE_;
      wRADDITIONMARGINRATE_ = other.wRADDITIONMARGINRATE_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equity Clone() {
      return new Equity(this);
    }

    /// <summary>Field number for the "WR_MAINTAIN_RATE" field.</summary>
    public const int WRMAINTAINRATEFieldNumber = 1;
    private string wRMAINTAINRATE_ = "";
    /// <summary>
    ///維持率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRMAINTAINRATE {
      get { return wRMAINTAINRATE_; }
      set {
        wRMAINTAINRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_ACCOUNT_EQUITY" field.</summary>
    public const int WRACCOUNTEQUITYFieldNumber = 2;
    private double wRACCOUNTEQUITY_;
    /// <summary>
    ///帳戶權益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRACCOUNTEQUITY {
      get { return wRACCOUNTEQUITY_; }
      set {
        wRACCOUNTEQUITY_ = value;
      }
    }

    /// <summary>Field number for the "WR_IN_OUT_AMT" field.</summary>
    public const int WRINOUTAMTFieldNumber = 3;
    private double wRINOUTAMT_;
    /// <summary>
    ///今日存提款
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRINOUTAMT {
      get { return wRINOUTAMT_; }
      set {
        wRINOUTAMT_ = value;
      }
    }

    /// <summary>Field number for the "WR_USABLE_MARGIN" field.</summary>
    public const int WRUSABLEMARGINFieldNumber = 4;
    private double wRUSABLEMARGIN_;
    /// <summary>
    ///可用餘額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRUSABLEMARGIN {
      get { return wRUSABLEMARGIN_; }
      set {
        wRUSABLEMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_COVER_INCOME" field.</summary>
    public const int WRCOVERINCOMEFieldNumber = 5;
    private double wRCOVERINCOME_;
    /// <summary>
    ///平倉損益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRCOVERINCOME {
      get { return wRCOVERINCOME_; }
      set {
        wRCOVERINCOME_ = value;
      }
    }

    /// <summary>Field number for the "WR_INITIAL_MARGIN" field.</summary>
    public const int WRINITIALMARGINFieldNumber = 6;
    private double wRINITIALMARGIN_;
    /// <summary>
    ///原始保証金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRINITIALMARGIN {
      get { return wRINITIALMARGIN_; }
      set {
        wRINITIALMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_MAINTAIN_MARGIN" field.</summary>
    public const int WRMAINTAINMARGINFieldNumber = 7;
    private double wRMAINTAINMARGIN_;
    /// <summary>
    ///維持保証金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRMAINTAINMARGIN {
      get { return wRMAINTAINMARGIN_; }
      set {
        wRMAINTAINMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_VAR_INCOME" field.</summary>
    public const int WRVARINCOMEFieldNumber = 8;
    private double wRVARINCOME_;
    /// <summary>
    ///浮動損益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRVARINCOME {
      get { return wRVARINCOME_; }
      set {
        wRVARINCOME_ = value;
      }
    }

    /// <summary>Field number for the "WR_ACCOUNT_BALANCE" field.</summary>
    public const int WRACCOUNTBALANCEFieldNumber = 9;
    private double wRACCOUNTBALANCE_;
    /// <summary>
    ///帳戶餘額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRACCOUNTBALANCE {
      get { return wRACCOUNTBALANCE_; }
      set {
        wRACCOUNTBALANCE_ = value;
      }
    }

    /// <summary>Field number for the "WR_REALIZE_PREMIUN" field.</summary>
    public const int WRREALIZEPREMIUNFieldNumber = 10;
    private double wRREALIZEPREMIUN_;
    /// <summary>
    ///權利金收入與支出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRREALIZEPREMIUN {
      get { return wRREALIZEPREMIUN_; }
      set {
        wRREALIZEPREMIUN_ = value;
      }
    }

    /// <summary>Field number for the "WR_UNREALIZE_PREMIUM" field.</summary>
    public const int WRUNREALIZEPREMIUMFieldNumber = 11;
    private double wRUNREALIZEPREMIUM_;
    /// <summary>
    ///預扣權利金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRUNREALIZEPREMIUM {
      get { return wRUNREALIZEPREMIUM_; }
      set {
        wRUNREALIZEPREMIUM_ = value;
      }
    }

    /// <summary>Field number for the "WR_B_OPTION_VALUE" field.</summary>
    public const int WRBOPTIONVALUEFieldNumber = 12;
    private double wRBOPTIONVALUE_;
    /// <summary>
    ///買方市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRBOPTIONVALUE {
      get { return wRBOPTIONVALUE_; }
      set {
        wRBOPTIONVALUE_ = value;
      }
    }

    /// <summary>Field number for the "WR_S_OPTION_VALUE" field.</summary>
    public const int WRSOPTIONVALUEFieldNumber = 13;
    private double wRSOPTIONVALUE_;
    /// <summary>
    ///賣方市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRSOPTIONVALUE {
      get { return wRSOPTIONVALUE_; }
      set {
        wRSOPTIONVALUE_ = value;
      }
    }

    /// <summary>Field number for the "WR_YES_EQU" field.</summary>
    public const int WRYESEQUFieldNumber = 14;
    private double wRYESEQU_;
    /// <summary>
    ///前日權益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRYESEQU {
      get { return wRYESEQU_; }
      set {
        wRYESEQU_ = value;
      }
    }

    /// <summary>Field number for the "WR_YES_ACCOUNT_BALANCE" field.</summary>
    public const int WRYESACCOUNTBALANCEFieldNumber = 15;
    private double wRYESACCOUNTBALANCE_;
    /// <summary>
    ///前日帳戶餘額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRYESACCOUNTBALANCE {
      get { return wRYESACCOUNTBALANCE_; }
      set {
        wRYESACCOUNTBALANCE_ = value;
      }
    }

    /// <summary>Field number for the "WR_TODAY_TOT" field.</summary>
    public const int WRTODAYTOTFieldNumber = 16;
    private double wRTODAYTOT_;
    /// <summary>
    ///今日總手續費
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRTODAYTOT {
      get { return wRTODAYTOT_; }
      set {
        wRTODAYTOT_ = value;
      }
    }

    /// <summary>Field number for the "WR_TODAY_TAX" field.</summary>
    public const int WRTODAYTAXFieldNumber = 17;
    private double wRTODAYTAX_;
    /// <summary>
    ///今日總交易稅
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRTODAYTAX {
      get { return wRTODAYTAX_; }
      set {
        wRTODAYTAX_ = value;
      }
    }

    /// <summary>Field number for the "WR_EQUITY" field.</summary>
    public const int WREQUITYFieldNumber = 18;
    private double wREQUITY_;
    /// <summary>
    ///權益總值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WREQUITY {
      get { return wREQUITY_; }
      set {
        wREQUITY_ = value;
      }
    }

    /// <summary>Field number for the "WR_RISK_RATE" field.</summary>
    public const int WRRISKRATEFieldNumber = 19;
    private string wRRISKRATE_ = "";
    /// <summary>
    ///風險指標(總權益維持率)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRRISKRATE {
      get { return wRRISKRATE_; }
      set {
        wRRISKRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_COVER_RATE" field.</summary>
    public const int WRCOVERRATEFieldNumber = 20;
    private double wRCOVERRATE_;
    /// <summary>
    ///浮動報酬率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRCOVERRATE {
      get { return wRCOVERRATE_; }
      set {
        wRCOVERRATE_ = value;
      }
    }

    /// <summary>Field number for the "WR_FULL_MARGIN" field.</summary>
    public const int WRFULLMARGINFieldNumber = 21;
    private double wRFULLMARGIN_;
    /// <summary>
    ///足額原始保証金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRFULLMARGIN {
      get { return wRFULLMARGIN_; }
      set {
        wRFULLMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_FULL_MAINTAIN_MARGIN" field.</summary>
    public const int WRFULLMAINTAINMARGINFieldNumber = 22;
    private double wRFULLMAINTAINMARGIN_;
    /// <summary>
    ///足額維持保証金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRFULLMAINTAINMARGIN {
      get { return wRFULLMAINTAINMARGIN_; }
      set {
        wRFULLMAINTAINMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_FULL_USABLE_MARGIN" field.</summary>
    public const int WRFULLUSABLEMARGINFieldNumber = 23;
    private double wRFULLUSABLEMARGIN_;
    /// <summary>
    ///足額可用餘額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRFULLUSABLEMARGIN {
      get { return wRFULLUSABLEMARGIN_; }
      set {
        wRFULLUSABLEMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_FULL_RATE" field.</summary>
    public const int WRFULLRATEFieldNumber = 24;
    private string wRFULLRATE_ = "";
    /// <summary>
    ///足額維持率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRFULLRATE {
      get { return wRFULLRATE_; }
      set {
        wRFULLRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_FULL_RISK_RATE" field.</summary>
    public const int WRFULLRISKRATEFieldNumber = 25;
    private string wRFULLRISKRATE_ = "";
    /// <summary>
    ///足額總權益維持率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRFULLRISKRATE {
      get { return wRFULLRISKRATE_; }
      set {
        wRFULLRISKRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_DAY_TRADE_FLAG" field.</summary>
    public const int WRDAYTRADEFLAGFieldNumber = 26;
    private string wRDAYTRADEFLAG_ = "";
    /// <summary>
    ///當沖未平倉註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRDAYTRADEFLAG {
      get { return wRDAYTRADEFLAG_; }
      set {
        wRDAYTRADEFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_IOP_FLAG" field.</summary>
    public const int WRIOPFLAGFieldNumber = 27;
    private string wRIOPFLAG_ = "";
    /// <summary>
    ///最佳化註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRIOPFLAG {
      get { return wRIOPFLAG_; }
      set {
        wRIOPFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_YES_TOT_EQUITY" field.</summary>
    public const int WRYESTOTEQUITYFieldNumber = 28;
    private double wRYESTOTEQUITY_;
    /// <summary>
    ///昨日權益總市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRYESTOTEQUITY {
      get { return wRYESTOTEQUITY_; }
      set {
        wRYESTOTEQUITY_ = value;
      }
    }

    /// <summary>Field number for the "WR_IB_NO" field.</summary>
    public const int WRIBNOFieldNumber = 29;
    private string wRIBNO_ = "";
    /// <summary>
    /// IB代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRIBNO {
      get { return wRIBNO_; }
      set {
        wRIBNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_COVERED_AMT" field.</summary>
    public const int WRCOVEREDAMTFieldNumber = 30;
    private double wRCOVEREDAMT_;
    /// <summary>
    ///有價證券抵繳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRCOVEREDAMT {
      get { return wRCOVEREDAMT_; }
      set {
        wRCOVEREDAMT_ = value;
      }
    }

    /// <summary>Field number for the "WR_ADD_MARGIN" field.</summary>
    public const int WRADDMARGINFieldNumber = 31;
    private double wRADDMARGIN_;
    /// <summary>
    ///有價可用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRADDMARGIN {
      get { return wRADDMARGIN_; }
      set {
        wRADDMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_CASH_USABLE" field.</summary>
    public const int WRCASHUSABLEFieldNumber = 32;
    private double wRCASHUSABLE_;
    /// <summary>
    ///現金可用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRCASHUSABLE {
      get { return wRCASHUSABLE_; }
      set {
        wRCASHUSABLE_ = value;
      }
    }

    /// <summary>Field number for the "WR_FULL_CASH_USABLE" field.</summary>
    public const int WRFULLCASHUSABLEFieldNumber = 33;
    private double wRFULLCASHUSABLE_;
    /// <summary>
    ///足額現金可用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRFULLCASHUSABLE {
      get { return wRFULLCASHUSABLE_; }
      set {
        wRFULLCASHUSABLE_ = value;
      }
    }

    /// <summary>Field number for the "WR_UNREALIZED_INCOME" field.</summary>
    public const int WRUNREALIZEDINCOMEFieldNumber = 34;
    private double wRUNREALIZEDINCOME_;
    /// <summary>
    ///未實現利得
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRUNREALIZEDINCOME {
      get { return wRUNREALIZEDINCOME_; }
      set {
        wRUNREALIZEDINCOME_ = value;
      }
    }

    /// <summary>Field number for the "WR_O_INITIAL_MARGIN" field.</summary>
    public const int WROINITIALMARGINFieldNumber = 35;
    private double wROINITIALMARGIN_;
    /// <summary>
    ///委託原始保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WROINITIALMARGIN {
      get { return wROINITIALMARGIN_; }
      set {
        wROINITIALMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_O_MAINTAIN_MARGIN" field.</summary>
    public const int WROMAINTAINMARGINFieldNumber = 36;
    private double wROMAINTAINMARGIN_;
    /// <summary>
    ///委託維持保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WROMAINTAINMARGIN {
      get { return wROMAINTAINMARGIN_; }
      set {
        wROMAINTAINMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_O_FULL_INITIAL_MARGIN" field.</summary>
    public const int WROFULLINITIALMARGINFieldNumber = 37;
    private double wROFULLINITIALMARGIN_;
    /// <summary>
    ///委託足額原始保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WROFULLINITIALMARGIN {
      get { return wROFULLINITIALMARGIN_; }
      set {
        wROFULLINITIALMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_O_FULL_MAINTAIN_MARGIN" field.</summary>
    public const int WROFULLMAINTAINMARGINFieldNumber = 38;
    private double wROFULLMAINTAINMARGIN_;
    /// <summary>
    ///委託足額維持保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WROFULLMAINTAINMARGIN {
      get { return wROFULLMAINTAINMARGIN_; }
      set {
        wROFULLMAINTAINMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_ADDITION_MARGIN" field.</summary>
    public const int WRADDITIONMARGINFieldNumber = 39;
    private double wRADDITIONMARGIN_;
    /// <summary>
    ///加收保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRADDITIONMARGIN {
      get { return wRADDITIONMARGIN_; }
      set {
        wRADDITIONMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_NO_MARGIN" field.</summary>
    public const int WRNOMARGINFieldNumber = 40;
    private double wRNOMARGIN_;
    /// <summary>
    ///超額/追繳保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRNOMARGIN {
      get { return wRNOMARGIN_; }
      set {
        wRNOMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_PROMPT_AMT" field.</summary>
    public const int WRPROMPTAMTFieldNumber = 41;
    private double wRPROMPTAMT_;
    /// <summary>
    ///到期履約損益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRPROMPTAMT {
      get { return wRPROMPTAMT_; }
      set {
        wRPROMPTAMT_ = value;
      }
    }

    /// <summary>Field number for the "WR_BP_OPTION_VALUE" field.</summary>
    public const int WRBPOPTIONVALUEFieldNumber = 42;
    private double wRBPOPTIONVALUE_;
    /// <summary>
    ///未沖銷賣權買方選擇權市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRBPOPTIONVALUE {
      get { return wRBPOPTIONVALUE_; }
      set {
        wRBPOPTIONVALUE_ = value;
      }
    }

    /// <summary>Field number for the "WR_SP_OPTION_VALUE" field.</summary>
    public const int WRSPOPTIONVALUEFieldNumber = 43;
    private double wRSPOPTIONVALUE_;
    /// <summary>
    ///未沖銷賣權賣方選擇權市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRSPOPTIONVALUE {
      get { return wRSPOPTIONVALUE_; }
      set {
        wRSPOPTIONVALUE_ = value;
      }
    }

    /// <summary>Field number for the "WR_BC_OPTION_VALUE" field.</summary>
    public const int WRBCOPTIONVALUEFieldNumber = 44;
    private double wRBCOPTIONVALUE_;
    /// <summary>
    ///未沖銷買權買方選擇權市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRBCOPTIONVALUE {
      get { return wRBCOPTIONVALUE_; }
      set {
        wRBCOPTIONVALUE_ = value;
      }
    }

    /// <summary>Field number for the "WR_SC_OPTION_VALUE" field.</summary>
    public const int WRSCOPTIONVALUEFieldNumber = 45;
    private double wRSCOPTIONVALUE_;
    /// <summary>
    ///未沖銷買權賣方選擇權市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRSCOPTIONVALUE {
      get { return wRSCOPTIONVALUE_; }
      set {
        wRSCOPTIONVALUE_ = value;
      }
    }

    /// <summary>Field number for the "WR_ADDITION_MARGIN_RATE" field.</summary>
    public const int WRADDITIONMARGINRATEFieldNumber = 46;
    private double wRADDITIONMARGINRATE_;
    /// <summary>
    ///加收保證金指標
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRADDITIONMARGINRATE {
      get { return wRADDITIONMARGINRATE_; }
      set {
        wRADDITIONMARGINRATE_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Equity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Equity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WRMAINTAINRATE != other.WRMAINTAINRATE) return false;
      if (WRACCOUNTEQUITY != other.WRACCOUNTEQUITY) return false;
      if (WRINOUTAMT != other.WRINOUTAMT) return false;
      if (WRUSABLEMARGIN != other.WRUSABLEMARGIN) return false;
      if (WRCOVERINCOME != other.WRCOVERINCOME) return false;
      if (WRINITIALMARGIN != other.WRINITIALMARGIN) return false;
      if (WRMAINTAINMARGIN != other.WRMAINTAINMARGIN) return false;
      if (WRVARINCOME != other.WRVARINCOME) return false;
      if (WRACCOUNTBALANCE != other.WRACCOUNTBALANCE) return false;
      if (WRREALIZEPREMIUN != other.WRREALIZEPREMIUN) return false;
      if (WRUNREALIZEPREMIUM != other.WRUNREALIZEPREMIUM) return false;
      if (WRBOPTIONVALUE != other.WRBOPTIONVALUE) return false;
      if (WRSOPTIONVALUE != other.WRSOPTIONVALUE) return false;
      if (WRYESEQU != other.WRYESEQU) return false;
      if (WRYESACCOUNTBALANCE != other.WRYESACCOUNTBALANCE) return false;
      if (WRTODAYTOT != other.WRTODAYTOT) return false;
      if (WRTODAYTAX != other.WRTODAYTAX) return false;
      if (WREQUITY != other.WREQUITY) return false;
      if (WRRISKRATE != other.WRRISKRATE) return false;
      if (WRCOVERRATE != other.WRCOVERRATE) return false;
      if (WRFULLMARGIN != other.WRFULLMARGIN) return false;
      if (WRFULLMAINTAINMARGIN != other.WRFULLMAINTAINMARGIN) return false;
      if (WRFULLUSABLEMARGIN != other.WRFULLUSABLEMARGIN) return false;
      if (WRFULLRATE != other.WRFULLRATE) return false;
      if (WRFULLRISKRATE != other.WRFULLRISKRATE) return false;
      if (WRDAYTRADEFLAG != other.WRDAYTRADEFLAG) return false;
      if (WRIOPFLAG != other.WRIOPFLAG) return false;
      if (WRYESTOTEQUITY != other.WRYESTOTEQUITY) return false;
      if (WRIBNO != other.WRIBNO) return false;
      if (WRCOVEREDAMT != other.WRCOVEREDAMT) return false;
      if (WRADDMARGIN != other.WRADDMARGIN) return false;
      if (WRCASHUSABLE != other.WRCASHUSABLE) return false;
      if (WRFULLCASHUSABLE != other.WRFULLCASHUSABLE) return false;
      if (WRUNREALIZEDINCOME != other.WRUNREALIZEDINCOME) return false;
      if (WROINITIALMARGIN != other.WROINITIALMARGIN) return false;
      if (WROMAINTAINMARGIN != other.WROMAINTAINMARGIN) return false;
      if (WROFULLINITIALMARGIN != other.WROFULLINITIALMARGIN) return false;
      if (WROFULLMAINTAINMARGIN != other.WROFULLMAINTAINMARGIN) return false;
      if (WRADDITIONMARGIN != other.WRADDITIONMARGIN) return false;
      if (WRNOMARGIN != other.WRNOMARGIN) return false;
      if (WRPROMPTAMT != other.WRPROMPTAMT) return false;
      if (WRBPOPTIONVALUE != other.WRBPOPTIONVALUE) return false;
      if (WRSPOPTIONVALUE != other.WRSPOPTIONVALUE) return false;
      if (WRBCOPTIONVALUE != other.WRBCOPTIONVALUE) return false;
      if (WRSCOPTIONVALUE != other.WRSCOPTIONVALUE) return false;
      if (WRADDITIONMARGINRATE != other.WRADDITIONMARGINRATE) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WRMAINTAINRATE.Length != 0) hash ^= WRMAINTAINRATE.GetHashCode();
      if (WRACCOUNTEQUITY != 0D) hash ^= WRACCOUNTEQUITY.GetHashCode();
      if (WRINOUTAMT != 0D) hash ^= WRINOUTAMT.GetHashCode();
      if (WRUSABLEMARGIN != 0D) hash ^= WRUSABLEMARGIN.GetHashCode();
      if (WRCOVERINCOME != 0D) hash ^= WRCOVERINCOME.GetHashCode();
      if (WRINITIALMARGIN != 0D) hash ^= WRINITIALMARGIN.GetHashCode();
      if (WRMAINTAINMARGIN != 0D) hash ^= WRMAINTAINMARGIN.GetHashCode();
      if (WRVARINCOME != 0D) hash ^= WRVARINCOME.GetHashCode();
      if (WRACCOUNTBALANCE != 0D) hash ^= WRACCOUNTBALANCE.GetHashCode();
      if (WRREALIZEPREMIUN != 0D) hash ^= WRREALIZEPREMIUN.GetHashCode();
      if (WRUNREALIZEPREMIUM != 0D) hash ^= WRUNREALIZEPREMIUM.GetHashCode();
      if (WRBOPTIONVALUE != 0D) hash ^= WRBOPTIONVALUE.GetHashCode();
      if (WRSOPTIONVALUE != 0D) hash ^= WRSOPTIONVALUE.GetHashCode();
      if (WRYESEQU != 0D) hash ^= WRYESEQU.GetHashCode();
      if (WRYESACCOUNTBALANCE != 0D) hash ^= WRYESACCOUNTBALANCE.GetHashCode();
      if (WRTODAYTOT != 0D) hash ^= WRTODAYTOT.GetHashCode();
      if (WRTODAYTAX != 0D) hash ^= WRTODAYTAX.GetHashCode();
      if (WREQUITY != 0D) hash ^= WREQUITY.GetHashCode();
      if (WRRISKRATE.Length != 0) hash ^= WRRISKRATE.GetHashCode();
      if (WRCOVERRATE != 0D) hash ^= WRCOVERRATE.GetHashCode();
      if (WRFULLMARGIN != 0D) hash ^= WRFULLMARGIN.GetHashCode();
      if (WRFULLMAINTAINMARGIN != 0D) hash ^= WRFULLMAINTAINMARGIN.GetHashCode();
      if (WRFULLUSABLEMARGIN != 0D) hash ^= WRFULLUSABLEMARGIN.GetHashCode();
      if (WRFULLRATE.Length != 0) hash ^= WRFULLRATE.GetHashCode();
      if (WRFULLRISKRATE.Length != 0) hash ^= WRFULLRISKRATE.GetHashCode();
      if (WRDAYTRADEFLAG.Length != 0) hash ^= WRDAYTRADEFLAG.GetHashCode();
      if (WRIOPFLAG.Length != 0) hash ^= WRIOPFLAG.GetHashCode();
      if (WRYESTOTEQUITY != 0D) hash ^= WRYESTOTEQUITY.GetHashCode();
      if (WRIBNO.Length != 0) hash ^= WRIBNO.GetHashCode();
      if (WRCOVEREDAMT != 0D) hash ^= WRCOVEREDAMT.GetHashCode();
      if (WRADDMARGIN != 0D) hash ^= WRADDMARGIN.GetHashCode();
      if (WRCASHUSABLE != 0D) hash ^= WRCASHUSABLE.GetHashCode();
      if (WRFULLCASHUSABLE != 0D) hash ^= WRFULLCASHUSABLE.GetHashCode();
      if (WRUNREALIZEDINCOME != 0D) hash ^= WRUNREALIZEDINCOME.GetHashCode();
      if (WROINITIALMARGIN != 0D) hash ^= WROINITIALMARGIN.GetHashCode();
      if (WROMAINTAINMARGIN != 0D) hash ^= WROMAINTAINMARGIN.GetHashCode();
      if (WROFULLINITIALMARGIN != 0D) hash ^= WROFULLINITIALMARGIN.GetHashCode();
      if (WROFULLMAINTAINMARGIN != 0D) hash ^= WROFULLMAINTAINMARGIN.GetHashCode();
      if (WRADDITIONMARGIN != 0D) hash ^= WRADDITIONMARGIN.GetHashCode();
      if (WRNOMARGIN != 0D) hash ^= WRNOMARGIN.GetHashCode();
      if (WRPROMPTAMT != 0D) hash ^= WRPROMPTAMT.GetHashCode();
      if (WRBPOPTIONVALUE != 0D) hash ^= WRBPOPTIONVALUE.GetHashCode();
      if (WRSPOPTIONVALUE != 0D) hash ^= WRSPOPTIONVALUE.GetHashCode();
      if (WRBCOPTIONVALUE != 0D) hash ^= WRBCOPTIONVALUE.GetHashCode();
      if (WRSCOPTIONVALUE != 0D) hash ^= WRSCOPTIONVALUE.GetHashCode();
      if (WRADDITIONMARGINRATE != 0D) hash ^= WRADDITIONMARGINRATE.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WRMAINTAINRATE.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WRMAINTAINRATE);
      }
      if (WRACCOUNTEQUITY != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(WRACCOUNTEQUITY);
      }
      if (WRINOUTAMT != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(WRINOUTAMT);
      }
      if (WRUSABLEMARGIN != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(WRUSABLEMARGIN);
      }
      if (WRCOVERINCOME != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(WRCOVERINCOME);
      }
      if (WRINITIALMARGIN != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(WRINITIALMARGIN);
      }
      if (WRMAINTAINMARGIN != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(WRMAINTAINMARGIN);
      }
      if (WRVARINCOME != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(WRVARINCOME);
      }
      if (WRACCOUNTBALANCE != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(WRACCOUNTBALANCE);
      }
      if (WRREALIZEPREMIUN != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(WRREALIZEPREMIUN);
      }
      if (WRUNREALIZEPREMIUM != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(WRUNREALIZEPREMIUM);
      }
      if (WRBOPTIONVALUE != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(WRBOPTIONVALUE);
      }
      if (WRSOPTIONVALUE != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(WRSOPTIONVALUE);
      }
      if (WRYESEQU != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(WRYESEQU);
      }
      if (WRYESACCOUNTBALANCE != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(WRYESACCOUNTBALANCE);
      }
      if (WRTODAYTOT != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(WRTODAYTOT);
      }
      if (WRTODAYTAX != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(WRTODAYTAX);
      }
      if (WREQUITY != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(WREQUITY);
      }
      if (WRRISKRATE.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(WRRISKRATE);
      }
      if (WRCOVERRATE != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(WRCOVERRATE);
      }
      if (WRFULLMARGIN != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(WRFULLMARGIN);
      }
      if (WRFULLMAINTAINMARGIN != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(WRFULLMAINTAINMARGIN);
      }
      if (WRFULLUSABLEMARGIN != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(WRFULLUSABLEMARGIN);
      }
      if (WRFULLRATE.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(WRFULLRATE);
      }
      if (WRFULLRISKRATE.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(WRFULLRISKRATE);
      }
      if (WRDAYTRADEFLAG.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(WRDAYTRADEFLAG);
      }
      if (WRIOPFLAG.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(WRIOPFLAG);
      }
      if (WRYESTOTEQUITY != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(WRYESTOTEQUITY);
      }
      if (WRIBNO.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(WRIBNO);
      }
      if (WRCOVEREDAMT != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(WRCOVEREDAMT);
      }
      if (WRADDMARGIN != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(WRADDMARGIN);
      }
      if (WRCASHUSABLE != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(WRCASHUSABLE);
      }
      if (WRFULLCASHUSABLE != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(WRFULLCASHUSABLE);
      }
      if (WRUNREALIZEDINCOME != 0D) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(WRUNREALIZEDINCOME);
      }
      if (WROINITIALMARGIN != 0D) {
        output.WriteRawTag(153, 2);
        output.WriteDouble(WROINITIALMARGIN);
      }
      if (WROMAINTAINMARGIN != 0D) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(WROMAINTAINMARGIN);
      }
      if (WROFULLINITIALMARGIN != 0D) {
        output.WriteRawTag(169, 2);
        output.WriteDouble(WROFULLINITIALMARGIN);
      }
      if (WROFULLMAINTAINMARGIN != 0D) {
        output.WriteRawTag(177, 2);
        output.WriteDouble(WROFULLMAINTAINMARGIN);
      }
      if (WRADDITIONMARGIN != 0D) {
        output.WriteRawTag(185, 2);
        output.WriteDouble(WRADDITIONMARGIN);
      }
      if (WRNOMARGIN != 0D) {
        output.WriteRawTag(193, 2);
        output.WriteDouble(WRNOMARGIN);
      }
      if (WRPROMPTAMT != 0D) {
        output.WriteRawTag(201, 2);
        output.WriteDouble(WRPROMPTAMT);
      }
      if (WRBPOPTIONVALUE != 0D) {
        output.WriteRawTag(209, 2);
        output.WriteDouble(WRBPOPTIONVALUE);
      }
      if (WRSPOPTIONVALUE != 0D) {
        output.WriteRawTag(217, 2);
        output.WriteDouble(WRSPOPTIONVALUE);
      }
      if (WRBCOPTIONVALUE != 0D) {
        output.WriteRawTag(225, 2);
        output.WriteDouble(WRBCOPTIONVALUE);
      }
      if (WRSCOPTIONVALUE != 0D) {
        output.WriteRawTag(233, 2);
        output.WriteDouble(WRSCOPTIONVALUE);
      }
      if (WRADDITIONMARGINRATE != 0D) {
        output.WriteRawTag(241, 2);
        output.WriteDouble(WRADDITIONMARGINRATE);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WRMAINTAINRATE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRMAINTAINRATE);
      }
      if (WRACCOUNTEQUITY != 0D) {
        size += 1 + 8;
      }
      if (WRINOUTAMT != 0D) {
        size += 1 + 8;
      }
      if (WRUSABLEMARGIN != 0D) {
        size += 1 + 8;
      }
      if (WRCOVERINCOME != 0D) {
        size += 1 + 8;
      }
      if (WRINITIALMARGIN != 0D) {
        size += 1 + 8;
      }
      if (WRMAINTAINMARGIN != 0D) {
        size += 1 + 8;
      }
      if (WRVARINCOME != 0D) {
        size += 1 + 8;
      }
      if (WRACCOUNTBALANCE != 0D) {
        size += 1 + 8;
      }
      if (WRREALIZEPREMIUN != 0D) {
        size += 1 + 8;
      }
      if (WRUNREALIZEPREMIUM != 0D) {
        size += 1 + 8;
      }
      if (WRBOPTIONVALUE != 0D) {
        size += 1 + 8;
      }
      if (WRSOPTIONVALUE != 0D) {
        size += 1 + 8;
      }
      if (WRYESEQU != 0D) {
        size += 1 + 8;
      }
      if (WRYESACCOUNTBALANCE != 0D) {
        size += 1 + 8;
      }
      if (WRTODAYTOT != 0D) {
        size += 2 + 8;
      }
      if (WRTODAYTAX != 0D) {
        size += 2 + 8;
      }
      if (WREQUITY != 0D) {
        size += 2 + 8;
      }
      if (WRRISKRATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRRISKRATE);
      }
      if (WRCOVERRATE != 0D) {
        size += 2 + 8;
      }
      if (WRFULLMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRFULLMAINTAINMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRFULLUSABLEMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRFULLRATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRFULLRATE);
      }
      if (WRFULLRISKRATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRFULLRISKRATE);
      }
      if (WRDAYTRADEFLAG.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRDAYTRADEFLAG);
      }
      if (WRIOPFLAG.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRIOPFLAG);
      }
      if (WRYESTOTEQUITY != 0D) {
        size += 2 + 8;
      }
      if (WRIBNO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRIBNO);
      }
      if (WRCOVEREDAMT != 0D) {
        size += 2 + 8;
      }
      if (WRADDMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRCASHUSABLE != 0D) {
        size += 2 + 8;
      }
      if (WRFULLCASHUSABLE != 0D) {
        size += 2 + 8;
      }
      if (WRUNREALIZEDINCOME != 0D) {
        size += 2 + 8;
      }
      if (WROINITIALMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WROMAINTAINMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WROFULLINITIALMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WROFULLMAINTAINMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRADDITIONMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRNOMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRPROMPTAMT != 0D) {
        size += 2 + 8;
      }
      if (WRBPOPTIONVALUE != 0D) {
        size += 2 + 8;
      }
      if (WRSPOPTIONVALUE != 0D) {
        size += 2 + 8;
      }
      if (WRBCOPTIONVALUE != 0D) {
        size += 2 + 8;
      }
      if (WRSCOPTIONVALUE != 0D) {
        size += 2 + 8;
      }
      if (WRADDITIONMARGINRATE != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Equity other) {
      if (other == null) {
        return;
      }
      if (other.WRMAINTAINRATE.Length != 0) {
        WRMAINTAINRATE = other.WRMAINTAINRATE;
      }
      if (other.WRACCOUNTEQUITY != 0D) {
        WRACCOUNTEQUITY = other.WRACCOUNTEQUITY;
      }
      if (other.WRINOUTAMT != 0D) {
        WRINOUTAMT = other.WRINOUTAMT;
      }
      if (other.WRUSABLEMARGIN != 0D) {
        WRUSABLEMARGIN = other.WRUSABLEMARGIN;
      }
      if (other.WRCOVERINCOME != 0D) {
        WRCOVERINCOME = other.WRCOVERINCOME;
      }
      if (other.WRINITIALMARGIN != 0D) {
        WRINITIALMARGIN = other.WRINITIALMARGIN;
      }
      if (other.WRMAINTAINMARGIN != 0D) {
        WRMAINTAINMARGIN = other.WRMAINTAINMARGIN;
      }
      if (other.WRVARINCOME != 0D) {
        WRVARINCOME = other.WRVARINCOME;
      }
      if (other.WRACCOUNTBALANCE != 0D) {
        WRACCOUNTBALANCE = other.WRACCOUNTBALANCE;
      }
      if (other.WRREALIZEPREMIUN != 0D) {
        WRREALIZEPREMIUN = other.WRREALIZEPREMIUN;
      }
      if (other.WRUNREALIZEPREMIUM != 0D) {
        WRUNREALIZEPREMIUM = other.WRUNREALIZEPREMIUM;
      }
      if (other.WRBOPTIONVALUE != 0D) {
        WRBOPTIONVALUE = other.WRBOPTIONVALUE;
      }
      if (other.WRSOPTIONVALUE != 0D) {
        WRSOPTIONVALUE = other.WRSOPTIONVALUE;
      }
      if (other.WRYESEQU != 0D) {
        WRYESEQU = other.WRYESEQU;
      }
      if (other.WRYESACCOUNTBALANCE != 0D) {
        WRYESACCOUNTBALANCE = other.WRYESACCOUNTBALANCE;
      }
      if (other.WRTODAYTOT != 0D) {
        WRTODAYTOT = other.WRTODAYTOT;
      }
      if (other.WRTODAYTAX != 0D) {
        WRTODAYTAX = other.WRTODAYTAX;
      }
      if (other.WREQUITY != 0D) {
        WREQUITY = other.WREQUITY;
      }
      if (other.WRRISKRATE.Length != 0) {
        WRRISKRATE = other.WRRISKRATE;
      }
      if (other.WRCOVERRATE != 0D) {
        WRCOVERRATE = other.WRCOVERRATE;
      }
      if (other.WRFULLMARGIN != 0D) {
        WRFULLMARGIN = other.WRFULLMARGIN;
      }
      if (other.WRFULLMAINTAINMARGIN != 0D) {
        WRFULLMAINTAINMARGIN = other.WRFULLMAINTAINMARGIN;
      }
      if (other.WRFULLUSABLEMARGIN != 0D) {
        WRFULLUSABLEMARGIN = other.WRFULLUSABLEMARGIN;
      }
      if (other.WRFULLRATE.Length != 0) {
        WRFULLRATE = other.WRFULLRATE;
      }
      if (other.WRFULLRISKRATE.Length != 0) {
        WRFULLRISKRATE = other.WRFULLRISKRATE;
      }
      if (other.WRDAYTRADEFLAG.Length != 0) {
        WRDAYTRADEFLAG = other.WRDAYTRADEFLAG;
      }
      if (other.WRIOPFLAG.Length != 0) {
        WRIOPFLAG = other.WRIOPFLAG;
      }
      if (other.WRYESTOTEQUITY != 0D) {
        WRYESTOTEQUITY = other.WRYESTOTEQUITY;
      }
      if (other.WRIBNO.Length != 0) {
        WRIBNO = other.WRIBNO;
      }
      if (other.WRCOVEREDAMT != 0D) {
        WRCOVEREDAMT = other.WRCOVEREDAMT;
      }
      if (other.WRADDMARGIN != 0D) {
        WRADDMARGIN = other.WRADDMARGIN;
      }
      if (other.WRCASHUSABLE != 0D) {
        WRCASHUSABLE = other.WRCASHUSABLE;
      }
      if (other.WRFULLCASHUSABLE != 0D) {
        WRFULLCASHUSABLE = other.WRFULLCASHUSABLE;
      }
      if (other.WRUNREALIZEDINCOME != 0D) {
        WRUNREALIZEDINCOME = other.WRUNREALIZEDINCOME;
      }
      if (other.WROINITIALMARGIN != 0D) {
        WROINITIALMARGIN = other.WROINITIALMARGIN;
      }
      if (other.WROMAINTAINMARGIN != 0D) {
        WROMAINTAINMARGIN = other.WROMAINTAINMARGIN;
      }
      if (other.WROFULLINITIALMARGIN != 0D) {
        WROFULLINITIALMARGIN = other.WROFULLINITIALMARGIN;
      }
      if (other.WROFULLMAINTAINMARGIN != 0D) {
        WROFULLMAINTAINMARGIN = other.WROFULLMAINTAINMARGIN;
      }
      if (other.WRADDITIONMARGIN != 0D) {
        WRADDITIONMARGIN = other.WRADDITIONMARGIN;
      }
      if (other.WRNOMARGIN != 0D) {
        WRNOMARGIN = other.WRNOMARGIN;
      }
      if (other.WRPROMPTAMT != 0D) {
        WRPROMPTAMT = other.WRPROMPTAMT;
      }
      if (other.WRBPOPTIONVALUE != 0D) {
        WRBPOPTIONVALUE = other.WRBPOPTIONVALUE;
      }
      if (other.WRSPOPTIONVALUE != 0D) {
        WRSPOPTIONVALUE = other.WRSPOPTIONVALUE;
      }
      if (other.WRBCOPTIONVALUE != 0D) {
        WRBCOPTIONVALUE = other.WRBCOPTIONVALUE;
      }
      if (other.WRSCOPTIONVALUE != 0D) {
        WRSCOPTIONVALUE = other.WRSCOPTIONVALUE;
      }
      if (other.WRADDITIONMARGINRATE != 0D) {
        WRADDITIONMARGINRATE = other.WRADDITIONMARGINRATE;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WRMAINTAINRATE = input.ReadString();
            break;
          }
          case 17: {
            WRACCOUNTEQUITY = input.ReadDouble();
            break;
          }
          case 25: {
            WRINOUTAMT = input.ReadDouble();
            break;
          }
          case 33: {
            WRUSABLEMARGIN = input.ReadDouble();
            break;
          }
          case 41: {
            WRCOVERINCOME = input.ReadDouble();
            break;
          }
          case 49: {
            WRINITIALMARGIN = input.ReadDouble();
            break;
          }
          case 57: {
            WRMAINTAINMARGIN = input.ReadDouble();
            break;
          }
          case 65: {
            WRVARINCOME = input.ReadDouble();
            break;
          }
          case 73: {
            WRACCOUNTBALANCE = input.ReadDouble();
            break;
          }
          case 81: {
            WRREALIZEPREMIUN = input.ReadDouble();
            break;
          }
          case 89: {
            WRUNREALIZEPREMIUM = input.ReadDouble();
            break;
          }
          case 97: {
            WRBOPTIONVALUE = input.ReadDouble();
            break;
          }
          case 105: {
            WRSOPTIONVALUE = input.ReadDouble();
            break;
          }
          case 113: {
            WRYESEQU = input.ReadDouble();
            break;
          }
          case 121: {
            WRYESACCOUNTBALANCE = input.ReadDouble();
            break;
          }
          case 129: {
            WRTODAYTOT = input.ReadDouble();
            break;
          }
          case 137: {
            WRTODAYTAX = input.ReadDouble();
            break;
          }
          case 145: {
            WREQUITY = input.ReadDouble();
            break;
          }
          case 154: {
            WRRISKRATE = input.ReadString();
            break;
          }
          case 161: {
            WRCOVERRATE = input.ReadDouble();
            break;
          }
          case 169: {
            WRFULLMARGIN = input.ReadDouble();
            break;
          }
          case 177: {
            WRFULLMAINTAINMARGIN = input.ReadDouble();
            break;
          }
          case 185: {
            WRFULLUSABLEMARGIN = input.ReadDouble();
            break;
          }
          case 194: {
            WRFULLRATE = input.ReadString();
            break;
          }
          case 202: {
            WRFULLRISKRATE = input.ReadString();
            break;
          }
          case 210: {
            WRDAYTRADEFLAG = input.ReadString();
            break;
          }
          case 218: {
            WRIOPFLAG = input.ReadString();
            break;
          }
          case 225: {
            WRYESTOTEQUITY = input.ReadDouble();
            break;
          }
          case 234: {
            WRIBNO = input.ReadString();
            break;
          }
          case 241: {
            WRCOVEREDAMT = input.ReadDouble();
            break;
          }
          case 249: {
            WRADDMARGIN = input.ReadDouble();
            break;
          }
          case 257: {
            WRCASHUSABLE = input.ReadDouble();
            break;
          }
          case 265: {
            WRFULLCASHUSABLE = input.ReadDouble();
            break;
          }
          case 273: {
            WRUNREALIZEDINCOME = input.ReadDouble();
            break;
          }
          case 281: {
            WROINITIALMARGIN = input.ReadDouble();
            break;
          }
          case 289: {
            WROMAINTAINMARGIN = input.ReadDouble();
            break;
          }
          case 297: {
            WROFULLINITIALMARGIN = input.ReadDouble();
            break;
          }
          case 305: {
            WROFULLMAINTAINMARGIN = input.ReadDouble();
            break;
          }
          case 313: {
            WRADDITIONMARGIN = input.ReadDouble();
            break;
          }
          case 321: {
            WRNOMARGIN = input.ReadDouble();
            break;
          }
          case 329: {
            WRPROMPTAMT = input.ReadDouble();
            break;
          }
          case 337: {
            WRBPOPTIONVALUE = input.ReadDouble();
            break;
          }
          case 345: {
            WRSPOPTIONVALUE = input.ReadDouble();
            break;
          }
          case 353: {
            WRBCOPTIONVALUE = input.ReadDouble();
            break;
          }
          case 361: {
            WRSCOPTIONVALUE = input.ReadDouble();
            break;
          }
          case 369: {
            WRADDITIONMARGINRATE = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///SSO登入與回傳
  /// </summary>
  public sealed partial class SSO : pb::IMessage<SSO> {
    private static readonly pb::MessageParser<SSO> _parser = new pb::MessageParser<SSO>(() => new SSO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SSO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSO(SSO other) : this() {
      iD_ = other.iD_;
      pASS_ = other.pASS_;
      iP_ = other.iP_;
      cf_ = other.cf_;
      eNDPoint_ = other.eNDPoint_;
      queryPoint_ = other.queryPoint_;
      idendity_ = other.idendity_;
      accounts_ = other.accounts_.Clone();
      responseMessage_ = other.responseMessage_;
      userName_ = other.userName_;
      of_ = other.of_;
      otlf_ = other.otlf_;
      omsVersion_ = other.omsVersion_;
      ompsf_ = other.ompsf_;
      errorCode_ = other.errorCode_;
      cAKey_ = other.cAKey_;
      checkCodeFromSSO_ = other.checkCodeFromSSO_;
      toTalAccount_ = other.toTalAccount_;
      orderGateWay_ = other.orderGateWay_;
      clientIP_ = other.clientIP_;
      suf_ = other.suf_;
      specialAccounts_ = other.specialAccounts_.Clone();
      jfauf_ = other.jfauf_;
      tradePASS_ = other.tradePASS_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSO Clone() {
      return new SSO(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private string iD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PASS" field.</summary>
    public const int PASSFieldNumber = 2;
    private string pASS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PASS {
      get { return pASS_; }
      set {
        pASS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IP" field.</summary>
    public const int IPFieldNumber = 3;
    private string iP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IP {
      get { return iP_; }
      set {
        iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cf" field.</summary>
    public const int CfFieldNumber = 4;
    private global::Jsunfutures.Messages.ClientFlag cf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.ClientFlag Cf {
      get { return cf_; }
      set {
        cf_ = value;
      }
    }

    /// <summary>Field number for the "ENDPoint" field.</summary>
    public const int ENDPointFieldNumber = 5;
    private string eNDPoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ENDPoint {
      get { return eNDPoint_; }
      set {
        eNDPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "QueryPoint" field.</summary>
    public const int QueryPointFieldNumber = 6;
    private string queryPoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueryPoint {
      get { return queryPoint_; }
      set {
        queryPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Idendity" field.</summary>
    public const int IdendityFieldNumber = 7;
    private string idendity_ = "";
    /// <summary>
    ///SSO_NO  ==>Idendity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idendity {
      get { return idendity_; }
      set {
        idendity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accounts" field.</summary>
    public const int AccountsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.AccountDetail> _repeated_accounts_codec
        = pb::FieldCodec.ForMessage(66, global::Jsunfutures.Messages.AccountDetail.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.AccountDetail> accounts_ = new pbc::RepeatedField<global::Jsunfutures.Messages.AccountDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.AccountDetail> Accounts {
      get { return accounts_; }
    }

    /// <summary>Field number for the "responseMessage" field.</summary>
    public const int ResponseMessageFieldNumber = 9;
    private string responseMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResponseMessage {
      get { return responseMessage_; }
      set {
        responseMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 10;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "of" field.</summary>
    public const int OfFieldNumber = 11;
    private global::Jsunfutures.Messages.OsFlag of_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.OsFlag Of {
      get { return of_; }
      set {
        of_ = value;
      }
    }

    /// <summary>Field number for the "otlf" field.</summary>
    public const int OtlfFieldNumber = 12;
    private global::Jsunfutures.Messages.OrderTriggerLanguageFlag otlf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.OrderTriggerLanguageFlag Otlf {
      get { return otlf_; }
      set {
        otlf_ = value;
      }
    }

    /// <summary>Field number for the "omsVersion" field.</summary>
    public const int OmsVersionFieldNumber = 13;
    private string omsVersion_ = "";
    /// <summary>
    ///oms版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OmsVersion {
      get { return omsVersion_; }
      set {
        omsVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ompsf" field.</summary>
    public const int OmpsfFieldNumber = 14;
    private global::Jsunfutures.Messages.OrderMaxPerSecFlag ompsf_ = 0;
    /// <summary>
    ///每秒最大下單筆數 10的Enum次方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.OrderMaxPerSecFlag Ompsf {
      get { return ompsf_; }
      set {
        ompsf_ = value;
      }
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 15;
    private int errorCode_;
    /// <summary>
    ///SSO ErrorCode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "CAKey" field.</summary>
    public const int CAKeyFieldNumber = 16;
    private string cAKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CAKey {
      get { return cAKey_; }
      set {
        cAKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CheckCodeFromSSO" field.</summary>
    public const int CheckCodeFromSSOFieldNumber = 17;
    private string checkCodeFromSSO_ = "";
    /// <summary>
    ///CA USE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CheckCodeFromSSO {
      get { return checkCodeFromSSO_; }
      set {
        checkCodeFromSSO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToTalAccount" field.</summary>
    public const int ToTalAccountFieldNumber = 18;
    private string toTalAccount_ = "";
    /// <summary>
    ///SSO Use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToTalAccount {
      get { return toTalAccount_; }
      set {
        toTalAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderGateWay" field.</summary>
    public const int OrderGateWayFieldNumber = 19;
    private global::Jsunfutures.Messages.GatewayFlag orderGateWay_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.GatewayFlag OrderGateWay {
      get { return orderGateWay_; }
      set {
        orderGateWay_ = value;
      }
    }

    /// <summary>Field number for the "ClientIP" field.</summary>
    public const int ClientIPFieldNumber = 20;
    private string clientIP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientIP {
      get { return clientIP_; }
      set {
        clientIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "suf" field.</summary>
    public const int SufFieldNumber = 21;
    private global::Jsunfutures.Messages.SpecialUserFlag suf_ = 0;
    /// <summary>
    ///B2B
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.SpecialUserFlag Suf {
      get { return suf_; }
      set {
        suf_ = value;
      }
    }

    /// <summary>Field number for the "specialAccounts" field.</summary>
    public const int SpecialAccountsFieldNumber = 22;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.SpecialAccountDetail> _repeated_specialAccounts_codec
        = pb::FieldCodec.ForMessage(178, global::Jsunfutures.Messages.SpecialAccountDetail.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.SpecialAccountDetail> specialAccounts_ = new pbc::RepeatedField<global::Jsunfutures.Messages.SpecialAccountDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.SpecialAccountDetail> SpecialAccounts {
      get { return specialAccounts_; }
    }

    /// <summary>Field number for the "jfauf" field.</summary>
    public const int JfaufFieldNumber = 23;
    private global::Jsunfutures.Messages.JsunFAUserFlag jfauf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.JsunFAUserFlag Jfauf {
      get { return jfauf_; }
      set {
        jfauf_ = value;
      }
    }

    /// <summary>Field number for the "TradePASS" field.</summary>
    public const int TradePASSFieldNumber = 24;
    private string tradePASS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradePASS {
      get { return tradePASS_; }
      set {
        tradePASS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SSO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SSO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (PASS != other.PASS) return false;
      if (IP != other.IP) return false;
      if (Cf != other.Cf) return false;
      if (ENDPoint != other.ENDPoint) return false;
      if (QueryPoint != other.QueryPoint) return false;
      if (Idendity != other.Idendity) return false;
      if(!accounts_.Equals(other.accounts_)) return false;
      if (ResponseMessage != other.ResponseMessage) return false;
      if (UserName != other.UserName) return false;
      if (Of != other.Of) return false;
      if (Otlf != other.Otlf) return false;
      if (OmsVersion != other.OmsVersion) return false;
      if (Ompsf != other.Ompsf) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (CAKey != other.CAKey) return false;
      if (CheckCodeFromSSO != other.CheckCodeFromSSO) return false;
      if (ToTalAccount != other.ToTalAccount) return false;
      if (OrderGateWay != other.OrderGateWay) return false;
      if (ClientIP != other.ClientIP) return false;
      if (Suf != other.Suf) return false;
      if(!specialAccounts_.Equals(other.specialAccounts_)) return false;
      if (Jfauf != other.Jfauf) return false;
      if (TradePASS != other.TradePASS) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (PASS.Length != 0) hash ^= PASS.GetHashCode();
      if (IP.Length != 0) hash ^= IP.GetHashCode();
      if (Cf != 0) hash ^= Cf.GetHashCode();
      if (ENDPoint.Length != 0) hash ^= ENDPoint.GetHashCode();
      if (QueryPoint.Length != 0) hash ^= QueryPoint.GetHashCode();
      if (Idendity.Length != 0) hash ^= Idendity.GetHashCode();
      hash ^= accounts_.GetHashCode();
      if (ResponseMessage.Length != 0) hash ^= ResponseMessage.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Of != 0) hash ^= Of.GetHashCode();
      if (Otlf != 0) hash ^= Otlf.GetHashCode();
      if (OmsVersion.Length != 0) hash ^= OmsVersion.GetHashCode();
      if (Ompsf != 0) hash ^= Ompsf.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (CAKey.Length != 0) hash ^= CAKey.GetHashCode();
      if (CheckCodeFromSSO.Length != 0) hash ^= CheckCodeFromSSO.GetHashCode();
      if (ToTalAccount.Length != 0) hash ^= ToTalAccount.GetHashCode();
      if (OrderGateWay != 0) hash ^= OrderGateWay.GetHashCode();
      if (ClientIP.Length != 0) hash ^= ClientIP.GetHashCode();
      if (Suf != 0) hash ^= Suf.GetHashCode();
      hash ^= specialAccounts_.GetHashCode();
      if (Jfauf != 0) hash ^= Jfauf.GetHashCode();
      if (TradePASS.Length != 0) hash ^= TradePASS.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (PASS.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PASS);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(IP);
      }
      if (Cf != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Cf);
      }
      if (ENDPoint.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ENDPoint);
      }
      if (QueryPoint.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(QueryPoint);
      }
      if (Idendity.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Idendity);
      }
      accounts_.WriteTo(output, _repeated_accounts_codec);
      if (ResponseMessage.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ResponseMessage);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UserName);
      }
      if (Of != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Of);
      }
      if (Otlf != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Otlf);
      }
      if (OmsVersion.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(OmsVersion);
      }
      if (Ompsf != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Ompsf);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ErrorCode);
      }
      if (CAKey.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CAKey);
      }
      if (CheckCodeFromSSO.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(CheckCodeFromSSO);
      }
      if (ToTalAccount.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ToTalAccount);
      }
      if (OrderGateWay != 0) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) OrderGateWay);
      }
      if (ClientIP.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(ClientIP);
      }
      if (Suf != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) Suf);
      }
      specialAccounts_.WriteTo(output, _repeated_specialAccounts_codec);
      if (Jfauf != 0) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) Jfauf);
      }
      if (TradePASS.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(TradePASS);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (PASS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PASS);
      }
      if (IP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IP);
      }
      if (Cf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cf);
      }
      if (ENDPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ENDPoint);
      }
      if (QueryPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryPoint);
      }
      if (Idendity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idendity);
      }
      size += accounts_.CalculateSize(_repeated_accounts_codec);
      if (ResponseMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResponseMessage);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Of != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Of);
      }
      if (Otlf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Otlf);
      }
      if (OmsVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OmsVersion);
      }
      if (Ompsf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ompsf);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (CAKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CAKey);
      }
      if (CheckCodeFromSSO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CheckCodeFromSSO);
      }
      if (ToTalAccount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ToTalAccount);
      }
      if (OrderGateWay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderGateWay);
      }
      if (ClientIP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientIP);
      }
      if (Suf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Suf);
      }
      size += specialAccounts_.CalculateSize(_repeated_specialAccounts_codec);
      if (Jfauf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Jfauf);
      }
      if (TradePASS.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TradePASS);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SSO other) {
      if (other == null) {
        return;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.PASS.Length != 0) {
        PASS = other.PASS;
      }
      if (other.IP.Length != 0) {
        IP = other.IP;
      }
      if (other.Cf != 0) {
        Cf = other.Cf;
      }
      if (other.ENDPoint.Length != 0) {
        ENDPoint = other.ENDPoint;
      }
      if (other.QueryPoint.Length != 0) {
        QueryPoint = other.QueryPoint;
      }
      if (other.Idendity.Length != 0) {
        Idendity = other.Idendity;
      }
      accounts_.Add(other.accounts_);
      if (other.ResponseMessage.Length != 0) {
        ResponseMessage = other.ResponseMessage;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Of != 0) {
        Of = other.Of;
      }
      if (other.Otlf != 0) {
        Otlf = other.Otlf;
      }
      if (other.OmsVersion.Length != 0) {
        OmsVersion = other.OmsVersion;
      }
      if (other.Ompsf != 0) {
        Ompsf = other.Ompsf;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.CAKey.Length != 0) {
        CAKey = other.CAKey;
      }
      if (other.CheckCodeFromSSO.Length != 0) {
        CheckCodeFromSSO = other.CheckCodeFromSSO;
      }
      if (other.ToTalAccount.Length != 0) {
        ToTalAccount = other.ToTalAccount;
      }
      if (other.OrderGateWay != 0) {
        OrderGateWay = other.OrderGateWay;
      }
      if (other.ClientIP.Length != 0) {
        ClientIP = other.ClientIP;
      }
      if (other.Suf != 0) {
        Suf = other.Suf;
      }
      specialAccounts_.Add(other.specialAccounts_);
      if (other.Jfauf != 0) {
        Jfauf = other.Jfauf;
      }
      if (other.TradePASS.Length != 0) {
        TradePASS = other.TradePASS;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 18: {
            PASS = input.ReadString();
            break;
          }
          case 26: {
            IP = input.ReadString();
            break;
          }
          case 32: {
            cf_ = (global::Jsunfutures.Messages.ClientFlag) input.ReadEnum();
            break;
          }
          case 42: {
            ENDPoint = input.ReadString();
            break;
          }
          case 50: {
            QueryPoint = input.ReadString();
            break;
          }
          case 58: {
            Idendity = input.ReadString();
            break;
          }
          case 66: {
            accounts_.AddEntriesFrom(input, _repeated_accounts_codec);
            break;
          }
          case 74: {
            ResponseMessage = input.ReadString();
            break;
          }
          case 82: {
            UserName = input.ReadString();
            break;
          }
          case 88: {
            of_ = (global::Jsunfutures.Messages.OsFlag) input.ReadEnum();
            break;
          }
          case 96: {
            otlf_ = (global::Jsunfutures.Messages.OrderTriggerLanguageFlag) input.ReadEnum();
            break;
          }
          case 106: {
            OmsVersion = input.ReadString();
            break;
          }
          case 112: {
            ompsf_ = (global::Jsunfutures.Messages.OrderMaxPerSecFlag) input.ReadEnum();
            break;
          }
          case 120: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 130: {
            CAKey = input.ReadString();
            break;
          }
          case 138: {
            CheckCodeFromSSO = input.ReadString();
            break;
          }
          case 146: {
            ToTalAccount = input.ReadString();
            break;
          }
          case 152: {
            orderGateWay_ = (global::Jsunfutures.Messages.GatewayFlag) input.ReadEnum();
            break;
          }
          case 162: {
            ClientIP = input.ReadString();
            break;
          }
          case 168: {
            suf_ = (global::Jsunfutures.Messages.SpecialUserFlag) input.ReadEnum();
            break;
          }
          case 178: {
            specialAccounts_.AddEntriesFrom(input, _repeated_specialAccounts_codec);
            break;
          }
          case 184: {
            jfauf_ = (global::Jsunfutures.Messages.JsunFAUserFlag) input.ReadEnum();
            break;
          }
          case 194: {
            TradePASS = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///對tandem查詢的 Message
  /// </summary>
  public sealed partial class TandemQuery : pb::IMessage<TandemQuery> {
    private static readonly pb::MessageParser<TandemQuery> _parser = new pb::MessageParser<TandemQuery>(() => new TandemQuery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemQuery(TandemQuery other) : this() {
      account_ = other.account_;
      brokerID_ = other.brokerID_;
      tqf_ = other.tqf_;
      iPMREPLYCODE_ = other.iPMREPLYCODE_;
      iPMTRANSCODE_ = other.iPMTRANSCODE_;
      iPMFUNCTIONCODE_ = other.iPMFUNCTIONCODE_;
      iPMTERMID_ = other.iPMTERMID_;
      iPMBROKERID_ = other.iPMBROKERID_;
      iPMIBNO_ = other.iPMIBNO_;
      iPMBROKERNAME_ = other.iPMBROKERNAME_;
      iPMTELNO_ = other.iPMTELNO_;
      iPMTODAY_ = other.iPMTODAY_;
      fILLER1_ = other.fILLER1_;
      sENDDATAAREA_ = other.sENDDATAAREA_;
      sENDKEEPDATA_ = other.sENDKEEPDATA_;
      wSBROKERID_ = other.wSBROKERID_;
      wSIBNO_ = other.wSIBNO_;
      wSINVESTORACNO_ = other.wSINVESTORACNO_;
      wSSKACNO_ = other.wSSKACNO_;
      wSKIND_ = other.wSKIND_;
      wSSPOOLNO_ = other.wSSPOOLNO_;
      wSCOPIES_ = other.wSCOPIES_;
      wSCLOSEMARK_ = other.wSCLOSEMARK_;
      wSPASSWORD_ = other.wSPASSWORD_;
      wSTRADEDATE_ = other.wSTRADEDATE_;
      wSEXCHID_ = other.wSEXCHID_;
      wSKEY_ = other.wSKEY_;
      wSKEYCONTRACTID_ = other.wSKEYCONTRACTID_;
      wSKEYMATCHDATE_ = other.wSKEYMATCHDATE_;
      wSKEYSPO_ = other.wSKEYSPO_;
      wSKEYKIND_ = other.wSKEYKIND_;
      wSKEYBUYSELLKIND_ = other.wSKEYBUYSELLKIND_;
      wSKEYSEQNO_ = other.wSKEYSEQNO_;
      wSKEYORDERNO_ = other.wSKEYORDERNO_;
      wSKEYTRID_ = other.wSKEYTRID_;
      wSKEY2ND_ = other.wSKEY2ND_;
      wSKEYMATFLAG_ = other.wSKEYMATFLAG_;
      wSKEYCURRENCY_ = other.wSKEYCURRENCY_;
      wSMODEKIND_ = other.wSMODEKIND_;
      wSQUERYUSABLEMARGIN_ = other.wSQUERYUSABLEMARGIN_;
      fILLER2_ = other.fILLER2_;
      wSSTRATEGYCODE_ = other.wSSTRATEGYCODE_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemQuery Clone() {
      return new TandemQuery(this);
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///客戶帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BrokerID" field.</summary>
    public const int BrokerIDFieldNumber = 2;
    private string brokerID_ = "";
    /// <summary>
    ///期貨商代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerID {
      get { return brokerID_; }
      set {
        brokerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tqf" field.</summary>
    public const int TqfFieldNumber = 3;
    private global::Jsunfutures.Messages.TandemQueryFlag tqf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TandemQueryFlag Tqf {
      get { return tqf_; }
      set {
        tqf_ = value;
      }
    }

    /// <summary>Field number for the "IPM_REPLY_CODE" field.</summary>
    public const int IPMREPLYCODEFieldNumber = 4;
    private string iPMREPLYCODE_ = "";
    /// <summary>
    ///       PIC S9(04)  COMP.	2	C	4	0	0	FILLER		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IPMREPLYCODE {
      get { return iPMREPLYCODE_; }
      set {
        iPMREPLYCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IPM_TRANS_CODE" field.</summary>
    public const int IPMTRANSCODEFieldNumber = 5;
    private string iPMTRANSCODE_ = "";
    /// <summary>
    ///     PIC S9(04)  COMP.	2	C	4	0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IPMTRANSCODE {
      get { return iPMTRANSCODE_; }
      set {
        iPMTRANSCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IPM_FUNCTION_CODE" field.</summary>
    public const int IPMFUNCTIONCODEFieldNumber = 6;
    private double iPMFUNCTIONCODE_;
    /// <summary>
    ///11	TPMS(期貨網路)	期貨網路	TPMS
    ///		12	E_Agent	E_Agent
    ///		13	證券網路	證券網路
    ///		14	WTS	期貨網路
    ///TRASN_CODE 51/52/53/54目前只有WS_KIND="1" 					51	TPMS(期貨網路)	期貨網路	TPMS
    ///其REPLY_DATA請SEARCH "WR51_DATA"					52	E_Agent	E_Agent
    ///且每筆長度為500					53	證券網路	證券網路
    ///					54	WTS	期貨網路
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IPMFUNCTIONCODE {
      get { return iPMFUNCTIONCODE_; }
      set {
        iPMFUNCTIONCODE_ = value;
      }
    }

    /// <summary>Field number for the "IPM_TERM_ID" field.</summary>
    public const int IPMTERMIDFieldNumber = 7;
    private string iPMTERMID_ = "";
    /// <summary>
    ///          PIC X(12).       	12	X	12	0	space:default
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IPMTERMID {
      get { return iPMTERMID_; }
      set {
        iPMTERMID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IPM_BROKER_ID" field.</summary>
    public const int IPMBROKERIDFieldNumber = 8;
    private string iPMBROKERID_ = "";
    /// <summary>
    ///        PIC X(07).	7	X	7	0	space:default	期貨商代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IPMBROKERID {
      get { return iPMBROKERID_; }
      set {
        iPMBROKERID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IPM_IB_NO" field.</summary>
    public const int IPMIBNOFieldNumber = 9;
    private string iPMIBNO_ = "";
    /// <summary>
    ///            PIC X(03).       	3	X	3	0	l_BRANCH_ID(A+證券UNIT)	IB代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IPMIBNO {
      get { return iPMIBNO_; }
      set {
        iPMIBNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IPM_BROKER_NAME" field.</summary>
    public const int IPMBROKERNAMEFieldNumber = 10;
    private string iPMBROKERNAME_ = "";
    /// <summary>
    ///      PIC X(10).       	10	X	10	0	space:default	期貨商名稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IPMBROKERNAME {
      get { return iPMBROKERNAME_; }
      set {
        iPMBROKERNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IPM_TEL_NO" field.</summary>
    public const int IPMTELNOFieldNumber = 11;
    private int iPMTELNO_;
    /// <summary>
    ///           PIC 9(04)  COMP. 	2	C	4	0	0	 FILLER(營業員代碼)	營業員代碼	FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IPMTELNO {
      get { return iPMTELNO_; }
      set {
        iPMTELNO_ = value;
      }
    }

    /// <summary>Field number for the "IPM_TODAY" field.</summary>
    public const int IPMTODAYFieldNumber = 12;
    private long iPMTODAY_;
    /// <summary>
    ///            PIC 9(08)  COMP. 	4	C	8	0	today:default	日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IPMTODAY {
      get { return iPMTODAY_; }
      set {
        iPMTODAY_ = value;
      }
    }

    /// <summary>Field number for the "FILLER1" field.</summary>
    public const int FILLER1FieldNumber = 13;
    private string fILLER1_ = "";
    /// <summary>
    ///                    PIC X(100).	100	X	100	0	space:default	FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER1 {
      get { return fILLER1_; }
      set {
        fILLER1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SEND_DATA_AREA" field.</summary>
    public const int SENDDATAAREAFieldNumber = 14;
    private string sENDDATAAREA_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SENDDATAAREA {
      get { return sENDDATAAREA_; }
      set {
        sENDDATAAREA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SEND_KEEP_DATA" field.</summary>
    public const int SENDKEEPDATAFieldNumber = 15;
    private string sENDKEEPDATA_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SENDKEEPDATA {
      get { return sENDKEEPDATA_; }
      set {
        sENDKEEPDATA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_BROKER_ID" field.</summary>
    public const int WSBROKERIDFieldNumber = 16;
    private string wSBROKERID_ = "";
    /// <summary>
    ///      PIC X(7).	7	X	7	0	space:default	期貨商代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSBROKERID {
      get { return wSBROKERID_; }
      set {
        wSBROKERID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_IB_NO" field.</summary>
    public const int WSIBNOFieldNumber = 17;
    private string wSIBNO_ = "";
    /// <summary>
    ///          PIC X(3).	3	X	3	0	l_BRANCH_ID(A+證券UNIT)	IB代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSIBNO {
      get { return wSIBNO_; }
      set {
        wSIBNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_INVESTOR_ACNO" field.</summary>
    public const int WSINVESTORACNOFieldNumber = 18;
    private long wSINVESTORACNO_;
    /// <summary>
    ///  PIC 9(7).	7	9	7	0		交易員代號(期貨帳號)	期貨帳號	交易員代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WSINVESTORACNO {
      get { return wSINVESTORACNO_; }
      set {
        wSINVESTORACNO_ = value;
      }
    }

    /// <summary>Field number for the "WS_SK_ACNO" field.</summary>
    public const int WSSKACNOFieldNumber = 19;
    private long wSSKACNO_;
    /// <summary>
    ///        PIC 9(7).	7	9	7	0	0	 FILLER(證券帳號)	證券帳號	FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WSSKACNO {
      get { return wSSKACNO_; }
      set {
        wSSKACNO_ = value;
      }
    }

    /// <summary>Field number for the "WS_KIND" field.</summary>
    public const int WSKINDFieldNumber = 20;
    private string wSKIND_ = "";
    /// <summary>
    ///         PIC X(1).	1	X	1	0	1 : 未平倉彙總	查詢種類
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSKIND {
      get { return wSKIND_; }
      set {
        wSKIND_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_SPOOL_NO" field.</summary>
    public const int WSSPOOLNOFieldNumber = 21;
    private string wSSPOOLNO_ = "";
    /// <summary>
    ///					2 : 未平倉明細
    ///					3 :     今彙總
    ///					4 :     今明細
    ///					7 :       抵繳
    ///					8:        各幣
    ///					9:        當沖
    ///					0:        最佳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSSPOOLNO {
      get { return wSSPOOLNO_; }
      set {
        wSSPOOLNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_COPIES" field.</summary>
    public const int WSCOPIESFieldNumber = 22;
    private int wSCOPIES_;
    /// <summary>
    ///            PIC 9(2).	2	9	2	0	0:default	列印份數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WSCOPIES {
      get { return wSCOPIES_; }
      set {
        wSCOPIES_ = value;
      }
    }

    /// <summary>Field number for the "WS_CLOSE_MARK" field.</summary>
    public const int WSCLOSEMARKFieldNumber = 23;
    private string wSCLOSEMARK_ = "";
    /// <summary>
    ///        PIC X(6).	6	X	6	0	space:default
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSCLOSEMARK {
      get { return wSCLOSEMARK_; }
      set {
        wSCLOSEMARK_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_PASSWORD" field.</summary>
    public const int WSPASSWORDFieldNumber = 24;
    private string wSPASSWORD_ = "";
    /// <summary>
    ///          PIC X(4).	4	X	4	0	SPACES	查詢密碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSPASSWORD {
      get { return wSPASSWORD_; }
      set {
        wSPASSWORD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_TRADE_DATE" field.</summary>
    public const int WSTRADEDATEFieldNumber = 25;
    private long wSTRADEDATE_;
    /// <summary>
    ///        PIC 9(8).	8	9	8	0	西元年月日(今日)	西元年月日(今日)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WSTRADEDATE {
      get { return wSTRADEDATE_; }
      set {
        wSTRADEDATE_ = value;
      }
    }

    /// <summary>Field number for the "WS_EXCH_ID" field.</summary>
    public const int WSEXCHIDFieldNumber = 26;
    private string wSEXCHID_ = "";
    /// <summary>
    ///           PIC X(7).	7	X	7	0	F000000 :default期交所代號	F000000 :default期交所代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSEXCHID {
      get { return wSEXCHID_; }
      set {
        wSEXCHID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_KEY" field.</summary>
    public const int WSKEYFieldNumber = 27;
    private string wSKEY_ = "";
    /// <summary>
    ///					66 BYTES	  for more data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSKEY {
      get { return wSKEY_; }
      set {
        wSKEY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_KEY_CONTRACT_ID" field.</summary>
    public const int WSKEYCONTRACTIDFieldNumber = 28;
    private string wSKEYCONTRACTID_ = "";
    /// <summary>
    ///  PIC X(22).	22	X	22	0		  第一次 :  INITIAL值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSKEYCONTRACTID {
      get { return wSKEYCONTRACTID_; }
      set {
        wSKEYCONTRACTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_KEY_MATCH_DATE" field.</summary>
    public const int WSKEYMATCHDATEFieldNumber = 29;
    private long wSKEYMATCHDATE_;
    /// <summary>
    ///   PIC 9(8) COMP.	4	C	8	0		  MORE DATA :  MOVE WR_KEY TO WS_KEY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WSKEYMATCHDATE {
      get { return wSKEYMATCHDATE_; }
      set {
        wSKEYMATCHDATE_ = value;
      }
    }

    /// <summary>Field number for the "WS_KEY_SPO" field.</summary>
    public const int WSKEYSPOFieldNumber = 30;
    private double wSKEYSPO_;
    /// <summary>
    ///          PIC S9(09) COMP.	4	C	9	0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WSKEYSPO {
      get { return wSKEYSPO_; }
      set {
        wSKEYSPO_ = value;
      }
    }

    /// <summary>Field number for the "WS_KEY_KIND" field.</summary>
    public const int WSKEYKINDFieldNumber = 31;
    private int wSKEYKIND_;
    /// <summary>
    ///         PIC 9(01).	1	9	1	0	1: MAT 2: DOS 3:SPO
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WSKEYKIND {
      get { return wSKEYKIND_; }
      set {
        wSKEYKIND_ = value;
      }
    }

    /// <summary>Field number for the "WS_KEY_BUY_SELL_KIND" field.</summary>
    public const int WSKEYBUYSELLKINDFieldNumber = 32;
    private string wSKEYBUYSELLKIND_ = "";
    /// <summary>
    /// PIC X(1).	1	X	1	0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSKEYBUYSELLKIND {
      get { return wSKEYBUYSELLKIND_; }
      set {
        wSKEYBUYSELLKIND_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_KEY_SEQNO" field.</summary>
    public const int WSKEYSEQNOFieldNumber = 33;
    private int wSKEYSEQNO_;
    /// <summary>
    ///        PIC 9(04).	4	9	4	0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WSKEYSEQNO {
      get { return wSKEYSEQNO_; }
      set {
        wSKEYSEQNO_ = value;
      }
    }

    /// <summary>Field number for the "WS_KEY_ORDER_NO" field.</summary>
    public const int WSKEYORDERNOFieldNumber = 34;
    private string wSKEYORDERNO_ = "";
    /// <summary>
    ///     PIC X(05).	5	X	5	0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSKEYORDERNO {
      get { return wSKEYORDERNO_; }
      set {
        wSKEYORDERNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_KEY_TR_ID" field.</summary>
    public const int WSKEYTRIDFieldNumber = 35;
    private string wSKEYTRID_ = "";
    /// <summary>
    ///        PIC X(20).	20	X	20	0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSKEYTRID {
      get { return wSKEYTRID_; }
      set {
        wSKEYTRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_KEY_2ND" field.</summary>
    public const int WSKEY2NDFieldNumber = 36;
    private string wSKEY2ND_ = "";
    /// <summary>
    ///          PIC X(1).	1	X	1	0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSKEY2ND {
      get { return wSKEY2ND_; }
      set {
        wSKEY2ND_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_KEY_MAT_FLAG" field.</summary>
    public const int WSKEYMATFLAGFieldNumber = 37;
    private string wSKEYMATFLAG_ = "";
    /// <summary>
    ///     PIC X(1).	1	X	1	0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSKEYMATFLAG {
      get { return wSKEYMATFLAG_; }
      set {
        wSKEYMATFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_KEY_CURRENCY" field.</summary>
    public const int WSKEYCURRENCYFieldNumber = 38;
    private string wSKEYCURRENCY_ = "";
    /// <summary>
    ///     PIC X(3).	3	X	3	0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSKEYCURRENCY {
      get { return wSKEYCURRENCY_; }
      set {
        wSKEYCURRENCY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_MODE_KIND" field.</summary>
    public const int WSMODEKINDFieldNumber = 39;
    private string wSMODEKIND_ = "";
    /// <summary>
    ///           PIC X(2).	2	X	2	0	space:default	辨識語音單,一般可給空白
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSMODEKIND {
      get { return wSMODEKIND_; }
      set {
        wSMODEKIND_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_QUERY_USABLE_MARGIN" field.</summary>
    public const int WSQUERYUSABLEMARGINFieldNumber = 40;
    private string wSQUERYUSABLEMARGIN_ = "";
    /// <summary>
    /// PIC X(1).	1	X	1	0	space	查詢可用餘額相關資料 WR_TOTAL_GROUP_DATA N	不查詢(減少I/O查詢速度較快)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSQUERYUSABLEMARGIN {
      get { return wSQUERYUSABLEMARGIN_; }
      set {
        wSQUERYUSABLEMARGIN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER2" field.</summary>
    public const int FILLER2FieldNumber = 41;
    private string fILLER2_ = "";
    /// <summary>
    ///                 PIC X(128).	128	X	128	0		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER2 {
      get { return fILLER2_; }
      set {
        fILLER2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_STRATEGY_CODE" field.</summary>
    public const int WSSTRATEGYCODEFieldNumber = 42;
    private string wSSTRATEGYCODE_ = "";
    /// <summary>
    ///       PIC X(5).	5	X	5	0	(本欄位為TPMS專用,沒用到的給SPACE)	策略代號	FILLER	策略代號長度小計(bytes)	400
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSSTRATEGYCODE {
      get { return wSSTRATEGYCODE_; }
      set {
        wSSTRATEGYCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (BrokerID != other.BrokerID) return false;
      if (Tqf != other.Tqf) return false;
      if (IPMREPLYCODE != other.IPMREPLYCODE) return false;
      if (IPMTRANSCODE != other.IPMTRANSCODE) return false;
      if (IPMFUNCTIONCODE != other.IPMFUNCTIONCODE) return false;
      if (IPMTERMID != other.IPMTERMID) return false;
      if (IPMBROKERID != other.IPMBROKERID) return false;
      if (IPMIBNO != other.IPMIBNO) return false;
      if (IPMBROKERNAME != other.IPMBROKERNAME) return false;
      if (IPMTELNO != other.IPMTELNO) return false;
      if (IPMTODAY != other.IPMTODAY) return false;
      if (FILLER1 != other.FILLER1) return false;
      if (SENDDATAAREA != other.SENDDATAAREA) return false;
      if (SENDKEEPDATA != other.SENDKEEPDATA) return false;
      if (WSBROKERID != other.WSBROKERID) return false;
      if (WSIBNO != other.WSIBNO) return false;
      if (WSINVESTORACNO != other.WSINVESTORACNO) return false;
      if (WSSKACNO != other.WSSKACNO) return false;
      if (WSKIND != other.WSKIND) return false;
      if (WSSPOOLNO != other.WSSPOOLNO) return false;
      if (WSCOPIES != other.WSCOPIES) return false;
      if (WSCLOSEMARK != other.WSCLOSEMARK) return false;
      if (WSPASSWORD != other.WSPASSWORD) return false;
      if (WSTRADEDATE != other.WSTRADEDATE) return false;
      if (WSEXCHID != other.WSEXCHID) return false;
      if (WSKEY != other.WSKEY) return false;
      if (WSKEYCONTRACTID != other.WSKEYCONTRACTID) return false;
      if (WSKEYMATCHDATE != other.WSKEYMATCHDATE) return false;
      if (WSKEYSPO != other.WSKEYSPO) return false;
      if (WSKEYKIND != other.WSKEYKIND) return false;
      if (WSKEYBUYSELLKIND != other.WSKEYBUYSELLKIND) return false;
      if (WSKEYSEQNO != other.WSKEYSEQNO) return false;
      if (WSKEYORDERNO != other.WSKEYORDERNO) return false;
      if (WSKEYTRID != other.WSKEYTRID) return false;
      if (WSKEY2ND != other.WSKEY2ND) return false;
      if (WSKEYMATFLAG != other.WSKEYMATFLAG) return false;
      if (WSKEYCURRENCY != other.WSKEYCURRENCY) return false;
      if (WSMODEKIND != other.WSMODEKIND) return false;
      if (WSQUERYUSABLEMARGIN != other.WSQUERYUSABLEMARGIN) return false;
      if (FILLER2 != other.FILLER2) return false;
      if (WSSTRATEGYCODE != other.WSSTRATEGYCODE) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (BrokerID.Length != 0) hash ^= BrokerID.GetHashCode();
      if (Tqf != 0) hash ^= Tqf.GetHashCode();
      if (IPMREPLYCODE.Length != 0) hash ^= IPMREPLYCODE.GetHashCode();
      if (IPMTRANSCODE.Length != 0) hash ^= IPMTRANSCODE.GetHashCode();
      if (IPMFUNCTIONCODE != 0D) hash ^= IPMFUNCTIONCODE.GetHashCode();
      if (IPMTERMID.Length != 0) hash ^= IPMTERMID.GetHashCode();
      if (IPMBROKERID.Length != 0) hash ^= IPMBROKERID.GetHashCode();
      if (IPMIBNO.Length != 0) hash ^= IPMIBNO.GetHashCode();
      if (IPMBROKERNAME.Length != 0) hash ^= IPMBROKERNAME.GetHashCode();
      if (IPMTELNO != 0) hash ^= IPMTELNO.GetHashCode();
      if (IPMTODAY != 0L) hash ^= IPMTODAY.GetHashCode();
      if (FILLER1.Length != 0) hash ^= FILLER1.GetHashCode();
      if (SENDDATAAREA.Length != 0) hash ^= SENDDATAAREA.GetHashCode();
      if (SENDKEEPDATA.Length != 0) hash ^= SENDKEEPDATA.GetHashCode();
      if (WSBROKERID.Length != 0) hash ^= WSBROKERID.GetHashCode();
      if (WSIBNO.Length != 0) hash ^= WSIBNO.GetHashCode();
      if (WSINVESTORACNO != 0L) hash ^= WSINVESTORACNO.GetHashCode();
      if (WSSKACNO != 0L) hash ^= WSSKACNO.GetHashCode();
      if (WSKIND.Length != 0) hash ^= WSKIND.GetHashCode();
      if (WSSPOOLNO.Length != 0) hash ^= WSSPOOLNO.GetHashCode();
      if (WSCOPIES != 0) hash ^= WSCOPIES.GetHashCode();
      if (WSCLOSEMARK.Length != 0) hash ^= WSCLOSEMARK.GetHashCode();
      if (WSPASSWORD.Length != 0) hash ^= WSPASSWORD.GetHashCode();
      if (WSTRADEDATE != 0L) hash ^= WSTRADEDATE.GetHashCode();
      if (WSEXCHID.Length != 0) hash ^= WSEXCHID.GetHashCode();
      if (WSKEY.Length != 0) hash ^= WSKEY.GetHashCode();
      if (WSKEYCONTRACTID.Length != 0) hash ^= WSKEYCONTRACTID.GetHashCode();
      if (WSKEYMATCHDATE != 0L) hash ^= WSKEYMATCHDATE.GetHashCode();
      if (WSKEYSPO != 0D) hash ^= WSKEYSPO.GetHashCode();
      if (WSKEYKIND != 0) hash ^= WSKEYKIND.GetHashCode();
      if (WSKEYBUYSELLKIND.Length != 0) hash ^= WSKEYBUYSELLKIND.GetHashCode();
      if (WSKEYSEQNO != 0) hash ^= WSKEYSEQNO.GetHashCode();
      if (WSKEYORDERNO.Length != 0) hash ^= WSKEYORDERNO.GetHashCode();
      if (WSKEYTRID.Length != 0) hash ^= WSKEYTRID.GetHashCode();
      if (WSKEY2ND.Length != 0) hash ^= WSKEY2ND.GetHashCode();
      if (WSKEYMATFLAG.Length != 0) hash ^= WSKEYMATFLAG.GetHashCode();
      if (WSKEYCURRENCY.Length != 0) hash ^= WSKEYCURRENCY.GetHashCode();
      if (WSMODEKIND.Length != 0) hash ^= WSMODEKIND.GetHashCode();
      if (WSQUERYUSABLEMARGIN.Length != 0) hash ^= WSQUERYUSABLEMARGIN.GetHashCode();
      if (FILLER2.Length != 0) hash ^= FILLER2.GetHashCode();
      if (WSSTRATEGYCODE.Length != 0) hash ^= WSSTRATEGYCODE.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (BrokerID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BrokerID);
      }
      if (Tqf != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Tqf);
      }
      if (IPMREPLYCODE.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(IPMREPLYCODE);
      }
      if (IPMTRANSCODE.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IPMTRANSCODE);
      }
      if (IPMFUNCTIONCODE != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(IPMFUNCTIONCODE);
      }
      if (IPMTERMID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(IPMTERMID);
      }
      if (IPMBROKERID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(IPMBROKERID);
      }
      if (IPMIBNO.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(IPMIBNO);
      }
      if (IPMBROKERNAME.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(IPMBROKERNAME);
      }
      if (IPMTELNO != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(IPMTELNO);
      }
      if (IPMTODAY != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(IPMTODAY);
      }
      if (FILLER1.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(FILLER1);
      }
      if (SENDDATAAREA.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(SENDDATAAREA);
      }
      if (SENDKEEPDATA.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(SENDKEEPDATA);
      }
      if (WSBROKERID.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WSBROKERID);
      }
      if (WSIBNO.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(WSIBNO);
      }
      if (WSINVESTORACNO != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(WSINVESTORACNO);
      }
      if (WSSKACNO != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(WSSKACNO);
      }
      if (WSKIND.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WSKIND);
      }
      if (WSSPOOLNO.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(WSSPOOLNO);
      }
      if (WSCOPIES != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(WSCOPIES);
      }
      if (WSCLOSEMARK.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(WSCLOSEMARK);
      }
      if (WSPASSWORD.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(WSPASSWORD);
      }
      if (WSTRADEDATE != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(WSTRADEDATE);
      }
      if (WSEXCHID.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(WSEXCHID);
      }
      if (WSKEY.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(WSKEY);
      }
      if (WSKEYCONTRACTID.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(WSKEYCONTRACTID);
      }
      if (WSKEYMATCHDATE != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(WSKEYMATCHDATE);
      }
      if (WSKEYSPO != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(WSKEYSPO);
      }
      if (WSKEYKIND != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(WSKEYKIND);
      }
      if (WSKEYBUYSELLKIND.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(WSKEYBUYSELLKIND);
      }
      if (WSKEYSEQNO != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(WSKEYSEQNO);
      }
      if (WSKEYORDERNO.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(WSKEYORDERNO);
      }
      if (WSKEYTRID.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(WSKEYTRID);
      }
      if (WSKEY2ND.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(WSKEY2ND);
      }
      if (WSKEYMATFLAG.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(WSKEYMATFLAG);
      }
      if (WSKEYCURRENCY.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(WSKEYCURRENCY);
      }
      if (WSMODEKIND.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(WSMODEKIND);
      }
      if (WSQUERYUSABLEMARGIN.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(WSQUERYUSABLEMARGIN);
      }
      if (FILLER2.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(FILLER2);
      }
      if (WSSTRATEGYCODE.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(WSSTRATEGYCODE);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (BrokerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerID);
      }
      if (Tqf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tqf);
      }
      if (IPMREPLYCODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IPMREPLYCODE);
      }
      if (IPMTRANSCODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IPMTRANSCODE);
      }
      if (IPMFUNCTIONCODE != 0D) {
        size += 1 + 8;
      }
      if (IPMTERMID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IPMTERMID);
      }
      if (IPMBROKERID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IPMBROKERID);
      }
      if (IPMIBNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IPMIBNO);
      }
      if (IPMBROKERNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IPMBROKERNAME);
      }
      if (IPMTELNO != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IPMTELNO);
      }
      if (IPMTODAY != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IPMTODAY);
      }
      if (FILLER1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FILLER1);
      }
      if (SENDDATAAREA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SENDDATAAREA);
      }
      if (SENDKEEPDATA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SENDKEEPDATA);
      }
      if (WSBROKERID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSBROKERID);
      }
      if (WSIBNO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSIBNO);
      }
      if (WSINVESTORACNO != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WSINVESTORACNO);
      }
      if (WSSKACNO != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WSSKACNO);
      }
      if (WSKIND.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSKIND);
      }
      if (WSSPOOLNO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSSPOOLNO);
      }
      if (WSCOPIES != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WSCOPIES);
      }
      if (WSCLOSEMARK.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSCLOSEMARK);
      }
      if (WSPASSWORD.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSPASSWORD);
      }
      if (WSTRADEDATE != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WSTRADEDATE);
      }
      if (WSEXCHID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSEXCHID);
      }
      if (WSKEY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSKEY);
      }
      if (WSKEYCONTRACTID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSKEYCONTRACTID);
      }
      if (WSKEYMATCHDATE != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WSKEYMATCHDATE);
      }
      if (WSKEYSPO != 0D) {
        size += 2 + 8;
      }
      if (WSKEYKIND != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WSKEYKIND);
      }
      if (WSKEYBUYSELLKIND.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSKEYBUYSELLKIND);
      }
      if (WSKEYSEQNO != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WSKEYSEQNO);
      }
      if (WSKEYORDERNO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSKEYORDERNO);
      }
      if (WSKEYTRID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSKEYTRID);
      }
      if (WSKEY2ND.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSKEY2ND);
      }
      if (WSKEYMATFLAG.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSKEYMATFLAG);
      }
      if (WSKEYCURRENCY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSKEYCURRENCY);
      }
      if (WSMODEKIND.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSMODEKIND);
      }
      if (WSQUERYUSABLEMARGIN.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSQUERYUSABLEMARGIN);
      }
      if (FILLER2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER2);
      }
      if (WSSTRATEGYCODE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSSTRATEGYCODE);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemQuery other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.BrokerID.Length != 0) {
        BrokerID = other.BrokerID;
      }
      if (other.Tqf != 0) {
        Tqf = other.Tqf;
      }
      if (other.IPMREPLYCODE.Length != 0) {
        IPMREPLYCODE = other.IPMREPLYCODE;
      }
      if (other.IPMTRANSCODE.Length != 0) {
        IPMTRANSCODE = other.IPMTRANSCODE;
      }
      if (other.IPMFUNCTIONCODE != 0D) {
        IPMFUNCTIONCODE = other.IPMFUNCTIONCODE;
      }
      if (other.IPMTERMID.Length != 0) {
        IPMTERMID = other.IPMTERMID;
      }
      if (other.IPMBROKERID.Length != 0) {
        IPMBROKERID = other.IPMBROKERID;
      }
      if (other.IPMIBNO.Length != 0) {
        IPMIBNO = other.IPMIBNO;
      }
      if (other.IPMBROKERNAME.Length != 0) {
        IPMBROKERNAME = other.IPMBROKERNAME;
      }
      if (other.IPMTELNO != 0) {
        IPMTELNO = other.IPMTELNO;
      }
      if (other.IPMTODAY != 0L) {
        IPMTODAY = other.IPMTODAY;
      }
      if (other.FILLER1.Length != 0) {
        FILLER1 = other.FILLER1;
      }
      if (other.SENDDATAAREA.Length != 0) {
        SENDDATAAREA = other.SENDDATAAREA;
      }
      if (other.SENDKEEPDATA.Length != 0) {
        SENDKEEPDATA = other.SENDKEEPDATA;
      }
      if (other.WSBROKERID.Length != 0) {
        WSBROKERID = other.WSBROKERID;
      }
      if (other.WSIBNO.Length != 0) {
        WSIBNO = other.WSIBNO;
      }
      if (other.WSINVESTORACNO != 0L) {
        WSINVESTORACNO = other.WSINVESTORACNO;
      }
      if (other.WSSKACNO != 0L) {
        WSSKACNO = other.WSSKACNO;
      }
      if (other.WSKIND.Length != 0) {
        WSKIND = other.WSKIND;
      }
      if (other.WSSPOOLNO.Length != 0) {
        WSSPOOLNO = other.WSSPOOLNO;
      }
      if (other.WSCOPIES != 0) {
        WSCOPIES = other.WSCOPIES;
      }
      if (other.WSCLOSEMARK.Length != 0) {
        WSCLOSEMARK = other.WSCLOSEMARK;
      }
      if (other.WSPASSWORD.Length != 0) {
        WSPASSWORD = other.WSPASSWORD;
      }
      if (other.WSTRADEDATE != 0L) {
        WSTRADEDATE = other.WSTRADEDATE;
      }
      if (other.WSEXCHID.Length != 0) {
        WSEXCHID = other.WSEXCHID;
      }
      if (other.WSKEY.Length != 0) {
        WSKEY = other.WSKEY;
      }
      if (other.WSKEYCONTRACTID.Length != 0) {
        WSKEYCONTRACTID = other.WSKEYCONTRACTID;
      }
      if (other.WSKEYMATCHDATE != 0L) {
        WSKEYMATCHDATE = other.WSKEYMATCHDATE;
      }
      if (other.WSKEYSPO != 0D) {
        WSKEYSPO = other.WSKEYSPO;
      }
      if (other.WSKEYKIND != 0) {
        WSKEYKIND = other.WSKEYKIND;
      }
      if (other.WSKEYBUYSELLKIND.Length != 0) {
        WSKEYBUYSELLKIND = other.WSKEYBUYSELLKIND;
      }
      if (other.WSKEYSEQNO != 0) {
        WSKEYSEQNO = other.WSKEYSEQNO;
      }
      if (other.WSKEYORDERNO.Length != 0) {
        WSKEYORDERNO = other.WSKEYORDERNO;
      }
      if (other.WSKEYTRID.Length != 0) {
        WSKEYTRID = other.WSKEYTRID;
      }
      if (other.WSKEY2ND.Length != 0) {
        WSKEY2ND = other.WSKEY2ND;
      }
      if (other.WSKEYMATFLAG.Length != 0) {
        WSKEYMATFLAG = other.WSKEYMATFLAG;
      }
      if (other.WSKEYCURRENCY.Length != 0) {
        WSKEYCURRENCY = other.WSKEYCURRENCY;
      }
      if (other.WSMODEKIND.Length != 0) {
        WSMODEKIND = other.WSMODEKIND;
      }
      if (other.WSQUERYUSABLEMARGIN.Length != 0) {
        WSQUERYUSABLEMARGIN = other.WSQUERYUSABLEMARGIN;
      }
      if (other.FILLER2.Length != 0) {
        FILLER2 = other.FILLER2;
      }
      if (other.WSSTRATEGYCODE.Length != 0) {
        WSSTRATEGYCODE = other.WSSTRATEGYCODE;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            BrokerID = input.ReadString();
            break;
          }
          case 24: {
            tqf_ = (global::Jsunfutures.Messages.TandemQueryFlag) input.ReadEnum();
            break;
          }
          case 34: {
            IPMREPLYCODE = input.ReadString();
            break;
          }
          case 42: {
            IPMTRANSCODE = input.ReadString();
            break;
          }
          case 49: {
            IPMFUNCTIONCODE = input.ReadDouble();
            break;
          }
          case 58: {
            IPMTERMID = input.ReadString();
            break;
          }
          case 66: {
            IPMBROKERID = input.ReadString();
            break;
          }
          case 74: {
            IPMIBNO = input.ReadString();
            break;
          }
          case 82: {
            IPMBROKERNAME = input.ReadString();
            break;
          }
          case 88: {
            IPMTELNO = input.ReadInt32();
            break;
          }
          case 96: {
            IPMTODAY = input.ReadInt64();
            break;
          }
          case 106: {
            FILLER1 = input.ReadString();
            break;
          }
          case 114: {
            SENDDATAAREA = input.ReadString();
            break;
          }
          case 122: {
            SENDKEEPDATA = input.ReadString();
            break;
          }
          case 130: {
            WSBROKERID = input.ReadString();
            break;
          }
          case 138: {
            WSIBNO = input.ReadString();
            break;
          }
          case 144: {
            WSINVESTORACNO = input.ReadInt64();
            break;
          }
          case 152: {
            WSSKACNO = input.ReadInt64();
            break;
          }
          case 162: {
            WSKIND = input.ReadString();
            break;
          }
          case 170: {
            WSSPOOLNO = input.ReadString();
            break;
          }
          case 176: {
            WSCOPIES = input.ReadInt32();
            break;
          }
          case 186: {
            WSCLOSEMARK = input.ReadString();
            break;
          }
          case 194: {
            WSPASSWORD = input.ReadString();
            break;
          }
          case 200: {
            WSTRADEDATE = input.ReadInt64();
            break;
          }
          case 210: {
            WSEXCHID = input.ReadString();
            break;
          }
          case 218: {
            WSKEY = input.ReadString();
            break;
          }
          case 226: {
            WSKEYCONTRACTID = input.ReadString();
            break;
          }
          case 232: {
            WSKEYMATCHDATE = input.ReadInt64();
            break;
          }
          case 241: {
            WSKEYSPO = input.ReadDouble();
            break;
          }
          case 248: {
            WSKEYKIND = input.ReadInt32();
            break;
          }
          case 258: {
            WSKEYBUYSELLKIND = input.ReadString();
            break;
          }
          case 264: {
            WSKEYSEQNO = input.ReadInt32();
            break;
          }
          case 274: {
            WSKEYORDERNO = input.ReadString();
            break;
          }
          case 282: {
            WSKEYTRID = input.ReadString();
            break;
          }
          case 290: {
            WSKEY2ND = input.ReadString();
            break;
          }
          case 298: {
            WSKEYMATFLAG = input.ReadString();
            break;
          }
          case 306: {
            WSKEYCURRENCY = input.ReadString();
            break;
          }
          case 314: {
            WSMODEKIND = input.ReadString();
            break;
          }
          case 322: {
            WSQUERYUSABLEMARGIN = input.ReadString();
            break;
          }
          case 330: {
            FILLER2 = input.ReadString();
            break;
          }
          case 338: {
            WSSTRATEGYCODE = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///tandem回復的Message
  /// </summary>
  public sealed partial class TandemResult : pb::IMessage<TandemResult> {
    private static readonly pb::MessageParser<TandemResult> _parser = new pb::MessageParser<TandemResult>(() => new TandemResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult(TandemResult other) : this() {
      account_ = other.account_;
      brokerID_ = other.brokerID_;
      tqf_ = other.tqf_;
      TandemReplyArea = other.tandemReplyArea_ != null ? other.TandemReplyArea.Clone() : null;
      aggregate_ = other.aggregate_.Clone();
      detail_ = other.detail_.Clone();
      todayAggregate_ = other.todayAggregate_.Clone();
      todayDetail_ = other.todayDetail_.Clone();
      todayTrade_ = other.todayTrade_.Clone();
      equityCallSellside_ = other.equityCallSellside_.Clone();
      Currency = other.currency_ != null ? other.Currency.Clone() : null;
      daytradeAggregate_ = other.daytradeAggregate_.Clone();
      BestPosition = other.bestPosition_ != null ? other.BestPosition.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult Clone() {
      return new TandemResult(this);
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///客戶帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BrokerID" field.</summary>
    public const int BrokerIDFieldNumber = 2;
    private string brokerID_ = "";
    /// <summary>
    ///期貨商代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerID {
      get { return brokerID_; }
      set {
        brokerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tqf" field.</summary>
    public const int TqfFieldNumber = 3;
    private global::Jsunfutures.Messages.TandemQueryFlag tqf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TandemQueryFlag Tqf {
      get { return tqf_; }
      set {
        tqf_ = value;
      }
    }

    /// <summary>Field number for the "tandemReplyArea" field.</summary>
    public const int TandemReplyAreaFieldNumber = 4;
    private global::Jsunfutures.Messages.TandemReplyArea tandemReplyArea_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TandemReplyArea TandemReplyArea {
      get { return tandemReplyArea_; }
      set {
        tandemReplyArea_ = value;
      }
    }

    /// <summary>Field number for the "aggregate" field.</summary>
    public const int AggregateFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.TandemResult_AGGREGATE> _repeated_aggregate_codec
        = pb::FieldCodec.ForMessage(42, global::Jsunfutures.Messages.TandemResult_AGGREGATE.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_AGGREGATE> aggregate_ = new pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_AGGREGATE>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_AGGREGATE> Aggregate {
      get { return aggregate_; }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.TandemResult_DETAIL> _repeated_detail_codec
        = pb::FieldCodec.ForMessage(50, global::Jsunfutures.Messages.TandemResult_DETAIL.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_DETAIL> detail_ = new pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_DETAIL>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_DETAIL> Detail {
      get { return detail_; }
    }

    /// <summary>Field number for the "today_aggregate" field.</summary>
    public const int TodayAggregateFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.TandemResult_TODAY_AGGREGATE> _repeated_todayAggregate_codec
        = pb::FieldCodec.ForMessage(58, global::Jsunfutures.Messages.TandemResult_TODAY_AGGREGATE.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_TODAY_AGGREGATE> todayAggregate_ = new pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_TODAY_AGGREGATE>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_TODAY_AGGREGATE> TodayAggregate {
      get { return todayAggregate_; }
    }

    /// <summary>Field number for the "today_detail" field.</summary>
    public const int TodayDetailFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.TandemResult_TODAY_DETAIL> _repeated_todayDetail_codec
        = pb::FieldCodec.ForMessage(66, global::Jsunfutures.Messages.TandemResult_TODAY_DETAIL.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_TODAY_DETAIL> todayDetail_ = new pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_TODAY_DETAIL>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_TODAY_DETAIL> TodayDetail {
      get { return todayDetail_; }
    }

    /// <summary>Field number for the "today_trade" field.</summary>
    public const int TodayTradeFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.TandemResult_TODAY_TRADE> _repeated_todayTrade_codec
        = pb::FieldCodec.ForMessage(74, global::Jsunfutures.Messages.TandemResult_TODAY_TRADE.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_TODAY_TRADE> todayTrade_ = new pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_TODAY_TRADE>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_TODAY_TRADE> TodayTrade {
      get { return todayTrade_; }
    }

    /// <summary>Field number for the "equity_call_sellside" field.</summary>
    public const int EquityCallSellsideFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.TandemResult_EQUITY_CALL_SELLSIDE> _repeated_equityCallSellside_codec
        = pb::FieldCodec.ForMessage(82, global::Jsunfutures.Messages.TandemResult_EQUITY_CALL_SELLSIDE.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_EQUITY_CALL_SELLSIDE> equityCallSellside_ = new pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_EQUITY_CALL_SELLSIDE>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_EQUITY_CALL_SELLSIDE> EquityCallSellside {
      get { return equityCallSellside_; }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 11;
    private global::Jsunfutures.Messages.TandemResult_CURRENCY currency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TandemResult_CURRENCY Currency {
      get { return currency_; }
      set {
        currency_ = value;
      }
    }

    /// <summary>Field number for the "daytrade_aggregate" field.</summary>
    public const int DaytradeAggregateFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.TandemResult_DAYTRADE_AGGREGATE> _repeated_daytradeAggregate_codec
        = pb::FieldCodec.ForMessage(98, global::Jsunfutures.Messages.TandemResult_DAYTRADE_AGGREGATE.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_DAYTRADE_AGGREGATE> daytradeAggregate_ = new pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_DAYTRADE_AGGREGATE>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.TandemResult_DAYTRADE_AGGREGATE> DaytradeAggregate {
      get { return daytradeAggregate_; }
    }

    /// <summary>Field number for the "best_position" field.</summary>
    public const int BestPositionFieldNumber = 13;
    private global::Jsunfutures.Messages.TandemResult_BEST_POSITION bestPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TandemResult_BEST_POSITION BestPosition {
      get { return bestPosition_; }
      set {
        bestPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (BrokerID != other.BrokerID) return false;
      if (Tqf != other.Tqf) return false;
      if (!object.Equals(TandemReplyArea, other.TandemReplyArea)) return false;
      if(!aggregate_.Equals(other.aggregate_)) return false;
      if(!detail_.Equals(other.detail_)) return false;
      if(!todayAggregate_.Equals(other.todayAggregate_)) return false;
      if(!todayDetail_.Equals(other.todayDetail_)) return false;
      if(!todayTrade_.Equals(other.todayTrade_)) return false;
      if(!equityCallSellside_.Equals(other.equityCallSellside_)) return false;
      if (!object.Equals(Currency, other.Currency)) return false;
      if(!daytradeAggregate_.Equals(other.daytradeAggregate_)) return false;
      if (!object.Equals(BestPosition, other.BestPosition)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (BrokerID.Length != 0) hash ^= BrokerID.GetHashCode();
      if (Tqf != 0) hash ^= Tqf.GetHashCode();
      if (tandemReplyArea_ != null) hash ^= TandemReplyArea.GetHashCode();
      hash ^= aggregate_.GetHashCode();
      hash ^= detail_.GetHashCode();
      hash ^= todayAggregate_.GetHashCode();
      hash ^= todayDetail_.GetHashCode();
      hash ^= todayTrade_.GetHashCode();
      hash ^= equityCallSellside_.GetHashCode();
      if (currency_ != null) hash ^= Currency.GetHashCode();
      hash ^= daytradeAggregate_.GetHashCode();
      if (bestPosition_ != null) hash ^= BestPosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (BrokerID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BrokerID);
      }
      if (Tqf != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Tqf);
      }
      if (tandemReplyArea_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TandemReplyArea);
      }
      aggregate_.WriteTo(output, _repeated_aggregate_codec);
      detail_.WriteTo(output, _repeated_detail_codec);
      todayAggregate_.WriteTo(output, _repeated_todayAggregate_codec);
      todayDetail_.WriteTo(output, _repeated_todayDetail_codec);
      todayTrade_.WriteTo(output, _repeated_todayTrade_codec);
      equityCallSellside_.WriteTo(output, _repeated_equityCallSellside_codec);
      if (currency_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Currency);
      }
      daytradeAggregate_.WriteTo(output, _repeated_daytradeAggregate_codec);
      if (bestPosition_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(BestPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (BrokerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerID);
      }
      if (Tqf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tqf);
      }
      if (tandemReplyArea_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TandemReplyArea);
      }
      size += aggregate_.CalculateSize(_repeated_aggregate_codec);
      size += detail_.CalculateSize(_repeated_detail_codec);
      size += todayAggregate_.CalculateSize(_repeated_todayAggregate_codec);
      size += todayDetail_.CalculateSize(_repeated_todayDetail_codec);
      size += todayTrade_.CalculateSize(_repeated_todayTrade_codec);
      size += equityCallSellside_.CalculateSize(_repeated_equityCallSellside_codec);
      if (currency_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Currency);
      }
      size += daytradeAggregate_.CalculateSize(_repeated_daytradeAggregate_codec);
      if (bestPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BestPosition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemResult other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.BrokerID.Length != 0) {
        BrokerID = other.BrokerID;
      }
      if (other.Tqf != 0) {
        Tqf = other.Tqf;
      }
      if (other.tandemReplyArea_ != null) {
        if (tandemReplyArea_ == null) {
          tandemReplyArea_ = new global::Jsunfutures.Messages.TandemReplyArea();
        }
        TandemReplyArea.MergeFrom(other.TandemReplyArea);
      }
      aggregate_.Add(other.aggregate_);
      detail_.Add(other.detail_);
      todayAggregate_.Add(other.todayAggregate_);
      todayDetail_.Add(other.todayDetail_);
      todayTrade_.Add(other.todayTrade_);
      equityCallSellside_.Add(other.equityCallSellside_);
      if (other.currency_ != null) {
        if (currency_ == null) {
          currency_ = new global::Jsunfutures.Messages.TandemResult_CURRENCY();
        }
        Currency.MergeFrom(other.Currency);
      }
      daytradeAggregate_.Add(other.daytradeAggregate_);
      if (other.bestPosition_ != null) {
        if (bestPosition_ == null) {
          bestPosition_ = new global::Jsunfutures.Messages.TandemResult_BEST_POSITION();
        }
        BestPosition.MergeFrom(other.BestPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            BrokerID = input.ReadString();
            break;
          }
          case 24: {
            tqf_ = (global::Jsunfutures.Messages.TandemQueryFlag) input.ReadEnum();
            break;
          }
          case 34: {
            if (tandemReplyArea_ == null) {
              tandemReplyArea_ = new global::Jsunfutures.Messages.TandemReplyArea();
            }
            input.ReadMessage(tandemReplyArea_);
            break;
          }
          case 42: {
            aggregate_.AddEntriesFrom(input, _repeated_aggregate_codec);
            break;
          }
          case 50: {
            detail_.AddEntriesFrom(input, _repeated_detail_codec);
            break;
          }
          case 58: {
            todayAggregate_.AddEntriesFrom(input, _repeated_todayAggregate_codec);
            break;
          }
          case 66: {
            todayDetail_.AddEntriesFrom(input, _repeated_todayDetail_codec);
            break;
          }
          case 74: {
            todayTrade_.AddEntriesFrom(input, _repeated_todayTrade_codec);
            break;
          }
          case 82: {
            equityCallSellside_.AddEntriesFrom(input, _repeated_equityCallSellside_codec);
            break;
          }
          case 90: {
            if (currency_ == null) {
              currency_ = new global::Jsunfutures.Messages.TandemResult_CURRENCY();
            }
            input.ReadMessage(currency_);
            break;
          }
          case 98: {
            daytradeAggregate_.AddEntriesFrom(input, _repeated_daytradeAggregate_codec);
            break;
          }
          case 106: {
            if (bestPosition_ == null) {
              bestPosition_ = new global::Jsunfutures.Messages.TandemResult_BEST_POSITION();
            }
            input.ReadMessage(bestPosition_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Reference REPLU_FUT340_DATA    FEP
  /// </summary>
  public sealed partial class TandemReplyArea : pb::IMessage<TandemReplyArea> {
    private static readonly pb::MessageParser<TandemReplyArea> _parser = new pb::MessageParser<TandemReplyArea>(() => new TandemReplyArea());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemReplyArea> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemReplyArea() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemReplyArea(TandemReplyArea other) : this() {
      wRREPLYCODE_ = other.wRREPLYCODE_;
      wRADVISORY_ = other.wRADVISORY_;
      wRKEYCONTRACTID_ = other.wRKEYCONTRACTID_;
      wRKEYMATCHDATE_ = other.wRKEYMATCHDATE_;
      wRKEYSPO_ = other.wRKEYSPO_;
      wRKEYKIND_ = other.wRKEYKIND_;
      wRKEYBUYSELLKIND_ = other.wRKEYBUYSELLKIND_;
      wRKEYSEQNO_ = other.wRKEYSEQNO_;
      wRKEYORDERNO_ = other.wRKEYORDERNO_;
      wRKEYTRID_ = other.wRKEYTRID_;
      wRKEY2ND_ = other.wRKEY2ND_;
      wRKEYMATFLAG_ = other.wRKEYMATFLAG_;
      wRKEYCURRENCY_ = other.wRKEYCURRENCY_;
      fILLER1_ = other.fILLER1_;
      wRTELLERNO_ = other.wRTELLERNO_;
      wRACNO_ = other.wRACNO_;
      wRSKACNO_ = other.wRSKACNO_;
      fILLER2_ = other.fILLER2_;
      wRCLOSEMARK_ = other.wRCLOSEMARK_;
      wRMAINTAINRATE_ = other.wRMAINTAINRATE_;
      wRACCOUNTEQUITY_ = other.wRACCOUNTEQUITY_;
      wRINOUTAMT_ = other.wRINOUTAMT_;
      wRUSABLEMARGIN_ = other.wRUSABLEMARGIN_;
      wRCOVERINCOME_ = other.wRCOVERINCOME_;
      wRINITIALMARGIN_ = other.wRINITIALMARGIN_;
      wRMAINTAINMARGIN_ = other.wRMAINTAINMARGIN_;
      wRVARINCOME_ = other.wRVARINCOME_;
      wRACCOUNTBALANCE_ = other.wRACCOUNTBALANCE_;
      wRREALIZEPREMIUN_ = other.wRREALIZEPREMIUN_;
      wRUNREALIZEPREMIUM_ = other.wRUNREALIZEPREMIUM_;
      wRBOPTIONVALUE_ = other.wRBOPTIONVALUE_;
      wRSOPTIONVALUE_ = other.wRSOPTIONVALUE_;
      wRYESEQU_ = other.wRYESEQU_;
      wRYESACCOUNTBALANCE_ = other.wRYESACCOUNTBALANCE_;
      wRTODAYTOT_ = other.wRTODAYTOT_;
      wRTODAYTAX_ = other.wRTODAYTAX_;
      wREQUITY_ = other.wREQUITY_;
      wRDETTELMARK_ = other.wRDETTELMARK_;
      wRRISKRATE_ = other.wRRISKRATE_;
      wRCOVERRATE_ = other.wRCOVERRATE_;
      wRFULLMARGIN_ = other.wRFULLMARGIN_;
      wRFULLMAINTAINMARGIN_ = other.wRFULLMAINTAINMARGIN_;
      wRFULLUSABLEMARGIN_ = other.wRFULLUSABLEMARGIN_;
      wRFULLRATE_ = other.wRFULLRATE_;
      wRFULLRISKRATE_ = other.wRFULLRISKRATE_;
      wRDAYTRADEFLAG_ = other.wRDAYTRADEFLAG_;
      wRIOPFLAG_ = other.wRIOPFLAG_;
      wRYESTOTEQUITY_ = other.wRYESTOTEQUITY_;
      fILLER3_ = other.fILLER3_;
      wRIBNO_ = other.wRIBNO_;
      wRCOVERAMT_ = other.wRCOVERAMT_;
      wRADDMARGIN_ = other.wRADDMARGIN_;
      wRCASHUSABLE_ = other.wRCASHUSABLE_;
      wRFULLCASHUSABLE_ = other.wRFULLCASHUSABLE_;
      wRUNREALIZEDINCOME_ = other.wRUNREALIZEDINCOME_;
      wROINITIALMARGIN_ = other.wROINITIALMARGIN_;
      wROMAINTAINMARGIN_ = other.wROMAINTAINMARGIN_;
      wROFULLINITIALMARGIN_ = other.wROFULLINITIALMARGIN_;
      wROFULLMAINTAINMARGIN_ = other.wROFULLMAINTAINMARGIN_;
      wRADDITIONMARGIN_ = other.wRADDITIONMARGIN_;
      wRNOMARGIN_ = other.wRNOMARGIN_;
      wRPROMPTAMT_ = other.wRPROMPTAMT_;
      wRBPOPTIONVALUE_ = other.wRBPOPTIONVALUE_;
      wRSPOPTIONVALUE_ = other.wRSPOPTIONVALUE_;
      wRBCOPTIONVALUE_ = other.wRBCOPTIONVALUE_;
      wRSCOPTIONVALUE_ = other.wRSCOPTIONVALUE_;
      wRADDITIONMARGINRATE_ = other.wRADDITIONMARGINRATE_;
      fILLER4_ = other.fILLER4_;
      wRCOUNT_ = other.wRCOUNT_;
      wRDATAFLAG1_ = other.wRDATAFLAG1_;
      wRDATAFLAG2_ = other.wRDATAFLAG2_;
      wRREADDATA_ = other.wRREADDATA_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemReplyArea Clone() {
      return new TandemReplyArea(this);
    }

    /// <summary>Field number for the "WR_REPLY_CODE" field.</summary>
    public const int WRREPLYCODEFieldNumber = 1;
    private int wRREPLYCODE_;
    /// <summary>
    ///訊息代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WRREPLYCODE {
      get { return wRREPLYCODE_; }
      set {
        wRREPLYCODE_ = value;
      }
    }

    /// <summary>Field number for the "WR_ADVISORY" field.</summary>
    public const int WRADVISORYFieldNumber = 2;
    private string wRADVISORY_ = "";
    /// <summary>
    ///回傳之中文訊息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRADVISORY {
      get { return wRADVISORY_; }
      set {
        wRADVISORY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_KEY_CONTRACT_ID" field.</summary>
    public const int WRKEYCONTRACTIDFieldNumber = 3;
    private string wRKEYCONTRACTID_ = "";
    /// <summary>
    ///  for more data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRKEYCONTRACTID {
      get { return wRKEYCONTRACTID_; }
      set {
        wRKEYCONTRACTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_KEY_MATCH_DATE" field.</summary>
    public const int WRKEYMATCHDATEFieldNumber = 4;
    private string wRKEYMATCHDATE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRKEYMATCHDATE {
      get { return wRKEYMATCHDATE_; }
      set {
        wRKEYMATCHDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_KEY_SPO" field.</summary>
    public const int WRKEYSPOFieldNumber = 5;
    private string wRKEYSPO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRKEYSPO {
      get { return wRKEYSPO_; }
      set {
        wRKEYSPO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_KEY_KIND" field.</summary>
    public const int WRKEYKINDFieldNumber = 6;
    private global::Jsunfutures.Messages.FepKind wRKEYKIND_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.FepKind WRKEYKIND {
      get { return wRKEYKIND_; }
      set {
        wRKEYKIND_ = value;
      }
    }

    /// <summary>Field number for the "WR_KEY_BUY_SELL_KIND" field.</summary>
    public const int WRKEYBUYSELLKINDFieldNumber = 7;
    private global::Jsunfutures.Messages.BS wRKEYBUYSELLKIND_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.BS WRKEYBUYSELLKIND {
      get { return wRKEYBUYSELLKIND_; }
      set {
        wRKEYBUYSELLKIND_ = value;
      }
    }

    /// <summary>Field number for the "WR_KEY_SEQNO" field.</summary>
    public const int WRKEYSEQNOFieldNumber = 8;
    private int wRKEYSEQNO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WRKEYSEQNO {
      get { return wRKEYSEQNO_; }
      set {
        wRKEYSEQNO_ = value;
      }
    }

    /// <summary>Field number for the "WR_KEY_ORDER_NO" field.</summary>
    public const int WRKEYORDERNOFieldNumber = 9;
    private string wRKEYORDERNO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRKEYORDERNO {
      get { return wRKEYORDERNO_; }
      set {
        wRKEYORDERNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_KEY_TR_ID" field.</summary>
    public const int WRKEYTRIDFieldNumber = 10;
    private string wRKEYTRID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRKEYTRID {
      get { return wRKEYTRID_; }
      set {
        wRKEYTRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_KEY_2ND" field.</summary>
    public const int WRKEY2NDFieldNumber = 11;
    private string wRKEY2ND_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRKEY2ND {
      get { return wRKEY2ND_; }
      set {
        wRKEY2ND_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_KEY_MAT_FLAG" field.</summary>
    public const int WRKEYMATFLAGFieldNumber = 12;
    private string wRKEYMATFLAG_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRKEYMATFLAG {
      get { return wRKEYMATFLAG_; }
      set {
        wRKEYMATFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_KEY_CURRENCY" field.</summary>
    public const int WRKEYCURRENCYFieldNumber = 13;
    private global::Jsunfutures.Messages.Currency wRKEYCURRENCY_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Currency WRKEYCURRENCY {
      get { return wRKEYCURRENCY_; }
      set {
        wRKEYCURRENCY_ = value;
      }
    }

    /// <summary>Field number for the "FILLER1" field.</summary>
    public const int FILLER1FieldNumber = 14;
    private string fILLER1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER1 {
      get { return fILLER1_; }
      set {
        fILLER1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_TELLER_NO" field.</summary>
    public const int WRTELLERNOFieldNumber = 15;
    private string wRTELLERNO_ = "";
    /// <summary>
    ///櫃員代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRTELLERNO {
      get { return wRTELLERNO_; }
      set {
        wRTELLERNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_ACNO" field.</summary>
    public const int WRACNOFieldNumber = 16;
    private string wRACNO_ = "";
    /// <summary>
    ///帳戶  交易員代號(期貨帳號)	期貨帳號	交易員代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRACNO {
      get { return wRACNO_; }
      set {
        wRACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_SK_ACNO" field.</summary>
    public const int WRSKACNOFieldNumber = 17;
    private string wRSKACNO_ = "";
    /// <summary>
    ///FILLER(證券帳號)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRSKACNO {
      get { return wRSKACNO_; }
      set {
        wRSKACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER2" field.</summary>
    public const int FILLER2FieldNumber = 18;
    private string fILLER2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER2 {
      get { return fILLER2_; }
      set {
        fILLER2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_CLOSE_MARK" field.</summary>
    public const int WRCLOSEMARKFieldNumber = 19;
    private string wRCLOSEMARK_ = "";
    /// <summary>
    ///已結帳/結帳中/未結帳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRCLOSEMARK {
      get { return wRCLOSEMARK_; }
      set {
        wRCLOSEMARK_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_MAINTAIN_RATE" field.</summary>
    public const int WRMAINTAINRATEFieldNumber = 20;
    private string wRMAINTAINRATE_ = "";
    /// <summary>
    ///維持率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRMAINTAINRATE {
      get { return wRMAINTAINRATE_; }
      set {
        wRMAINTAINRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_ACCOUNT_EQUITY" field.</summary>
    public const int WRACCOUNTEQUITYFieldNumber = 21;
    private double wRACCOUNTEQUITY_;
    /// <summary>
    ///權益數(帳戶權益)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRACCOUNTEQUITY {
      get { return wRACCOUNTEQUITY_; }
      set {
        wRACCOUNTEQUITY_ = value;
      }
    }

    /// <summary>Field number for the "WR_IN_OUT_AMT" field.</summary>
    public const int WRINOUTAMTFieldNumber = 22;
    private double wRINOUTAMT_;
    /// <summary>
    ///今日存提款
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRINOUTAMT {
      get { return wRINOUTAMT_; }
      set {
        wRINOUTAMT_ = value;
      }
    }

    /// <summary>Field number for the "WR_USABLE_MARGIN" field.</summary>
    public const int WRUSABLEMARGINFieldNumber = 23;
    private double wRUSABLEMARGIN_;
    /// <summary>
    ///可動用(出金)保證金(可用餘額)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRUSABLEMARGIN {
      get { return wRUSABLEMARGIN_; }
      set {
        wRUSABLEMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_COVER_INCOME" field.</summary>
    public const int WRCOVERINCOMEFieldNumber = 24;
    private double wRCOVERINCOME_;
    /// <summary>
    ///本日期貨平倉損益淨額(平倉損益)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRCOVERINCOME {
      get { return wRCOVERINCOME_; }
      set {
        wRCOVERINCOME_ = value;
      }
    }

    /// <summary>Field number for the "WR_INITIAL_MARGIN" field.</summary>
    public const int WRINITIALMARGINFieldNumber = 25;
    private double wRINITIALMARGIN_;
    /// <summary>
    ///原始保証金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRINITIALMARGIN {
      get { return wRINITIALMARGIN_; }
      set {
        wRINITIALMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_MAINTAIN_MARGIN" field.</summary>
    public const int WRMAINTAINMARGINFieldNumber = 26;
    private double wRMAINTAINMARGIN_;
    /// <summary>
    ///維持保証金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRMAINTAINMARGIN {
      get { return wRMAINTAINMARGIN_; }
      set {
        wRMAINTAINMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_VAR_INCOME" field.</summary>
    public const int WRVARINCOMEFieldNumber = 27;
    private double wRVARINCOME_;
    /// <summary>
    ///未沖銷期貨浮動損益(浮動損益)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRVARINCOME {
      get { return wRVARINCOME_; }
      set {
        wRVARINCOME_ = value;
      }
    }

    /// <summary>Field number for the "WR_ACCOUNT_BALANCE" field.</summary>
    public const int WRACCOUNTBALANCEFieldNumber = 28;
    private double wRACCOUNTBALANCE_;
    /// <summary>
    ///本日餘額(帳戶餘額)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRACCOUNTBALANCE {
      get { return wRACCOUNTBALANCE_; }
      set {
        wRACCOUNTBALANCE_ = value;
      }
    }

    /// <summary>Field number for the "WR_REALIZE_PREMIUN" field.</summary>
    public const int WRREALIZEPREMIUNFieldNumber = 29;
    private double wRREALIZEPREMIUN_;
    /// <summary>
    ///權利金收入與支出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRREALIZEPREMIUN {
      get { return wRREALIZEPREMIUN_; }
      set {
        wRREALIZEPREMIUN_ = value;
      }
    }

    /// <summary>Field number for the "WR_UNREALIZE_PREMIUM" field.</summary>
    public const int WRUNREALIZEPREMIUMFieldNumber = 30;
    private double wRUNREALIZEPREMIUM_;
    /// <summary>
    /// 委託權利金(預扣權利金)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRUNREALIZEPREMIUM {
      get { return wRUNREALIZEPREMIUM_; }
      set {
        wRUNREALIZEPREMIUM_ = value;
      }
    }

    /// <summary>Field number for the "WR_B_OPTION_VALUE" field.</summary>
    public const int WRBOPTIONVALUEFieldNumber = 31;
    private double wRBOPTIONVALUE_;
    /// <summary>
    ///未沖銷買方選擇權市值(買方市值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRBOPTIONVALUE {
      get { return wRBOPTIONVALUE_; }
      set {
        wRBOPTIONVALUE_ = value;
      }
    }

    /// <summary>Field number for the "WR_S_OPTION_VALUE" field.</summary>
    public const int WRSOPTIONVALUEFieldNumber = 32;
    private double wRSOPTIONVALUE_;
    /// <summary>
    ///      PIC S9(14)V9(2) COMP.未沖銷賣方選擇權市值(賣方市值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRSOPTIONVALUE {
      get { return wRSOPTIONVALUE_; }
      set {
        wRSOPTIONVALUE_ = value;
      }
    }

    /// <summary>Field number for the "WR_YES_EQU" field.</summary>
    public const int WRYESEQUFieldNumber = 33;
    private double wRYESEQU_;
    /// <summary>
    /// PIC S9(14)V99 COMP.  前日權益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRYESEQU {
      get { return wRYESEQU_; }
      set {
        wRYESEQU_ = value;
      }
    }

    /// <summary>Field number for the "WR_YES_ACCOUNT_BALANCE" field.</summary>
    public const int WRYESACCOUNTBALANCEFieldNumber = 34;
    private double wRYESACCOUNTBALANCE_;
    /// <summary>
    /// PIC S9(14)V99 COMP.前日帳戶餘額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRYESACCOUNTBALANCE {
      get { return wRYESACCOUNTBALANCE_; }
      set {
        wRYESACCOUNTBALANCE_ = value;
      }
    }

    /// <summary>Field number for the "WR_TODAY_TOT" field.</summary>
    public const int WRTODAYTOTFieldNumber = 35;
    private double wRTODAYTOT_;
    /// <summary>
    ///           PIC S9(14)V9(2) COMP.今日已實現費用(今日總手續費)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRTODAYTOT {
      get { return wRTODAYTOT_; }
      set {
        wRTODAYTOT_ = value;
      }
    }

    /// <summary>Field number for the "WR_TODAY_TAX" field.</summary>
    public const int WRTODAYTAXFieldNumber = 36;
    private double wRTODAYTAX_;
    /// <summary>
    ///           PIC S9(14)V9(2) COMP.今日總交易稅
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRTODAYTAX {
      get { return wRTODAYTAX_; }
      set {
        wRTODAYTAX_ = value;
      }
    }

    /// <summary>Field number for the "WR_EQUITY" field.</summary>
    public const int WREQUITYFieldNumber = 37;
    private double wREQUITY_;
    /// <summary>
    ///           PIC S9(14)V9(2) COMP.權益總值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WREQUITY {
      get { return wREQUITY_; }
      set {
        wREQUITY_ = value;
      }
    }

    /// <summary>Field number for the "WR_DET_TEL_MARK" field.</summary>
    public const int WRDETTELMARKFieldNumber = 38;
    private string wRDETTELMARK_ = "";
    /// <summary>
    ///           PIC X(10).FILLER(客戶申請出金註記)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRDETTELMARK {
      get { return wRDETTELMARK_; }
      set {
        wRDETTELMARK_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_RISK_RATE" field.</summary>
    public const int WRRISKRATEFieldNumber = 39;
    private string wRRISKRATE_ = "";
    /// <summary>
    ///           PIC X(9).風險指標
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRRISKRATE {
      get { return wRRISKRATE_; }
      set {
        wRRISKRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_COVER_RATE" field.</summary>
    public const int WRCOVERRATEFieldNumber = 40;
    private double wRCOVERRATE_;
    /// <summary>
    ///           PIC S9(3)V9(2).浮動報酬率(FILLER)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRCOVERRATE {
      get { return wRCOVERRATE_; }
      set {
        wRCOVERRATE_ = value;
      }
    }

    /// <summary>Field number for the "WR_FULL_MARGIN" field.</summary>
    public const int WRFULLMARGINFieldNumber = 41;
    private double wRFULLMARGIN_;
    /// <summary>
    ///           PIC S9(14)V9(2) COMP.足額原始保証金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRFULLMARGIN {
      get { return wRFULLMARGIN_; }
      set {
        wRFULLMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_FULL_MAINTAIN_MARGIN" field.</summary>
    public const int WRFULLMAINTAINMARGINFieldNumber = 42;
    private double wRFULLMAINTAINMARGIN_;
    /// <summary>
    ///   PIC S9(14)V9(2) COMP.足額維持保証金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRFULLMAINTAINMARGIN {
      get { return wRFULLMAINTAINMARGIN_; }
      set {
        wRFULLMAINTAINMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_FULL_USABLE_MARGIN" field.</summary>
    public const int WRFULLUSABLEMARGINFieldNumber = 43;
    private double wRFULLUSABLEMARGIN_;
    /// <summary>
    ///    PIC S9(14)V9(2) COMP.足額可用餘額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRFULLUSABLEMARGIN {
      get { return wRFULLUSABLEMARGIN_; }
      set {
        wRFULLUSABLEMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_FULL_RATE" field.</summary>
    public const int WRFULLRATEFieldNumber = 44;
    private string wRFULLRATE_ = "";
    /// <summary>
    ///   PIC X(9).足額維持率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRFULLRATE {
      get { return wRFULLRATE_; }
      set {
        wRFULLRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_FULL_RISK_RATE" field.</summary>
    public const int WRFULLRISKRATEFieldNumber = 45;
    private string wRFULLRISKRATE_ = "";
    /// <summary>
    ///   PIC X(9)."足額風險指標
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRFULLRISKRATE {
      get { return wRFULLRISKRATE_; }
      set {
        wRFULLRISKRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_DAY_TRADE_FLAG" field.</summary>
    public const int WRDAYTRADEFLAGFieldNumber = 46;
    private string wRDAYTRADEFLAG_ = "";
    /// <summary>
    ///   PIC X(01).客戶是否有當沖未平倉交易註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRDAYTRADEFLAG {
      get { return wRDAYTRADEFLAG_; }
      set {
        wRDAYTRADEFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_IOP_FLAG" field.</summary>
    public const int WRIOPFLAGFieldNumber = 47;
    private string wRIOPFLAG_ = "";
    /// <summary>
    ///  PIC X(1).最佳化註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRIOPFLAG {
      get { return wRIOPFLAG_; }
      set {
        wRIOPFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_YES_TOT_EQUITY" field.</summary>
    public const int WRYESTOTEQUITYFieldNumber = 48;
    private double wRYESTOTEQUITY_;
    /// <summary>
    ///    PIC S9(14)V9(2) COMP."前日權益總值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRYESTOTEQUITY {
      get { return wRYESTOTEQUITY_; }
      set {
        wRYESTOTEQUITY_ = value;
      }
    }

    /// <summary>Field number for the "FILLER3" field.</summary>
    public const int FILLER3FieldNumber = 49;
    private string fILLER3_ = "";
    /// <summary>
    ///    PIC X(17).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER3 {
      get { return fILLER3_; }
      set {
        fILLER3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_IB_NO" field.</summary>
    public const int WRIBNOFieldNumber = 50;
    private string wRIBNO_ = "";
    /// <summary>
    ///   PIC X(3).IB代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRIBNO {
      get { return wRIBNO_; }
      set {
        wRIBNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_COVER_AMT" field.</summary>
    public const int WRCOVERAMTFieldNumber = 51;
    private double wRCOVERAMT_;
    /// <summary>
    ///        PIC 9(9)V9(2) COMP."有價證券抵繳總額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRCOVERAMT {
      get { return wRCOVERAMT_; }
      set {
        wRCOVERAMT_ = value;
      }
    }

    /// <summary>Field number for the "WR_ADD_MARGIN" field.</summary>
    public const int WRADDMARGINFieldNumber = 52;
    private double wRADDMARGIN_;
    /// <summary>
    ///        PIC 9(9)V9(2) COMP.有價可用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRADDMARGIN {
      get { return wRADDMARGIN_; }
      set {
        wRADDMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_CASH_USABLE" field.</summary>
    public const int WRCASHUSABLEFieldNumber = 53;
    private double wRCASHUSABLE_;
    /// <summary>
    ///        PIC S9(11)V9(2) COMP現金可用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRCASHUSABLE {
      get { return wRCASHUSABLE_; }
      set {
        wRCASHUSABLE_ = value;
      }
    }

    /// <summary>Field number for the "WR_FULL_CASH_USABLE" field.</summary>
    public const int WRFULLCASHUSABLEFieldNumber = 54;
    private double wRFULLCASHUSABLE_;
    /// <summary>
    ///  PIC S9(11)V9(2) COMP.足額現金可用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRFULLCASHUSABLE {
      get { return wRFULLCASHUSABLE_; }
      set {
        wRFULLCASHUSABLE_ = value;
      }
    }

    /// <summary>Field number for the "WR_UNREALIZED_INCOME" field.</summary>
    public const int WRUNREALIZEDINCOMEFieldNumber = 55;
    private double wRUNREALIZEDINCOME_;
    /// <summary>
    ///       PIC S9(14)V9(2) COMP.未實現利得
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRUNREALIZEDINCOME {
      get { return wRUNREALIZEDINCOME_; }
      set {
        wRUNREALIZEDINCOME_ = value;
      }
    }

    /// <summary>Field number for the "WR_O_INITIAL_MARGIN" field.</summary>
    public const int WROINITIALMARGINFieldNumber = 56;
    private double wROINITIALMARGIN_;
    /// <summary>
    /// PIC 9(14)V9(2) COMP.委託原始保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WROINITIALMARGIN {
      get { return wROINITIALMARGIN_; }
      set {
        wROINITIALMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_O_MAINTAIN_MARGIN" field.</summary>
    public const int WROMAINTAINMARGINFieldNumber = 57;
    private double wROMAINTAINMARGIN_;
    /// <summary>
    /// PIC 9(14)V9(2) COMP.委託維持保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WROMAINTAINMARGIN {
      get { return wROMAINTAINMARGIN_; }
      set {
        wROMAINTAINMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_O_FULL_INITIAL_MARGIN" field.</summary>
    public const int WROFULLINITIALMARGINFieldNumber = 58;
    private double wROFULLINITIALMARGIN_;
    /// <summary>
    /// PIC 9(14)V9(2) COMP.委託足額原始保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WROFULLINITIALMARGIN {
      get { return wROFULLINITIALMARGIN_; }
      set {
        wROFULLINITIALMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_O_FULL_MAINTAIN_MARGIN" field.</summary>
    public const int WROFULLMAINTAINMARGINFieldNumber = 59;
    private double wROFULLMAINTAINMARGIN_;
    /// <summary>
    ///PIC 9(14)V9(2) COMP.委託足額維持保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WROFULLMAINTAINMARGIN {
      get { return wROFULLMAINTAINMARGIN_; }
      set {
        wROFULLMAINTAINMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_ADDITION_MARGIN" field.</summary>
    public const int WRADDITIONMARGINFieldNumber = 60;
    private double wRADDITIONMARGIN_;
    /// <summary>
    ///        PIC S9(14)V9(2) COMP.加收保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRADDITIONMARGIN {
      get { return wRADDITIONMARGIN_; }
      set {
        wRADDITIONMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_NO_MARGIN" field.</summary>
    public const int WRNOMARGINFieldNumber = 61;
    private double wRNOMARGIN_;
    /// <summary>
    ///       PIC S9(14)V9(2) COMP.超額/追繳保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRNOMARGIN {
      get { return wRNOMARGIN_; }
      set {
        wRNOMARGIN_ = value;
      }
    }

    /// <summary>Field number for the "WR_PROMPT_AMT" field.</summary>
    public const int WRPROMPTAMTFieldNumber = 62;
    private double wRPROMPTAMT_;
    /// <summary>
    ///         PIC S9(14)V9(2) COMP.到期履約損益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRPROMPTAMT {
      get { return wRPROMPTAMT_; }
      set {
        wRPROMPTAMT_ = value;
      }
    }

    /// <summary>Field number for the "WR_BP_OPTION_VALUE" field.</summary>
    public const int WRBPOPTIONVALUEFieldNumber = 63;
    private double wRBPOPTIONVALUE_;
    /// <summary>
    ///      PIC S9(14)V9(2) COMP.未沖銷賣權買方選擇權市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRBPOPTIONVALUE {
      get { return wRBPOPTIONVALUE_; }
      set {
        wRBPOPTIONVALUE_ = value;
      }
    }

    /// <summary>Field number for the "WR_SP_OPTION_VALUE" field.</summary>
    public const int WRSPOPTIONVALUEFieldNumber = 64;
    private double wRSPOPTIONVALUE_;
    /// <summary>
    ///      PIC S9(14)V9(2) COMP.未沖銷賣權賣方選擇權市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRSPOPTIONVALUE {
      get { return wRSPOPTIONVALUE_; }
      set {
        wRSPOPTIONVALUE_ = value;
      }
    }

    /// <summary>Field number for the "WR_BC_OPTION_VALUE" field.</summary>
    public const int WRBCOPTIONVALUEFieldNumber = 65;
    private double wRBCOPTIONVALUE_;
    /// <summary>
    ///      PIC S9(14)V9(2) COMP.未沖銷買權買方選擇權市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRBCOPTIONVALUE {
      get { return wRBCOPTIONVALUE_; }
      set {
        wRBCOPTIONVALUE_ = value;
      }
    }

    /// <summary>Field number for the "WR_SC_OPTION_VALUE" field.</summary>
    public const int WRSCOPTIONVALUEFieldNumber = 66;
    private double wRSCOPTIONVALUE_;
    /// <summary>
    ///      PIC S9(14)V9(2) COMP.未沖銷買權賣方選擇權市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRSCOPTIONVALUE {
      get { return wRSCOPTIONVALUE_; }
      set {
        wRSCOPTIONVALUE_ = value;
      }
    }

    /// <summary>Field number for the "WR_ADDITION_MARGIN_RATE" field.</summary>
    public const int WRADDITIONMARGINRATEFieldNumber = 67;
    private double wRADDITIONMARGINRATE_;
    /// <summary>
    ///   PIC 9(1)V9(3) COMP加收保證金指標
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WRADDITIONMARGINRATE {
      get { return wRADDITIONMARGINRATE_; }
      set {
        wRADDITIONMARGINRATE_ = value;
      }
    }

    /// <summary>Field number for the "FILLER4" field.</summary>
    public const int FILLER4FieldNumber = 68;
    private string fILLER4_ = "";
    /// <summary>
    ///         PIC X(32).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER4 {
      get { return fILLER4_; }
      set {
        fILLER4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_COUNT" field.</summary>
    public const int WRCOUNTFieldNumber = 69;
    private int wRCOUNT_;
    /// <summary>
    ///       PIC 9(string ).資料筆數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WRCOUNT {
      get { return wRCOUNT_; }
      set {
        wRCOUNT_ = value;
      }
    }

    /// <summary>Field number for the "WR_DATA_FLAG_1" field.</summary>
    public const int WRDATAFLAG1FieldNumber = 70;
    private string wRDATAFLAG1_ = "";
    /// <summary>
    ///    05 WR_DETAIL_AREA                OCCURS 9 TIMES.  以下 OCCURS 9 次,每筆長度400bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRDATAFLAG1 {
      get { return wRDATAFLAG1_; }
      set {
        wRDATAFLAG1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_DATA_FLAG_2" field.</summary>
    public const int WRDATAFLAG2FieldNumber = 71;
    private string wRDATAFLAG2_ = "";
    /// <summary>
    ///          PIC X(1).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRDATAFLAG2 {
      get { return wRDATAFLAG2_; }
      set {
        wRDATAFLAG2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_READ_DATA" field.</summary>
    public const int WRREADDATAFieldNumber = 72;
    private string wRREADDATA_ = "";
    /// <summary>
    ///          PIC X(398).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRREADDATA {
      get { return wRREADDATA_; }
      set {
        wRREADDATA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemReplyArea);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemReplyArea other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WRREPLYCODE != other.WRREPLYCODE) return false;
      if (WRADVISORY != other.WRADVISORY) return false;
      if (WRKEYCONTRACTID != other.WRKEYCONTRACTID) return false;
      if (WRKEYMATCHDATE != other.WRKEYMATCHDATE) return false;
      if (WRKEYSPO != other.WRKEYSPO) return false;
      if (WRKEYKIND != other.WRKEYKIND) return false;
      if (WRKEYBUYSELLKIND != other.WRKEYBUYSELLKIND) return false;
      if (WRKEYSEQNO != other.WRKEYSEQNO) return false;
      if (WRKEYORDERNO != other.WRKEYORDERNO) return false;
      if (WRKEYTRID != other.WRKEYTRID) return false;
      if (WRKEY2ND != other.WRKEY2ND) return false;
      if (WRKEYMATFLAG != other.WRKEYMATFLAG) return false;
      if (WRKEYCURRENCY != other.WRKEYCURRENCY) return false;
      if (FILLER1 != other.FILLER1) return false;
      if (WRTELLERNO != other.WRTELLERNO) return false;
      if (WRACNO != other.WRACNO) return false;
      if (WRSKACNO != other.WRSKACNO) return false;
      if (FILLER2 != other.FILLER2) return false;
      if (WRCLOSEMARK != other.WRCLOSEMARK) return false;
      if (WRMAINTAINRATE != other.WRMAINTAINRATE) return false;
      if (WRACCOUNTEQUITY != other.WRACCOUNTEQUITY) return false;
      if (WRINOUTAMT != other.WRINOUTAMT) return false;
      if (WRUSABLEMARGIN != other.WRUSABLEMARGIN) return false;
      if (WRCOVERINCOME != other.WRCOVERINCOME) return false;
      if (WRINITIALMARGIN != other.WRINITIALMARGIN) return false;
      if (WRMAINTAINMARGIN != other.WRMAINTAINMARGIN) return false;
      if (WRVARINCOME != other.WRVARINCOME) return false;
      if (WRACCOUNTBALANCE != other.WRACCOUNTBALANCE) return false;
      if (WRREALIZEPREMIUN != other.WRREALIZEPREMIUN) return false;
      if (WRUNREALIZEPREMIUM != other.WRUNREALIZEPREMIUM) return false;
      if (WRBOPTIONVALUE != other.WRBOPTIONVALUE) return false;
      if (WRSOPTIONVALUE != other.WRSOPTIONVALUE) return false;
      if (WRYESEQU != other.WRYESEQU) return false;
      if (WRYESACCOUNTBALANCE != other.WRYESACCOUNTBALANCE) return false;
      if (WRTODAYTOT != other.WRTODAYTOT) return false;
      if (WRTODAYTAX != other.WRTODAYTAX) return false;
      if (WREQUITY != other.WREQUITY) return false;
      if (WRDETTELMARK != other.WRDETTELMARK) return false;
      if (WRRISKRATE != other.WRRISKRATE) return false;
      if (WRCOVERRATE != other.WRCOVERRATE) return false;
      if (WRFULLMARGIN != other.WRFULLMARGIN) return false;
      if (WRFULLMAINTAINMARGIN != other.WRFULLMAINTAINMARGIN) return false;
      if (WRFULLUSABLEMARGIN != other.WRFULLUSABLEMARGIN) return false;
      if (WRFULLRATE != other.WRFULLRATE) return false;
      if (WRFULLRISKRATE != other.WRFULLRISKRATE) return false;
      if (WRDAYTRADEFLAG != other.WRDAYTRADEFLAG) return false;
      if (WRIOPFLAG != other.WRIOPFLAG) return false;
      if (WRYESTOTEQUITY != other.WRYESTOTEQUITY) return false;
      if (FILLER3 != other.FILLER3) return false;
      if (WRIBNO != other.WRIBNO) return false;
      if (WRCOVERAMT != other.WRCOVERAMT) return false;
      if (WRADDMARGIN != other.WRADDMARGIN) return false;
      if (WRCASHUSABLE != other.WRCASHUSABLE) return false;
      if (WRFULLCASHUSABLE != other.WRFULLCASHUSABLE) return false;
      if (WRUNREALIZEDINCOME != other.WRUNREALIZEDINCOME) return false;
      if (WROINITIALMARGIN != other.WROINITIALMARGIN) return false;
      if (WROMAINTAINMARGIN != other.WROMAINTAINMARGIN) return false;
      if (WROFULLINITIALMARGIN != other.WROFULLINITIALMARGIN) return false;
      if (WROFULLMAINTAINMARGIN != other.WROFULLMAINTAINMARGIN) return false;
      if (WRADDITIONMARGIN != other.WRADDITIONMARGIN) return false;
      if (WRNOMARGIN != other.WRNOMARGIN) return false;
      if (WRPROMPTAMT != other.WRPROMPTAMT) return false;
      if (WRBPOPTIONVALUE != other.WRBPOPTIONVALUE) return false;
      if (WRSPOPTIONVALUE != other.WRSPOPTIONVALUE) return false;
      if (WRBCOPTIONVALUE != other.WRBCOPTIONVALUE) return false;
      if (WRSCOPTIONVALUE != other.WRSCOPTIONVALUE) return false;
      if (WRADDITIONMARGINRATE != other.WRADDITIONMARGINRATE) return false;
      if (FILLER4 != other.FILLER4) return false;
      if (WRCOUNT != other.WRCOUNT) return false;
      if (WRDATAFLAG1 != other.WRDATAFLAG1) return false;
      if (WRDATAFLAG2 != other.WRDATAFLAG2) return false;
      if (WRREADDATA != other.WRREADDATA) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WRREPLYCODE != 0) hash ^= WRREPLYCODE.GetHashCode();
      if (WRADVISORY.Length != 0) hash ^= WRADVISORY.GetHashCode();
      if (WRKEYCONTRACTID.Length != 0) hash ^= WRKEYCONTRACTID.GetHashCode();
      if (WRKEYMATCHDATE.Length != 0) hash ^= WRKEYMATCHDATE.GetHashCode();
      if (WRKEYSPO.Length != 0) hash ^= WRKEYSPO.GetHashCode();
      if (WRKEYKIND != 0) hash ^= WRKEYKIND.GetHashCode();
      if (WRKEYBUYSELLKIND != 0) hash ^= WRKEYBUYSELLKIND.GetHashCode();
      if (WRKEYSEQNO != 0) hash ^= WRKEYSEQNO.GetHashCode();
      if (WRKEYORDERNO.Length != 0) hash ^= WRKEYORDERNO.GetHashCode();
      if (WRKEYTRID.Length != 0) hash ^= WRKEYTRID.GetHashCode();
      if (WRKEY2ND.Length != 0) hash ^= WRKEY2ND.GetHashCode();
      if (WRKEYMATFLAG.Length != 0) hash ^= WRKEYMATFLAG.GetHashCode();
      if (WRKEYCURRENCY != 0) hash ^= WRKEYCURRENCY.GetHashCode();
      if (FILLER1.Length != 0) hash ^= FILLER1.GetHashCode();
      if (WRTELLERNO.Length != 0) hash ^= WRTELLERNO.GetHashCode();
      if (WRACNO.Length != 0) hash ^= WRACNO.GetHashCode();
      if (WRSKACNO.Length != 0) hash ^= WRSKACNO.GetHashCode();
      if (FILLER2.Length != 0) hash ^= FILLER2.GetHashCode();
      if (WRCLOSEMARK.Length != 0) hash ^= WRCLOSEMARK.GetHashCode();
      if (WRMAINTAINRATE.Length != 0) hash ^= WRMAINTAINRATE.GetHashCode();
      if (WRACCOUNTEQUITY != 0D) hash ^= WRACCOUNTEQUITY.GetHashCode();
      if (WRINOUTAMT != 0D) hash ^= WRINOUTAMT.GetHashCode();
      if (WRUSABLEMARGIN != 0D) hash ^= WRUSABLEMARGIN.GetHashCode();
      if (WRCOVERINCOME != 0D) hash ^= WRCOVERINCOME.GetHashCode();
      if (WRINITIALMARGIN != 0D) hash ^= WRINITIALMARGIN.GetHashCode();
      if (WRMAINTAINMARGIN != 0D) hash ^= WRMAINTAINMARGIN.GetHashCode();
      if (WRVARINCOME != 0D) hash ^= WRVARINCOME.GetHashCode();
      if (WRACCOUNTBALANCE != 0D) hash ^= WRACCOUNTBALANCE.GetHashCode();
      if (WRREALIZEPREMIUN != 0D) hash ^= WRREALIZEPREMIUN.GetHashCode();
      if (WRUNREALIZEPREMIUM != 0D) hash ^= WRUNREALIZEPREMIUM.GetHashCode();
      if (WRBOPTIONVALUE != 0D) hash ^= WRBOPTIONVALUE.GetHashCode();
      if (WRSOPTIONVALUE != 0D) hash ^= WRSOPTIONVALUE.GetHashCode();
      if (WRYESEQU != 0D) hash ^= WRYESEQU.GetHashCode();
      if (WRYESACCOUNTBALANCE != 0D) hash ^= WRYESACCOUNTBALANCE.GetHashCode();
      if (WRTODAYTOT != 0D) hash ^= WRTODAYTOT.GetHashCode();
      if (WRTODAYTAX != 0D) hash ^= WRTODAYTAX.GetHashCode();
      if (WREQUITY != 0D) hash ^= WREQUITY.GetHashCode();
      if (WRDETTELMARK.Length != 0) hash ^= WRDETTELMARK.GetHashCode();
      if (WRRISKRATE.Length != 0) hash ^= WRRISKRATE.GetHashCode();
      if (WRCOVERRATE != 0D) hash ^= WRCOVERRATE.GetHashCode();
      if (WRFULLMARGIN != 0D) hash ^= WRFULLMARGIN.GetHashCode();
      if (WRFULLMAINTAINMARGIN != 0D) hash ^= WRFULLMAINTAINMARGIN.GetHashCode();
      if (WRFULLUSABLEMARGIN != 0D) hash ^= WRFULLUSABLEMARGIN.GetHashCode();
      if (WRFULLRATE.Length != 0) hash ^= WRFULLRATE.GetHashCode();
      if (WRFULLRISKRATE.Length != 0) hash ^= WRFULLRISKRATE.GetHashCode();
      if (WRDAYTRADEFLAG.Length != 0) hash ^= WRDAYTRADEFLAG.GetHashCode();
      if (WRIOPFLAG.Length != 0) hash ^= WRIOPFLAG.GetHashCode();
      if (WRYESTOTEQUITY != 0D) hash ^= WRYESTOTEQUITY.GetHashCode();
      if (FILLER3.Length != 0) hash ^= FILLER3.GetHashCode();
      if (WRIBNO.Length != 0) hash ^= WRIBNO.GetHashCode();
      if (WRCOVERAMT != 0D) hash ^= WRCOVERAMT.GetHashCode();
      if (WRADDMARGIN != 0D) hash ^= WRADDMARGIN.GetHashCode();
      if (WRCASHUSABLE != 0D) hash ^= WRCASHUSABLE.GetHashCode();
      if (WRFULLCASHUSABLE != 0D) hash ^= WRFULLCASHUSABLE.GetHashCode();
      if (WRUNREALIZEDINCOME != 0D) hash ^= WRUNREALIZEDINCOME.GetHashCode();
      if (WROINITIALMARGIN != 0D) hash ^= WROINITIALMARGIN.GetHashCode();
      if (WROMAINTAINMARGIN != 0D) hash ^= WROMAINTAINMARGIN.GetHashCode();
      if (WROFULLINITIALMARGIN != 0D) hash ^= WROFULLINITIALMARGIN.GetHashCode();
      if (WROFULLMAINTAINMARGIN != 0D) hash ^= WROFULLMAINTAINMARGIN.GetHashCode();
      if (WRADDITIONMARGIN != 0D) hash ^= WRADDITIONMARGIN.GetHashCode();
      if (WRNOMARGIN != 0D) hash ^= WRNOMARGIN.GetHashCode();
      if (WRPROMPTAMT != 0D) hash ^= WRPROMPTAMT.GetHashCode();
      if (WRBPOPTIONVALUE != 0D) hash ^= WRBPOPTIONVALUE.GetHashCode();
      if (WRSPOPTIONVALUE != 0D) hash ^= WRSPOPTIONVALUE.GetHashCode();
      if (WRBCOPTIONVALUE != 0D) hash ^= WRBCOPTIONVALUE.GetHashCode();
      if (WRSCOPTIONVALUE != 0D) hash ^= WRSCOPTIONVALUE.GetHashCode();
      if (WRADDITIONMARGINRATE != 0D) hash ^= WRADDITIONMARGINRATE.GetHashCode();
      if (FILLER4.Length != 0) hash ^= FILLER4.GetHashCode();
      if (WRCOUNT != 0) hash ^= WRCOUNT.GetHashCode();
      if (WRDATAFLAG1.Length != 0) hash ^= WRDATAFLAG1.GetHashCode();
      if (WRDATAFLAG2.Length != 0) hash ^= WRDATAFLAG2.GetHashCode();
      if (WRREADDATA.Length != 0) hash ^= WRREADDATA.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WRREPLYCODE != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WRREPLYCODE);
      }
      if (WRADVISORY.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WRADVISORY);
      }
      if (WRKEYCONTRACTID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WRKEYCONTRACTID);
      }
      if (WRKEYMATCHDATE.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WRKEYMATCHDATE);
      }
      if (WRKEYSPO.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WRKEYSPO);
      }
      if (WRKEYKIND != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) WRKEYKIND);
      }
      if (WRKEYBUYSELLKIND != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) WRKEYBUYSELLKIND);
      }
      if (WRKEYSEQNO != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(WRKEYSEQNO);
      }
      if (WRKEYORDERNO.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WRKEYORDERNO);
      }
      if (WRKEYTRID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WRKEYTRID);
      }
      if (WRKEY2ND.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(WRKEY2ND);
      }
      if (WRKEYMATFLAG.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WRKEYMATFLAG);
      }
      if (WRKEYCURRENCY != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) WRKEYCURRENCY);
      }
      if (FILLER1.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(FILLER1);
      }
      if (WRTELLERNO.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(WRTELLERNO);
      }
      if (WRACNO.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WRACNO);
      }
      if (WRSKACNO.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(WRSKACNO);
      }
      if (FILLER2.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(FILLER2);
      }
      if (WRCLOSEMARK.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(WRCLOSEMARK);
      }
      if (WRMAINTAINRATE.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WRMAINTAINRATE);
      }
      if (WRACCOUNTEQUITY != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(WRACCOUNTEQUITY);
      }
      if (WRINOUTAMT != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(WRINOUTAMT);
      }
      if (WRUSABLEMARGIN != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(WRUSABLEMARGIN);
      }
      if (WRCOVERINCOME != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(WRCOVERINCOME);
      }
      if (WRINITIALMARGIN != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(WRINITIALMARGIN);
      }
      if (WRMAINTAINMARGIN != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(WRMAINTAINMARGIN);
      }
      if (WRVARINCOME != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(WRVARINCOME);
      }
      if (WRACCOUNTBALANCE != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(WRACCOUNTBALANCE);
      }
      if (WRREALIZEPREMIUN != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(WRREALIZEPREMIUN);
      }
      if (WRUNREALIZEPREMIUM != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(WRUNREALIZEPREMIUM);
      }
      if (WRBOPTIONVALUE != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(WRBOPTIONVALUE);
      }
      if (WRSOPTIONVALUE != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(WRSOPTIONVALUE);
      }
      if (WRYESEQU != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(WRYESEQU);
      }
      if (WRYESACCOUNTBALANCE != 0D) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(WRYESACCOUNTBALANCE);
      }
      if (WRTODAYTOT != 0D) {
        output.WriteRawTag(153, 2);
        output.WriteDouble(WRTODAYTOT);
      }
      if (WRTODAYTAX != 0D) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(WRTODAYTAX);
      }
      if (WREQUITY != 0D) {
        output.WriteRawTag(169, 2);
        output.WriteDouble(WREQUITY);
      }
      if (WRDETTELMARK.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(WRDETTELMARK);
      }
      if (WRRISKRATE.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(WRRISKRATE);
      }
      if (WRCOVERRATE != 0D) {
        output.WriteRawTag(193, 2);
        output.WriteDouble(WRCOVERRATE);
      }
      if (WRFULLMARGIN != 0D) {
        output.WriteRawTag(201, 2);
        output.WriteDouble(WRFULLMARGIN);
      }
      if (WRFULLMAINTAINMARGIN != 0D) {
        output.WriteRawTag(209, 2);
        output.WriteDouble(WRFULLMAINTAINMARGIN);
      }
      if (WRFULLUSABLEMARGIN != 0D) {
        output.WriteRawTag(217, 2);
        output.WriteDouble(WRFULLUSABLEMARGIN);
      }
      if (WRFULLRATE.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(WRFULLRATE);
      }
      if (WRFULLRISKRATE.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(WRFULLRISKRATE);
      }
      if (WRDAYTRADEFLAG.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(WRDAYTRADEFLAG);
      }
      if (WRIOPFLAG.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(WRIOPFLAG);
      }
      if (WRYESTOTEQUITY != 0D) {
        output.WriteRawTag(129, 3);
        output.WriteDouble(WRYESTOTEQUITY);
      }
      if (FILLER3.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(FILLER3);
      }
      if (WRIBNO.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(WRIBNO);
      }
      if (WRCOVERAMT != 0D) {
        output.WriteRawTag(153, 3);
        output.WriteDouble(WRCOVERAMT);
      }
      if (WRADDMARGIN != 0D) {
        output.WriteRawTag(161, 3);
        output.WriteDouble(WRADDMARGIN);
      }
      if (WRCASHUSABLE != 0D) {
        output.WriteRawTag(169, 3);
        output.WriteDouble(WRCASHUSABLE);
      }
      if (WRFULLCASHUSABLE != 0D) {
        output.WriteRawTag(177, 3);
        output.WriteDouble(WRFULLCASHUSABLE);
      }
      if (WRUNREALIZEDINCOME != 0D) {
        output.WriteRawTag(185, 3);
        output.WriteDouble(WRUNREALIZEDINCOME);
      }
      if (WROINITIALMARGIN != 0D) {
        output.WriteRawTag(193, 3);
        output.WriteDouble(WROINITIALMARGIN);
      }
      if (WROMAINTAINMARGIN != 0D) {
        output.WriteRawTag(201, 3);
        output.WriteDouble(WROMAINTAINMARGIN);
      }
      if (WROFULLINITIALMARGIN != 0D) {
        output.WriteRawTag(209, 3);
        output.WriteDouble(WROFULLINITIALMARGIN);
      }
      if (WROFULLMAINTAINMARGIN != 0D) {
        output.WriteRawTag(217, 3);
        output.WriteDouble(WROFULLMAINTAINMARGIN);
      }
      if (WRADDITIONMARGIN != 0D) {
        output.WriteRawTag(225, 3);
        output.WriteDouble(WRADDITIONMARGIN);
      }
      if (WRNOMARGIN != 0D) {
        output.WriteRawTag(233, 3);
        output.WriteDouble(WRNOMARGIN);
      }
      if (WRPROMPTAMT != 0D) {
        output.WriteRawTag(241, 3);
        output.WriteDouble(WRPROMPTAMT);
      }
      if (WRBPOPTIONVALUE != 0D) {
        output.WriteRawTag(249, 3);
        output.WriteDouble(WRBPOPTIONVALUE);
      }
      if (WRSPOPTIONVALUE != 0D) {
        output.WriteRawTag(129, 4);
        output.WriteDouble(WRSPOPTIONVALUE);
      }
      if (WRBCOPTIONVALUE != 0D) {
        output.WriteRawTag(137, 4);
        output.WriteDouble(WRBCOPTIONVALUE);
      }
      if (WRSCOPTIONVALUE != 0D) {
        output.WriteRawTag(145, 4);
        output.WriteDouble(WRSCOPTIONVALUE);
      }
      if (WRADDITIONMARGINRATE != 0D) {
        output.WriteRawTag(153, 4);
        output.WriteDouble(WRADDITIONMARGINRATE);
      }
      if (FILLER4.Length != 0) {
        output.WriteRawTag(162, 4);
        output.WriteString(FILLER4);
      }
      if (WRCOUNT != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(WRCOUNT);
      }
      if (WRDATAFLAG1.Length != 0) {
        output.WriteRawTag(178, 4);
        output.WriteString(WRDATAFLAG1);
      }
      if (WRDATAFLAG2.Length != 0) {
        output.WriteRawTag(186, 4);
        output.WriteString(WRDATAFLAG2);
      }
      if (WRREADDATA.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteString(WRREADDATA);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WRREPLYCODE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WRREPLYCODE);
      }
      if (WRADVISORY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRADVISORY);
      }
      if (WRKEYCONTRACTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRKEYCONTRACTID);
      }
      if (WRKEYMATCHDATE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRKEYMATCHDATE);
      }
      if (WRKEYSPO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRKEYSPO);
      }
      if (WRKEYKIND != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WRKEYKIND);
      }
      if (WRKEYBUYSELLKIND != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WRKEYBUYSELLKIND);
      }
      if (WRKEYSEQNO != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WRKEYSEQNO);
      }
      if (WRKEYORDERNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRKEYORDERNO);
      }
      if (WRKEYTRID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRKEYTRID);
      }
      if (WRKEY2ND.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRKEY2ND);
      }
      if (WRKEYMATFLAG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRKEYMATFLAG);
      }
      if (WRKEYCURRENCY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WRKEYCURRENCY);
      }
      if (FILLER1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FILLER1);
      }
      if (WRTELLERNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRTELLERNO);
      }
      if (WRACNO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRACNO);
      }
      if (WRSKACNO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRSKACNO);
      }
      if (FILLER2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER2);
      }
      if (WRCLOSEMARK.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRCLOSEMARK);
      }
      if (WRMAINTAINRATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRMAINTAINRATE);
      }
      if (WRACCOUNTEQUITY != 0D) {
        size += 2 + 8;
      }
      if (WRINOUTAMT != 0D) {
        size += 2 + 8;
      }
      if (WRUSABLEMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRCOVERINCOME != 0D) {
        size += 2 + 8;
      }
      if (WRINITIALMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRMAINTAINMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRVARINCOME != 0D) {
        size += 2 + 8;
      }
      if (WRACCOUNTBALANCE != 0D) {
        size += 2 + 8;
      }
      if (WRREALIZEPREMIUN != 0D) {
        size += 2 + 8;
      }
      if (WRUNREALIZEPREMIUM != 0D) {
        size += 2 + 8;
      }
      if (WRBOPTIONVALUE != 0D) {
        size += 2 + 8;
      }
      if (WRSOPTIONVALUE != 0D) {
        size += 2 + 8;
      }
      if (WRYESEQU != 0D) {
        size += 2 + 8;
      }
      if (WRYESACCOUNTBALANCE != 0D) {
        size += 2 + 8;
      }
      if (WRTODAYTOT != 0D) {
        size += 2 + 8;
      }
      if (WRTODAYTAX != 0D) {
        size += 2 + 8;
      }
      if (WREQUITY != 0D) {
        size += 2 + 8;
      }
      if (WRDETTELMARK.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRDETTELMARK);
      }
      if (WRRISKRATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRRISKRATE);
      }
      if (WRCOVERRATE != 0D) {
        size += 2 + 8;
      }
      if (WRFULLMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRFULLMAINTAINMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRFULLUSABLEMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRFULLRATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRFULLRATE);
      }
      if (WRFULLRISKRATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRFULLRISKRATE);
      }
      if (WRDAYTRADEFLAG.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRDAYTRADEFLAG);
      }
      if (WRIOPFLAG.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRIOPFLAG);
      }
      if (WRYESTOTEQUITY != 0D) {
        size += 2 + 8;
      }
      if (FILLER3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER3);
      }
      if (WRIBNO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRIBNO);
      }
      if (WRCOVERAMT != 0D) {
        size += 2 + 8;
      }
      if (WRADDMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRCASHUSABLE != 0D) {
        size += 2 + 8;
      }
      if (WRFULLCASHUSABLE != 0D) {
        size += 2 + 8;
      }
      if (WRUNREALIZEDINCOME != 0D) {
        size += 2 + 8;
      }
      if (WROINITIALMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WROMAINTAINMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WROFULLINITIALMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WROFULLMAINTAINMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRADDITIONMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRNOMARGIN != 0D) {
        size += 2 + 8;
      }
      if (WRPROMPTAMT != 0D) {
        size += 2 + 8;
      }
      if (WRBPOPTIONVALUE != 0D) {
        size += 2 + 8;
      }
      if (WRSPOPTIONVALUE != 0D) {
        size += 2 + 8;
      }
      if (WRBCOPTIONVALUE != 0D) {
        size += 2 + 8;
      }
      if (WRSCOPTIONVALUE != 0D) {
        size += 2 + 8;
      }
      if (WRADDITIONMARGINRATE != 0D) {
        size += 2 + 8;
      }
      if (FILLER4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER4);
      }
      if (WRCOUNT != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WRCOUNT);
      }
      if (WRDATAFLAG1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRDATAFLAG1);
      }
      if (WRDATAFLAG2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRDATAFLAG2);
      }
      if (WRREADDATA.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRREADDATA);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemReplyArea other) {
      if (other == null) {
        return;
      }
      if (other.WRREPLYCODE != 0) {
        WRREPLYCODE = other.WRREPLYCODE;
      }
      if (other.WRADVISORY.Length != 0) {
        WRADVISORY = other.WRADVISORY;
      }
      if (other.WRKEYCONTRACTID.Length != 0) {
        WRKEYCONTRACTID = other.WRKEYCONTRACTID;
      }
      if (other.WRKEYMATCHDATE.Length != 0) {
        WRKEYMATCHDATE = other.WRKEYMATCHDATE;
      }
      if (other.WRKEYSPO.Length != 0) {
        WRKEYSPO = other.WRKEYSPO;
      }
      if (other.WRKEYKIND != 0) {
        WRKEYKIND = other.WRKEYKIND;
      }
      if (other.WRKEYBUYSELLKIND != 0) {
        WRKEYBUYSELLKIND = other.WRKEYBUYSELLKIND;
      }
      if (other.WRKEYSEQNO != 0) {
        WRKEYSEQNO = other.WRKEYSEQNO;
      }
      if (other.WRKEYORDERNO.Length != 0) {
        WRKEYORDERNO = other.WRKEYORDERNO;
      }
      if (other.WRKEYTRID.Length != 0) {
        WRKEYTRID = other.WRKEYTRID;
      }
      if (other.WRKEY2ND.Length != 0) {
        WRKEY2ND = other.WRKEY2ND;
      }
      if (other.WRKEYMATFLAG.Length != 0) {
        WRKEYMATFLAG = other.WRKEYMATFLAG;
      }
      if (other.WRKEYCURRENCY != 0) {
        WRKEYCURRENCY = other.WRKEYCURRENCY;
      }
      if (other.FILLER1.Length != 0) {
        FILLER1 = other.FILLER1;
      }
      if (other.WRTELLERNO.Length != 0) {
        WRTELLERNO = other.WRTELLERNO;
      }
      if (other.WRACNO.Length != 0) {
        WRACNO = other.WRACNO;
      }
      if (other.WRSKACNO.Length != 0) {
        WRSKACNO = other.WRSKACNO;
      }
      if (other.FILLER2.Length != 0) {
        FILLER2 = other.FILLER2;
      }
      if (other.WRCLOSEMARK.Length != 0) {
        WRCLOSEMARK = other.WRCLOSEMARK;
      }
      if (other.WRMAINTAINRATE.Length != 0) {
        WRMAINTAINRATE = other.WRMAINTAINRATE;
      }
      if (other.WRACCOUNTEQUITY != 0D) {
        WRACCOUNTEQUITY = other.WRACCOUNTEQUITY;
      }
      if (other.WRINOUTAMT != 0D) {
        WRINOUTAMT = other.WRINOUTAMT;
      }
      if (other.WRUSABLEMARGIN != 0D) {
        WRUSABLEMARGIN = other.WRUSABLEMARGIN;
      }
      if (other.WRCOVERINCOME != 0D) {
        WRCOVERINCOME = other.WRCOVERINCOME;
      }
      if (other.WRINITIALMARGIN != 0D) {
        WRINITIALMARGIN = other.WRINITIALMARGIN;
      }
      if (other.WRMAINTAINMARGIN != 0D) {
        WRMAINTAINMARGIN = other.WRMAINTAINMARGIN;
      }
      if (other.WRVARINCOME != 0D) {
        WRVARINCOME = other.WRVARINCOME;
      }
      if (other.WRACCOUNTBALANCE != 0D) {
        WRACCOUNTBALANCE = other.WRACCOUNTBALANCE;
      }
      if (other.WRREALIZEPREMIUN != 0D) {
        WRREALIZEPREMIUN = other.WRREALIZEPREMIUN;
      }
      if (other.WRUNREALIZEPREMIUM != 0D) {
        WRUNREALIZEPREMIUM = other.WRUNREALIZEPREMIUM;
      }
      if (other.WRBOPTIONVALUE != 0D) {
        WRBOPTIONVALUE = other.WRBOPTIONVALUE;
      }
      if (other.WRSOPTIONVALUE != 0D) {
        WRSOPTIONVALUE = other.WRSOPTIONVALUE;
      }
      if (other.WRYESEQU != 0D) {
        WRYESEQU = other.WRYESEQU;
      }
      if (other.WRYESACCOUNTBALANCE != 0D) {
        WRYESACCOUNTBALANCE = other.WRYESACCOUNTBALANCE;
      }
      if (other.WRTODAYTOT != 0D) {
        WRTODAYTOT = other.WRTODAYTOT;
      }
      if (other.WRTODAYTAX != 0D) {
        WRTODAYTAX = other.WRTODAYTAX;
      }
      if (other.WREQUITY != 0D) {
        WREQUITY = other.WREQUITY;
      }
      if (other.WRDETTELMARK.Length != 0) {
        WRDETTELMARK = other.WRDETTELMARK;
      }
      if (other.WRRISKRATE.Length != 0) {
        WRRISKRATE = other.WRRISKRATE;
      }
      if (other.WRCOVERRATE != 0D) {
        WRCOVERRATE = other.WRCOVERRATE;
      }
      if (other.WRFULLMARGIN != 0D) {
        WRFULLMARGIN = other.WRFULLMARGIN;
      }
      if (other.WRFULLMAINTAINMARGIN != 0D) {
        WRFULLMAINTAINMARGIN = other.WRFULLMAINTAINMARGIN;
      }
      if (other.WRFULLUSABLEMARGIN != 0D) {
        WRFULLUSABLEMARGIN = other.WRFULLUSABLEMARGIN;
      }
      if (other.WRFULLRATE.Length != 0) {
        WRFULLRATE = other.WRFULLRATE;
      }
      if (other.WRFULLRISKRATE.Length != 0) {
        WRFULLRISKRATE = other.WRFULLRISKRATE;
      }
      if (other.WRDAYTRADEFLAG.Length != 0) {
        WRDAYTRADEFLAG = other.WRDAYTRADEFLAG;
      }
      if (other.WRIOPFLAG.Length != 0) {
        WRIOPFLAG = other.WRIOPFLAG;
      }
      if (other.WRYESTOTEQUITY != 0D) {
        WRYESTOTEQUITY = other.WRYESTOTEQUITY;
      }
      if (other.FILLER3.Length != 0) {
        FILLER3 = other.FILLER3;
      }
      if (other.WRIBNO.Length != 0) {
        WRIBNO = other.WRIBNO;
      }
      if (other.WRCOVERAMT != 0D) {
        WRCOVERAMT = other.WRCOVERAMT;
      }
      if (other.WRADDMARGIN != 0D) {
        WRADDMARGIN = other.WRADDMARGIN;
      }
      if (other.WRCASHUSABLE != 0D) {
        WRCASHUSABLE = other.WRCASHUSABLE;
      }
      if (other.WRFULLCASHUSABLE != 0D) {
        WRFULLCASHUSABLE = other.WRFULLCASHUSABLE;
      }
      if (other.WRUNREALIZEDINCOME != 0D) {
        WRUNREALIZEDINCOME = other.WRUNREALIZEDINCOME;
      }
      if (other.WROINITIALMARGIN != 0D) {
        WROINITIALMARGIN = other.WROINITIALMARGIN;
      }
      if (other.WROMAINTAINMARGIN != 0D) {
        WROMAINTAINMARGIN = other.WROMAINTAINMARGIN;
      }
      if (other.WROFULLINITIALMARGIN != 0D) {
        WROFULLINITIALMARGIN = other.WROFULLINITIALMARGIN;
      }
      if (other.WROFULLMAINTAINMARGIN != 0D) {
        WROFULLMAINTAINMARGIN = other.WROFULLMAINTAINMARGIN;
      }
      if (other.WRADDITIONMARGIN != 0D) {
        WRADDITIONMARGIN = other.WRADDITIONMARGIN;
      }
      if (other.WRNOMARGIN != 0D) {
        WRNOMARGIN = other.WRNOMARGIN;
      }
      if (other.WRPROMPTAMT != 0D) {
        WRPROMPTAMT = other.WRPROMPTAMT;
      }
      if (other.WRBPOPTIONVALUE != 0D) {
        WRBPOPTIONVALUE = other.WRBPOPTIONVALUE;
      }
      if (other.WRSPOPTIONVALUE != 0D) {
        WRSPOPTIONVALUE = other.WRSPOPTIONVALUE;
      }
      if (other.WRBCOPTIONVALUE != 0D) {
        WRBCOPTIONVALUE = other.WRBCOPTIONVALUE;
      }
      if (other.WRSCOPTIONVALUE != 0D) {
        WRSCOPTIONVALUE = other.WRSCOPTIONVALUE;
      }
      if (other.WRADDITIONMARGINRATE != 0D) {
        WRADDITIONMARGINRATE = other.WRADDITIONMARGINRATE;
      }
      if (other.FILLER4.Length != 0) {
        FILLER4 = other.FILLER4;
      }
      if (other.WRCOUNT != 0) {
        WRCOUNT = other.WRCOUNT;
      }
      if (other.WRDATAFLAG1.Length != 0) {
        WRDATAFLAG1 = other.WRDATAFLAG1;
      }
      if (other.WRDATAFLAG2.Length != 0) {
        WRDATAFLAG2 = other.WRDATAFLAG2;
      }
      if (other.WRREADDATA.Length != 0) {
        WRREADDATA = other.WRREADDATA;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WRREPLYCODE = input.ReadInt32();
            break;
          }
          case 18: {
            WRADVISORY = input.ReadString();
            break;
          }
          case 26: {
            WRKEYCONTRACTID = input.ReadString();
            break;
          }
          case 34: {
            WRKEYMATCHDATE = input.ReadString();
            break;
          }
          case 42: {
            WRKEYSPO = input.ReadString();
            break;
          }
          case 48: {
            wRKEYKIND_ = (global::Jsunfutures.Messages.FepKind) input.ReadEnum();
            break;
          }
          case 56: {
            wRKEYBUYSELLKIND_ = (global::Jsunfutures.Messages.BS) input.ReadEnum();
            break;
          }
          case 64: {
            WRKEYSEQNO = input.ReadInt32();
            break;
          }
          case 74: {
            WRKEYORDERNO = input.ReadString();
            break;
          }
          case 82: {
            WRKEYTRID = input.ReadString();
            break;
          }
          case 90: {
            WRKEY2ND = input.ReadString();
            break;
          }
          case 98: {
            WRKEYMATFLAG = input.ReadString();
            break;
          }
          case 104: {
            wRKEYCURRENCY_ = (global::Jsunfutures.Messages.Currency) input.ReadEnum();
            break;
          }
          case 114: {
            FILLER1 = input.ReadString();
            break;
          }
          case 122: {
            WRTELLERNO = input.ReadString();
            break;
          }
          case 130: {
            WRACNO = input.ReadString();
            break;
          }
          case 138: {
            WRSKACNO = input.ReadString();
            break;
          }
          case 146: {
            FILLER2 = input.ReadString();
            break;
          }
          case 154: {
            WRCLOSEMARK = input.ReadString();
            break;
          }
          case 162: {
            WRMAINTAINRATE = input.ReadString();
            break;
          }
          case 169: {
            WRACCOUNTEQUITY = input.ReadDouble();
            break;
          }
          case 177: {
            WRINOUTAMT = input.ReadDouble();
            break;
          }
          case 185: {
            WRUSABLEMARGIN = input.ReadDouble();
            break;
          }
          case 193: {
            WRCOVERINCOME = input.ReadDouble();
            break;
          }
          case 201: {
            WRINITIALMARGIN = input.ReadDouble();
            break;
          }
          case 209: {
            WRMAINTAINMARGIN = input.ReadDouble();
            break;
          }
          case 217: {
            WRVARINCOME = input.ReadDouble();
            break;
          }
          case 225: {
            WRACCOUNTBALANCE = input.ReadDouble();
            break;
          }
          case 233: {
            WRREALIZEPREMIUN = input.ReadDouble();
            break;
          }
          case 241: {
            WRUNREALIZEPREMIUM = input.ReadDouble();
            break;
          }
          case 249: {
            WRBOPTIONVALUE = input.ReadDouble();
            break;
          }
          case 257: {
            WRSOPTIONVALUE = input.ReadDouble();
            break;
          }
          case 265: {
            WRYESEQU = input.ReadDouble();
            break;
          }
          case 273: {
            WRYESACCOUNTBALANCE = input.ReadDouble();
            break;
          }
          case 281: {
            WRTODAYTOT = input.ReadDouble();
            break;
          }
          case 289: {
            WRTODAYTAX = input.ReadDouble();
            break;
          }
          case 297: {
            WREQUITY = input.ReadDouble();
            break;
          }
          case 306: {
            WRDETTELMARK = input.ReadString();
            break;
          }
          case 314: {
            WRRISKRATE = input.ReadString();
            break;
          }
          case 321: {
            WRCOVERRATE = input.ReadDouble();
            break;
          }
          case 329: {
            WRFULLMARGIN = input.ReadDouble();
            break;
          }
          case 337: {
            WRFULLMAINTAINMARGIN = input.ReadDouble();
            break;
          }
          case 345: {
            WRFULLUSABLEMARGIN = input.ReadDouble();
            break;
          }
          case 354: {
            WRFULLRATE = input.ReadString();
            break;
          }
          case 362: {
            WRFULLRISKRATE = input.ReadString();
            break;
          }
          case 370: {
            WRDAYTRADEFLAG = input.ReadString();
            break;
          }
          case 378: {
            WRIOPFLAG = input.ReadString();
            break;
          }
          case 385: {
            WRYESTOTEQUITY = input.ReadDouble();
            break;
          }
          case 394: {
            FILLER3 = input.ReadString();
            break;
          }
          case 402: {
            WRIBNO = input.ReadString();
            break;
          }
          case 409: {
            WRCOVERAMT = input.ReadDouble();
            break;
          }
          case 417: {
            WRADDMARGIN = input.ReadDouble();
            break;
          }
          case 425: {
            WRCASHUSABLE = input.ReadDouble();
            break;
          }
          case 433: {
            WRFULLCASHUSABLE = input.ReadDouble();
            break;
          }
          case 441: {
            WRUNREALIZEDINCOME = input.ReadDouble();
            break;
          }
          case 449: {
            WROINITIALMARGIN = input.ReadDouble();
            break;
          }
          case 457: {
            WROMAINTAINMARGIN = input.ReadDouble();
            break;
          }
          case 465: {
            WROFULLINITIALMARGIN = input.ReadDouble();
            break;
          }
          case 473: {
            WROFULLMAINTAINMARGIN = input.ReadDouble();
            break;
          }
          case 481: {
            WRADDITIONMARGIN = input.ReadDouble();
            break;
          }
          case 489: {
            WRNOMARGIN = input.ReadDouble();
            break;
          }
          case 497: {
            WRPROMPTAMT = input.ReadDouble();
            break;
          }
          case 505: {
            WRBPOPTIONVALUE = input.ReadDouble();
            break;
          }
          case 513: {
            WRSPOPTIONVALUE = input.ReadDouble();
            break;
          }
          case 521: {
            WRBCOPTIONVALUE = input.ReadDouble();
            break;
          }
          case 529: {
            WRSCOPTIONVALUE = input.ReadDouble();
            break;
          }
          case 537: {
            WRADDITIONMARGINRATE = input.ReadDouble();
            break;
          }
          case 546: {
            FILLER4 = input.ReadString();
            break;
          }
          case 552: {
            WRCOUNT = input.ReadInt32();
            break;
          }
          case 562: {
            WRDATAFLAG1 = input.ReadString();
            break;
          }
          case 570: {
            WRDATAFLAG2 = input.ReadString();
            break;
          }
          case 578: {
            WRREADDATA = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///1 未平倉彙總 (WR_READ_DATA)
  /// </summary>
  public sealed partial class TandemResult_AGGREGATE : pb::IMessage<TandemResult_AGGREGATE> {
    private static readonly pb::MessageParser<TandemResult_AGGREGATE> _parser = new pb::MessageParser<TandemResult_AGGREGATE>(() => new TandemResult_AGGREGATE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemResult_AGGREGATE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_AGGREGATE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_AGGREGATE(TandemResult_AGGREGATE other) : this() {
      wR1DATAFLAG1_ = other.wR1DATAFLAG1_;
      wR1DATAFLAG2_ = other.wR1DATAFLAG2_;
      wR1TRID_ = other.wR1TRID_;
      wR1BTRID1_ = other.wR1BTRID1_;
      wR1BCOMMODITYNAME1_ = other.wR1BCOMMODITYNAME1_;
      wR1BCOMMODITYID1_ = other.wR1BCOMMODITYID1_;
      wR1BSETTLEMENTMONTH1_ = other.wR1BSETTLEMENTMONTH1_;
      wR1BSTRIKEPRICE1_ = other.wR1BSTRIKEPRICE1_;
      wR1BBUYSELLKIND1_ = other.wR1BBUYSELLKIND1_;
      wR1BSTOCKCODE1_ = other.wR1BSTOCKCODE1_;
      wR1BTRID2_ = other.wR1BTRID2_;
      wR1BCOMMODITYNAME2_ = other.wR1BCOMMODITYNAME2_;
      wR1BCOMMODITYID2_ = other.wR1BCOMMODITYID2_;
      wR1BSETTLEMENTMONTH2_ = other.wR1BSETTLEMENTMONTH2_;
      wR1BSTRIKEPRICE2_ = other.wR1BSTRIKEPRICE2_;
      wR1BBUYSELLKIND2_ = other.wR1BBUYSELLKIND2_;
      wR1BSTOCKCODE2_ = other.wR1BSTOCKCODE2_;
      wR1STRID1_ = other.wR1STRID1_;
      wR1SCOMMODITYNAME1_ = other.wR1SCOMMODITYNAME1_;
      wR1SCOMMODITYID1_ = other.wR1SCOMMODITYID1_;
      wR1SSETTLEMENTMONTH1_ = other.wR1SSETTLEMENTMONTH1_;
      wR1SSTRIKEPRICE1_ = other.wR1SSTRIKEPRICE1_;
      wR1SBUYSELLKIND1_ = other.wR1SBUYSELLKIND1_;
      wR1SSTOCKCODE1_ = other.wR1SSTOCKCODE1_;
      wR1STRID2_ = other.wR1STRID2_;
      wR1SCOMMODITYNAME2_ = other.wR1SCOMMODITYNAME2_;
      wR1SCOMMODITYID2_ = other.wR1SCOMMODITYID2_;
      wR1SSETTLEMENTMONTH2_ = other.wR1SSETTLEMENTMONTH2_;
      wR1SSTRIKEPRICE2_ = other.wR1SSTRIKEPRICE2_;
      wR1SBUYSELLKIND2_ = other.wR1SBUYSELLKIND2_;
      wR1SSTOCKCODE2_ = other.wR1SSTOCKCODE2_;
      wR1NCBQTY_ = other.wR1NCBQTY_;
      wR1NCBAVGPRICE_ = other.wR1NCBAVGPRICE_;
      wR1NCSQTY_ = other.wR1NCSQTY_;
      wR1NCSAVGPRICE_ = other.wR1NCSAVGPRICE_;
      wR1NOWPRICE_ = other.wR1NOWPRICE_;
      wR1CORKIND_ = other.wR1CORKIND_;
      wR1VARINCOME_ = other.wR1VARINCOME_;
      wR1ORDERBQTY_ = other.wR1ORDERBQTY_;
      wR1ORDERSQTY_ = other.wR1ORDERSQTY_;
      wR1TDSNEWOQTY_ = other.wR1TDSNEWOQTY_;
      wR1YESTERDAYPRICE_ = other.wR1YESTERDAYPRICE_;
      wR1STRATEGYCODE_ = other.wR1STRATEGYCODE_;
      wR1VARINCOMECURRENCY_ = other.wR1VARINCOMECURRENCY_;
      wR1FNCBQTY_ = other.wR1FNCBQTY_;
      wR1FNCSQTY_ = other.wR1FNCSQTY_;
      wR1TRADENCBQTY_ = other.wR1TRADENCBQTY_;
      wR1TRADENCSQTY_ = other.wR1TRADENCSQTY_;
      wR1SUBVARINCOME_ = other.wR1SUBVARINCOME_;
      wR1YESTERDAYPRICE2_ = other.wR1YESTERDAYPRICE2_;
      wR1NCBAVGPRICE4_ = other.wR1NCBAVGPRICE4_;
      wR1NCSAVGPRICE4_ = other.wR1NCSAVGPRICE4_;
      wR1SOURCEFLAG_ = other.wR1SOURCEFLAG_;
      fILLER_ = other.fILLER_;
      wR1BVARINCOME1_ = other.wR1BVARINCOME1_;
      wR1BVARINCOME2_ = other.wR1BVARINCOME2_;
      wR1BAVGPRICE1_ = other.wR1BAVGPRICE1_;
      wR1BAVGPRICE2_ = other.wR1BAVGPRICE2_;
      wR1BNOWPRICE1_ = other.wR1BNOWPRICE1_;
      wR1BNOWPRICE2_ = other.wR1BNOWPRICE2_;
      wR1SVARINCOME1_ = other.wR1SVARINCOME1_;
      wR1SVARINCOME2_ = other.wR1SVARINCOME2_;
      wR1SAVGPRICE1_ = other.wR1SAVGPRICE1_;
      wR1SAVGPRICE2_ = other.wR1SAVGPRICE2_;
      wR1SNOWPRICE1_ = other.wR1SNOWPRICE1_;
      wR1SNOWPRICE2_ = other.wR1SNOWPRICE2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_AGGREGATE Clone() {
      return new TandemResult_AGGREGATE(this);
    }

    /// <summary>Field number for the "WR1_DATA_FLAG_1" field.</summary>
    public const int WR1DATAFLAG1FieldNumber = 1;
    private string wR1DATAFLAG1_ = "";
    /// <summary>
    ///            PIC X(1).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1DATAFLAG1 {
      get { return wR1DATAFLAG1_; }
      set {
        wR1DATAFLAG1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_DATA_FLAG_2" field.</summary>
    public const int WR1DATAFLAG2FieldNumber = 2;
    private string wR1DATAFLAG2_ = "";
    /// <summary>
    ///            PIC X(1).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1DATAFLAG2 {
      get { return wR1DATAFLAG2_; }
      set {
        wR1DATAFLAG2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_TR_ID" field.</summary>
    public const int WR1TRIDFieldNumber = 3;
    private string wR1TRID_ = "";
    /// <summary>
    ///                 PIC X(20). 期交所商品代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1TRID {
      get { return wR1TRID_; }
      set {
        wR1TRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_B_TR_ID_1" field.</summary>
    public const int WR1BTRID1FieldNumber = 4;
    private string wR1BTRID1_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1BTRID1 {
      get { return wR1BTRID1_; }
      set {
        wR1BTRID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_B_COMMODITY_NAME_1" field.</summary>
    public const int WR1BCOMMODITYNAME1FieldNumber = 5;
    private string wR1BCOMMODITYNAME1_ = "";
    /// <summary>
    ///PIC X(10).買方  商品１                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1BCOMMODITYNAME1 {
      get { return wR1BCOMMODITYNAME1_; }
      set {
        wR1BCOMMODITYNAME1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_B_COMMODITY_ID_1" field.</summary>
    public const int WR1BCOMMODITYID1FieldNumber = 6;
    private string wR1BCOMMODITYID1_ = "";
    /// <summary>
    ///    PIC X(7).買方  商品１                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1BCOMMODITYID1 {
      get { return wR1BCOMMODITYID1_; }
      set {
        wR1BCOMMODITYID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_B_SETTLEMENT_MONTH_1" field.</summary>
    public const int WR1BSETTLEMENTMONTH1FieldNumber = 7;
    private int wR1BSETTLEMENTMONTH1_;
    /// <summary>
    /// PIC 9(6).買方  商品１           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WR1BSETTLEMENTMONTH1 {
      get { return wR1BSETTLEMENTMONTH1_; }
      set {
        wR1BSETTLEMENTMONTH1_ = value;
      }
    }

    /// <summary>Field number for the "WR1_B_STRIKE_PRICE_1" field.</summary>
    public const int WR1BSTRIKEPRICE1FieldNumber = 8;
    private double wR1BSTRIKEPRICE1_;
    /// <summary>
    ///   PIC 9(6)V9(3).買方  商品１               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1BSTRIKEPRICE1 {
      get { return wR1BSTRIKEPRICE1_; }
      set {
        wR1BSTRIKEPRICE1_ = value;
      }
    }

    /// <summary>Field number for the "WR1_B_BUY_SELL_KIND_1" field.</summary>
    public const int WR1BBUYSELLKIND1FieldNumber = 9;
    private string wR1BBUYSELLKIND1_ = "";
    /// <summary>
    ///    PIC X(1).買方  商品１               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1BBUYSELLKIND1 {
      get { return wR1BBUYSELLKIND1_; }
      set {
        wR1BBUYSELLKIND1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_B_STOCK_CODE_1" field.</summary>
    public const int WR1BSTOCKCODE1FieldNumber = 10;
    private string wR1BSTOCKCODE1_ = "";
    /// <summary>
    ///     PIC X(07).買方  商品１   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1BSTOCKCODE1 {
      get { return wR1BSTOCKCODE1_; }
      set {
        wR1BSTOCKCODE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_B_TR_ID_2" field.</summary>
    public const int WR1BTRID2FieldNumber = 11;
    private string wR1BTRID2_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1BTRID2 {
      get { return wR1BTRID2_; }
      set {
        wR1BTRID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_B_COMMODITY_NAME_2" field.</summary>
    public const int WR1BCOMMODITYNAME2FieldNumber = 12;
    private string wR1BCOMMODITYNAME2_ = "";
    /// <summary>
    ///   PIC X(10).買方  商品２                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1BCOMMODITYNAME2 {
      get { return wR1BCOMMODITYNAME2_; }
      set {
        wR1BCOMMODITYNAME2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_B_COMMODITY_ID_2" field.</summary>
    public const int WR1BCOMMODITYID2FieldNumber = 13;
    private string wR1BCOMMODITYID2_ = "";
    /// <summary>
    ///   PIC X(7).買方  商品２                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1BCOMMODITYID2 {
      get { return wR1BCOMMODITYID2_; }
      set {
        wR1BCOMMODITYID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_B_SETTLEMENT_MONTH_2" field.</summary>
    public const int WR1BSETTLEMENTMONTH2FieldNumber = 14;
    private int wR1BSETTLEMENTMONTH2_;
    /// <summary>
    /// PIC 9(6).買方  商品２           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WR1BSETTLEMENTMONTH2 {
      get { return wR1BSETTLEMENTMONTH2_; }
      set {
        wR1BSETTLEMENTMONTH2_ = value;
      }
    }

    /// <summary>Field number for the "WR1_B_STRIKE_PRICE_2" field.</summary>
    public const int WR1BSTRIKEPRICE2FieldNumber = 15;
    private double wR1BSTRIKEPRICE2_;
    /// <summary>
    ///    PIC 9(6)V9(3).買方  商品２               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1BSTRIKEPRICE2 {
      get { return wR1BSTRIKEPRICE2_; }
      set {
        wR1BSTRIKEPRICE2_ = value;
      }
    }

    /// <summary>Field number for the "WR1_B_BUY_SELL_KIND_2" field.</summary>
    public const int WR1BBUYSELLKIND2FieldNumber = 16;
    private string wR1BBUYSELLKIND2_ = "";
    /// <summary>
    ///   PIC X(1).買方  商品２               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1BBUYSELLKIND2 {
      get { return wR1BBUYSELLKIND2_; }
      set {
        wR1BBUYSELLKIND2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_B_STOCK_CODE_2" field.</summary>
    public const int WR1BSTOCKCODE2FieldNumber = 17;
    private string wR1BSTOCKCODE2_ = "";
    /// <summary>
    ///     PIC X(07).買方  商品２   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1BSTOCKCODE2 {
      get { return wR1BSTOCKCODE2_; }
      set {
        wR1BSTOCKCODE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_S_TR_ID_1" field.</summary>
    public const int WR1STRID1FieldNumber = 18;
    private string wR1STRID1_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1STRID1 {
      get { return wR1STRID1_; }
      set {
        wR1STRID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_S_COMMODITY_NAME_1" field.</summary>
    public const int WR1SCOMMODITYNAME1FieldNumber = 19;
    private string wR1SCOMMODITYNAME1_ = "";
    /// <summary>
    ///   PIC X(10).賣方  商品１                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1SCOMMODITYNAME1 {
      get { return wR1SCOMMODITYNAME1_; }
      set {
        wR1SCOMMODITYNAME1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_S_COMMODITY_ID_1" field.</summary>
    public const int WR1SCOMMODITYID1FieldNumber = 20;
    private string wR1SCOMMODITYID1_ = "";
    /// <summary>
    ///    PIC X(7).賣方  商品１                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1SCOMMODITYID1 {
      get { return wR1SCOMMODITYID1_; }
      set {
        wR1SCOMMODITYID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_S_SETTLEMENT_MONTH_1" field.</summary>
    public const int WR1SSETTLEMENTMONTH1FieldNumber = 21;
    private int wR1SSETTLEMENTMONTH1_;
    /// <summary>
    /// PIC 9(6).賣方  商品１           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WR1SSETTLEMENTMONTH1 {
      get { return wR1SSETTLEMENTMONTH1_; }
      set {
        wR1SSETTLEMENTMONTH1_ = value;
      }
    }

    /// <summary>Field number for the "WR1_S_STRIKE_PRICE_1" field.</summary>
    public const int WR1SSTRIKEPRICE1FieldNumber = 22;
    private double wR1SSTRIKEPRICE1_;
    /// <summary>
    ///  PIC 9(6)V9(3).賣方  商品１               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1SSTRIKEPRICE1 {
      get { return wR1SSTRIKEPRICE1_; }
      set {
        wR1SSTRIKEPRICE1_ = value;
      }
    }

    /// <summary>Field number for the "WR1_S_BUY_SELL_KIND_1" field.</summary>
    public const int WR1SBUYSELLKIND1FieldNumber = 23;
    private string wR1SBUYSELLKIND1_ = "";
    /// <summary>
    ///  PIC X(1).賣方  商品１               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1SBUYSELLKIND1 {
      get { return wR1SBUYSELLKIND1_; }
      set {
        wR1SBUYSELLKIND1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_S_STOCK_CODE_1" field.</summary>
    public const int WR1SSTOCKCODE1FieldNumber = 24;
    private string wR1SSTOCKCODE1_ = "";
    /// <summary>
    ///      PIC X(07).賣方  商品１   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1SSTOCKCODE1 {
      get { return wR1SSTOCKCODE1_; }
      set {
        wR1SSTOCKCODE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_S_TR_ID_2" field.</summary>
    public const int WR1STRID2FieldNumber = 25;
    private string wR1STRID2_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1STRID2 {
      get { return wR1STRID2_; }
      set {
        wR1STRID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_S_COMMODITY_NAME_2" field.</summary>
    public const int WR1SCOMMODITYNAME2FieldNumber = 26;
    private string wR1SCOMMODITYNAME2_ = "";
    /// <summary>
    ///   PIC X(10).賣方  商品２                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1SCOMMODITYNAME2 {
      get { return wR1SCOMMODITYNAME2_; }
      set {
        wR1SCOMMODITYNAME2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_S_COMMODITY_ID_2" field.</summary>
    public const int WR1SCOMMODITYID2FieldNumber = 27;
    private string wR1SCOMMODITYID2_ = "";
    /// <summary>
    ///   PIC X(7).賣方  商品２                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1SCOMMODITYID2 {
      get { return wR1SCOMMODITYID2_; }
      set {
        wR1SCOMMODITYID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_S_SETTLEMENT_MONTH_2" field.</summary>
    public const int WR1SSETTLEMENTMONTH2FieldNumber = 28;
    private int wR1SSETTLEMENTMONTH2_;
    /// <summary>
    /// PIC 9(6).賣方  商品２           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WR1SSETTLEMENTMONTH2 {
      get { return wR1SSETTLEMENTMONTH2_; }
      set {
        wR1SSETTLEMENTMONTH2_ = value;
      }
    }

    /// <summary>Field number for the "WR1_S_STRIKE_PRICE_2" field.</summary>
    public const int WR1SSTRIKEPRICE2FieldNumber = 29;
    private double wR1SSTRIKEPRICE2_;
    /// <summary>
    ///   PIC 9(6)V9(3).賣方  商品２               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1SSTRIKEPRICE2 {
      get { return wR1SSTRIKEPRICE2_; }
      set {
        wR1SSTRIKEPRICE2_ = value;
      }
    }

    /// <summary>Field number for the "WR1_S_BUY_SELL_KIND_2" field.</summary>
    public const int WR1SBUYSELLKIND2FieldNumber = 30;
    private string wR1SBUYSELLKIND2_ = "";
    /// <summary>
    ///   PIC X(1).賣方  商品２               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1SBUYSELLKIND2 {
      get { return wR1SBUYSELLKIND2_; }
      set {
        wR1SBUYSELLKIND2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_S_STOCK_CODE_2" field.</summary>
    public const int WR1SSTOCKCODE2FieldNumber = 31;
    private string wR1SSTOCKCODE2_ = "";
    /// <summary>
    ///    PIC X(07).賣方  商品２   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1SSTOCKCODE2 {
      get { return wR1SSTOCKCODE2_; }
      set {
        wR1SSTOCKCODE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_NC_B_QTY" field.</summary>
    public const int WR1NCBQTYFieldNumber = 32;
    private long wR1NCBQTY_;
    /// <summary>
    ///   PIC 9(14) COMP.買方     未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WR1NCBQTY {
      get { return wR1NCBQTY_; }
      set {
        wR1NCBQTY_ = value;
      }
    }

    /// <summary>Field number for the "WR1_NC_B_AVG_PRICE" field.</summary>
    public const int WR1NCBAVGPRICEFieldNumber = 33;
    private double wR1NCBAVGPRICE_;
    /// <summary>
    ///  PIC S9(6)V9(3) COMP.買方   未平倉平均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1NCBAVGPRICE {
      get { return wR1NCBAVGPRICE_; }
      set {
        wR1NCBAVGPRICE_ = value;
      }
    }

    /// <summary>Field number for the "WR1_NC_S_QTY" field.</summary>
    public const int WR1NCSQTYFieldNumber = 34;
    private long wR1NCSQTY_;
    /// <summary>
    ///  PIC 9(14) COMP.賣方     未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WR1NCSQTY {
      get { return wR1NCSQTY_; }
      set {
        wR1NCSQTY_ = value;
      }
    }

    /// <summary>Field number for the "WR1_NC_S_AVG_PRICE" field.</summary>
    public const int WR1NCSAVGPRICEFieldNumber = 35;
    private double wR1NCSAVGPRICE_;
    /// <summary>
    ///  PIC S9(6)V9(3) COMP.賣方   未平倉平均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1NCSAVGPRICE {
      get { return wR1NCSAVGPRICE_; }
      set {
        wR1NCSAVGPRICE_ = value;
      }
    }

    /// <summary>Field number for the "WR1_NOW_PRICE" field.</summary>
    public const int WR1NOWPRICEFieldNumber = 36;
    private double wR1NOWPRICE_;
    /// <summary>
    ///   PIC S9(6)V9(3) COMP.   現(理)價		  fu: 現價option:理論價格option組合單:價差或價和
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1NOWPRICE {
      get { return wR1NOWPRICE_; }
      set {
        wR1NOWPRICE_ = value;
      }
    }

    /// <summary>Field number for the "WR1_COR_KIND" field.</summary>
    public const int WR1CORKINDFieldNumber = 37;
    private string wR1CORKIND_ = "";
    /// <summary>
    ///     PIC X(02). option組合單價差或價和記號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1CORKIND {
      get { return wR1CORKIND_; }
      set {
        wR1CORKIND_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_VAR_INCOME" field.</summary>
    public const int WR1VARINCOMEFieldNumber = 38;
    private double wR1VARINCOME_;
    /// <summary>
    ///      PIC S9(14)V9(2) COMP.期貨:未平倉損益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1VARINCOME {
      get { return wR1VARINCOME_; }
      set {
        wR1VARINCOME_ = value;
      }
    }

    /// <summary>Field number for the "WR1_ORDER_B_QTY" field.</summary>
    public const int WR1ORDERBQTYFieldNumber = 39;
    private long wR1ORDERBQTY_;
    /// <summary>
    ///    PIC 9(14) COMP.買方   委託未成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WR1ORDERBQTY {
      get { return wR1ORDERBQTY_; }
      set {
        wR1ORDERBQTY_ = value;
      }
    }

    /// <summary>Field number for the "WR1_ORDER_S_QTY" field.</summary>
    public const int WR1ORDERSQTYFieldNumber = 40;
    private long wR1ORDERSQTY_;
    /// <summary>
    ///    PIC 9(14) COMP.賣方   委託未成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WR1ORDERSQTY {
      get { return wR1ORDERSQTY_; }
      set {
        wR1ORDERSQTY_ = value;
      }
    }

    /// <summary>Field number for the "WR1_TD_S_NEW_O_QTY" field.</summary>
    public const int WR1TDSNEWOQTYFieldNumber = 41;
    private long wR1TDSNEWOQTY_;
    /// <summary>
    ///  PIC 9(14) COMP.今日期權賣出新倉委託未成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WR1TDSNEWOQTY {
      get { return wR1TDSNEWOQTY_; }
      set {
        wR1TDSNEWOQTY_ = value;
      }
    }

    /// <summary>Field number for the "WR1_YESTERDAY_PRICE" field.</summary>
    public const int WR1YESTERDAYPRICEFieldNumber = 42;
    private string wR1YESTERDAYPRICE_ = "";
    /// <summary>
    /// PIC 9(6)V9(3) COMP.昨日結算價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1YESTERDAYPRICE {
      get { return wR1YESTERDAYPRICE_; }
      set {
        wR1YESTERDAYPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_STRATEGY_CODE" field.</summary>
    public const int WR1STRATEGYCODEFieldNumber = 43;
    private string wR1STRATEGYCODE_ = "";
    /// <summary>
    ///   PIC X(5).策略代號(TMPS)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1STRATEGYCODE {
      get { return wR1STRATEGYCODE_; }
      set {
        wR1STRATEGYCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_VAR_INCOME_CURRENCY" field.</summary>
    public const int WR1VARINCOMECURRENCYFieldNumber = 44;
    private string wR1VARINCOMECURRENCY_ = "";
    /// <summary>
    /// PIC X(1)."N":台幣 "U"美金 "R":人民幣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1VARINCOMECURRENCY {
      get { return wR1VARINCOMECURRENCY_; }
      set {
        wR1VARINCOMECURRENCY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_F_NC_B_QTY" field.</summary>
    public const int WR1FNCBQTYFieldNumber = 45;
    private long wR1FNCBQTY_;
    /// <summary>
    ///    PIC 9(14) COMP.期加權商品之 期貨商品 買方 未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WR1FNCBQTY {
      get { return wR1FNCBQTY_; }
      set {
        wR1FNCBQTY_ = value;
      }
    }

    /// <summary>Field number for the "WR1_F_NC_S_QTY" field.</summary>
    public const int WR1FNCSQTYFieldNumber = 46;
    private long wR1FNCSQTY_;
    /// <summary>
    ///    PIC 9(14) COMP.期加權商品之 期貨商品 賣方 未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WR1FNCSQTY {
      get { return wR1FNCSQTY_; }
      set {
        wR1FNCSQTY_ = value;
      }
    }

    /// <summary>Field number for the "WR1_TRADE_NC_B_QTY" field.</summary>
    public const int WR1TRADENCBQTYFieldNumber = 47;
    private long wR1TRADENCBQTY_;
    /// <summary>
    ///  PIC 9(08) COMP.買方新倉 當沖口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WR1TRADENCBQTY {
      get { return wR1TRADENCBQTY_; }
      set {
        wR1TRADENCBQTY_ = value;
      }
    }

    /// <summary>Field number for the "WR1_TRADE_NC_S_QTY" field.</summary>
    public const int WR1TRADENCSQTYFieldNumber = 48;
    private long wR1TRADENCSQTY_;
    /// <summary>
    ///  PIC 9(08) COMP.賣方新倉 當沖口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WR1TRADENCSQTY {
      get { return wR1TRADENCSQTY_; }
      set {
        wR1TRADENCSQTY_ = value;
      }
    }

    /// <summary>Field number for the "WR1_SUB_VAR_INCOME" field.</summary>
    public const int WR1SUBVARINCOMEFieldNumber = 49;
    private double wR1SUBVARINCOME_;
    /// <summary>
    /// PIC S9(14)V9(2) COMP.賺不算金額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1SUBVARINCOME {
      get { return wR1SUBVARINCOME_; }
      set {
        wR1SUBVARINCOME_ = value;
      }
    }

    /// <summary>Field number for the "WR1_YESTERDAY_PRICE_2" field.</summary>
    public const int WR1YESTERDAYPRICE2FieldNumber = 50;
    private double wR1YESTERDAYPRICE2_;
    /// <summary>
    ///  PIC 9(6)V9(3) COMP.期貨價差 商品二昨日結算價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1YESTERDAYPRICE2 {
      get { return wR1YESTERDAYPRICE2_; }
      set {
        wR1YESTERDAYPRICE2_ = value;
      }
    }

    /// <summary>Field number for the "WR1_NC_B_AVG_PRICE_4" field.</summary>
    public const int WR1NCBAVGPRICE4FieldNumber = 51;
    private double wR1NCBAVGPRICE4_;
    /// <summary>
    ///PIC S9(6)V9(4) COMP.買方   未平倉平均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1NCBAVGPRICE4 {
      get { return wR1NCBAVGPRICE4_; }
      set {
        wR1NCBAVGPRICE4_ = value;
      }
    }

    /// <summary>Field number for the "WR1_NC_S_AVG_PRICE_4" field.</summary>
    public const int WR1NCSAVGPRICE4FieldNumber = 52;
    private double wR1NCSAVGPRICE4_;
    /// <summary>
    /// PIC S9(6)V9(4) COMP.賣方   未平倉平均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1NCSAVGPRICE4 {
      get { return wR1NCSAVGPRICE4_; }
      set {
        wR1NCSAVGPRICE4_ = value;
      }
    }

    /// <summary>Field number for the "WR1_SOURCE_FLAG" field.</summary>
    public const int WR1SOURCEFLAGFieldNumber = 53;
    private string wR1SOURCEFLAG_ = "";
    /// <summary>
    ///  PIC X(1).可委託選擇權組合單註記('Y' OR SPACE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR1SOURCEFLAG {
      get { return wR1SOURCEFLAG_; }
      set {
        wR1SOURCEFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER" field.</summary>
    public const int FILLERFieldNumber = 54;
    private string fILLER_ = "";
    /// <summary>
    ///   PIC X(29).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER {
      get { return fILLER_; }
      set {
        fILLER_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR1_B_VAR_INCOME_1" field.</summary>
    public const int WR1BVARINCOME1FieldNumber = 55;
    private double wR1BVARINCOME1_;
    /// <summary>
    ///  PIC S9(14)V9(2) COMP.買方  商品１   未平倉損益預估
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1BVARINCOME1 {
      get { return wR1BVARINCOME1_; }
      set {
        wR1BVARINCOME1_ = value;
      }
    }

    /// <summary>Field number for the "WR1_B_VAR_INCOME_2" field.</summary>
    public const int WR1BVARINCOME2FieldNumber = 56;
    private double wR1BVARINCOME2_;
    /// <summary>
    ///  PIC S9(14)V9(2) COMP.買方  商品２   未平倉損益預估
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1BVARINCOME2 {
      get { return wR1BVARINCOME2_; }
      set {
        wR1BVARINCOME2_ = value;
      }
    }

    /// <summary>Field number for the "WR1_B_AVG_PRICE_1" field.</summary>
    public const int WR1BAVGPRICE1FieldNumber = 57;
    private double wR1BAVGPRICE1_;
    /// <summary>
    ///  PIC 9(6)V9(3) COMP.買方  商品１            均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1BAVGPRICE1 {
      get { return wR1BAVGPRICE1_; }
      set {
        wR1BAVGPRICE1_ = value;
      }
    }

    /// <summary>Field number for the "WR1_B_AVG_PRICE_2" field.</summary>
    public const int WR1BAVGPRICE2FieldNumber = 58;
    private double wR1BAVGPRICE2_;
    /// <summary>
    ///  PIC 9(6)V9(3) COMP.買方  商品２            均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1BAVGPRICE2 {
      get { return wR1BAVGPRICE2_; }
      set {
        wR1BAVGPRICE2_ = value;
      }
    }

    /// <summary>Field number for the "WR1_B_NOW_PRICE_1" field.</summary>
    public const int WR1BNOWPRICE1FieldNumber = 59;
    private double wR1BNOWPRICE1_;
    /// <summary>
    ///  PIC 9(6)V9(3) COMP.買方  商品１         現(理)價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1BNOWPRICE1 {
      get { return wR1BNOWPRICE1_; }
      set {
        wR1BNOWPRICE1_ = value;
      }
    }

    /// <summary>Field number for the "WR1_B_NOW_PRICE_2" field.</summary>
    public const int WR1BNOWPRICE2FieldNumber = 60;
    private double wR1BNOWPRICE2_;
    /// <summary>
    ///  PIC 9(6)V9(3) COMP.買方  商品２         現(理)價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1BNOWPRICE2 {
      get { return wR1BNOWPRICE2_; }
      set {
        wR1BNOWPRICE2_ = value;
      }
    }

    /// <summary>Field number for the "WR1_S_VAR_INCOME_1" field.</summary>
    public const int WR1SVARINCOME1FieldNumber = 61;
    private double wR1SVARINCOME1_;
    /// <summary>
    ///  PIC S9(14)V9(2) COMP.賣方  商品１   未平倉損益預估
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1SVARINCOME1 {
      get { return wR1SVARINCOME1_; }
      set {
        wR1SVARINCOME1_ = value;
      }
    }

    /// <summary>Field number for the "WR1_S_VAR_INCOME_2" field.</summary>
    public const int WR1SVARINCOME2FieldNumber = 62;
    private double wR1SVARINCOME2_;
    /// <summary>
    ///  PIC S9(14)V9(2) COMP.賣方  商品２   未平倉損益預估
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1SVARINCOME2 {
      get { return wR1SVARINCOME2_; }
      set {
        wR1SVARINCOME2_ = value;
      }
    }

    /// <summary>Field number for the "WR1_S_AVG_PRICE_1" field.</summary>
    public const int WR1SAVGPRICE1FieldNumber = 63;
    private double wR1SAVGPRICE1_;
    /// <summary>
    ///  PIC 9(6)V9(3) COMP.賣方  商品１            均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1SAVGPRICE1 {
      get { return wR1SAVGPRICE1_; }
      set {
        wR1SAVGPRICE1_ = value;
      }
    }

    /// <summary>Field number for the "WR1_S_AVG_PRICE_2" field.</summary>
    public const int WR1SAVGPRICE2FieldNumber = 64;
    private double wR1SAVGPRICE2_;
    /// <summary>
    ///  PIC 9(6)V9(3) COMP.賣方  商品２            均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1SAVGPRICE2 {
      get { return wR1SAVGPRICE2_; }
      set {
        wR1SAVGPRICE2_ = value;
      }
    }

    /// <summary>Field number for the "WR1_S_NOW_PRICE_1" field.</summary>
    public const int WR1SNOWPRICE1FieldNumber = 65;
    private double wR1SNOWPRICE1_;
    /// <summary>
    ///  PIC 9(6)V9(3) COMP.賣方  商品１         現(理)價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1SNOWPRICE1 {
      get { return wR1SNOWPRICE1_; }
      set {
        wR1SNOWPRICE1_ = value;
      }
    }

    /// <summary>Field number for the "WR1_S_NOW_PRICE_2" field.</summary>
    public const int WR1SNOWPRICE2FieldNumber = 66;
    private double wR1SNOWPRICE2_;
    /// <summary>
    ///  PIC 9(6)V9(3) COMP.賣方  商品２         現(理)價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR1SNOWPRICE2 {
      get { return wR1SNOWPRICE2_; }
      set {
        wR1SNOWPRICE2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemResult_AGGREGATE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemResult_AGGREGATE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WR1DATAFLAG1 != other.WR1DATAFLAG1) return false;
      if (WR1DATAFLAG2 != other.WR1DATAFLAG2) return false;
      if (WR1TRID != other.WR1TRID) return false;
      if (WR1BTRID1 != other.WR1BTRID1) return false;
      if (WR1BCOMMODITYNAME1 != other.WR1BCOMMODITYNAME1) return false;
      if (WR1BCOMMODITYID1 != other.WR1BCOMMODITYID1) return false;
      if (WR1BSETTLEMENTMONTH1 != other.WR1BSETTLEMENTMONTH1) return false;
      if (WR1BSTRIKEPRICE1 != other.WR1BSTRIKEPRICE1) return false;
      if (WR1BBUYSELLKIND1 != other.WR1BBUYSELLKIND1) return false;
      if (WR1BSTOCKCODE1 != other.WR1BSTOCKCODE1) return false;
      if (WR1BTRID2 != other.WR1BTRID2) return false;
      if (WR1BCOMMODITYNAME2 != other.WR1BCOMMODITYNAME2) return false;
      if (WR1BCOMMODITYID2 != other.WR1BCOMMODITYID2) return false;
      if (WR1BSETTLEMENTMONTH2 != other.WR1BSETTLEMENTMONTH2) return false;
      if (WR1BSTRIKEPRICE2 != other.WR1BSTRIKEPRICE2) return false;
      if (WR1BBUYSELLKIND2 != other.WR1BBUYSELLKIND2) return false;
      if (WR1BSTOCKCODE2 != other.WR1BSTOCKCODE2) return false;
      if (WR1STRID1 != other.WR1STRID1) return false;
      if (WR1SCOMMODITYNAME1 != other.WR1SCOMMODITYNAME1) return false;
      if (WR1SCOMMODITYID1 != other.WR1SCOMMODITYID1) return false;
      if (WR1SSETTLEMENTMONTH1 != other.WR1SSETTLEMENTMONTH1) return false;
      if (WR1SSTRIKEPRICE1 != other.WR1SSTRIKEPRICE1) return false;
      if (WR1SBUYSELLKIND1 != other.WR1SBUYSELLKIND1) return false;
      if (WR1SSTOCKCODE1 != other.WR1SSTOCKCODE1) return false;
      if (WR1STRID2 != other.WR1STRID2) return false;
      if (WR1SCOMMODITYNAME2 != other.WR1SCOMMODITYNAME2) return false;
      if (WR1SCOMMODITYID2 != other.WR1SCOMMODITYID2) return false;
      if (WR1SSETTLEMENTMONTH2 != other.WR1SSETTLEMENTMONTH2) return false;
      if (WR1SSTRIKEPRICE2 != other.WR1SSTRIKEPRICE2) return false;
      if (WR1SBUYSELLKIND2 != other.WR1SBUYSELLKIND2) return false;
      if (WR1SSTOCKCODE2 != other.WR1SSTOCKCODE2) return false;
      if (WR1NCBQTY != other.WR1NCBQTY) return false;
      if (WR1NCBAVGPRICE != other.WR1NCBAVGPRICE) return false;
      if (WR1NCSQTY != other.WR1NCSQTY) return false;
      if (WR1NCSAVGPRICE != other.WR1NCSAVGPRICE) return false;
      if (WR1NOWPRICE != other.WR1NOWPRICE) return false;
      if (WR1CORKIND != other.WR1CORKIND) return false;
      if (WR1VARINCOME != other.WR1VARINCOME) return false;
      if (WR1ORDERBQTY != other.WR1ORDERBQTY) return false;
      if (WR1ORDERSQTY != other.WR1ORDERSQTY) return false;
      if (WR1TDSNEWOQTY != other.WR1TDSNEWOQTY) return false;
      if (WR1YESTERDAYPRICE != other.WR1YESTERDAYPRICE) return false;
      if (WR1STRATEGYCODE != other.WR1STRATEGYCODE) return false;
      if (WR1VARINCOMECURRENCY != other.WR1VARINCOMECURRENCY) return false;
      if (WR1FNCBQTY != other.WR1FNCBQTY) return false;
      if (WR1FNCSQTY != other.WR1FNCSQTY) return false;
      if (WR1TRADENCBQTY != other.WR1TRADENCBQTY) return false;
      if (WR1TRADENCSQTY != other.WR1TRADENCSQTY) return false;
      if (WR1SUBVARINCOME != other.WR1SUBVARINCOME) return false;
      if (WR1YESTERDAYPRICE2 != other.WR1YESTERDAYPRICE2) return false;
      if (WR1NCBAVGPRICE4 != other.WR1NCBAVGPRICE4) return false;
      if (WR1NCSAVGPRICE4 != other.WR1NCSAVGPRICE4) return false;
      if (WR1SOURCEFLAG != other.WR1SOURCEFLAG) return false;
      if (FILLER != other.FILLER) return false;
      if (WR1BVARINCOME1 != other.WR1BVARINCOME1) return false;
      if (WR1BVARINCOME2 != other.WR1BVARINCOME2) return false;
      if (WR1BAVGPRICE1 != other.WR1BAVGPRICE1) return false;
      if (WR1BAVGPRICE2 != other.WR1BAVGPRICE2) return false;
      if (WR1BNOWPRICE1 != other.WR1BNOWPRICE1) return false;
      if (WR1BNOWPRICE2 != other.WR1BNOWPRICE2) return false;
      if (WR1SVARINCOME1 != other.WR1SVARINCOME1) return false;
      if (WR1SVARINCOME2 != other.WR1SVARINCOME2) return false;
      if (WR1SAVGPRICE1 != other.WR1SAVGPRICE1) return false;
      if (WR1SAVGPRICE2 != other.WR1SAVGPRICE2) return false;
      if (WR1SNOWPRICE1 != other.WR1SNOWPRICE1) return false;
      if (WR1SNOWPRICE2 != other.WR1SNOWPRICE2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WR1DATAFLAG1.Length != 0) hash ^= WR1DATAFLAG1.GetHashCode();
      if (WR1DATAFLAG2.Length != 0) hash ^= WR1DATAFLAG2.GetHashCode();
      if (WR1TRID.Length != 0) hash ^= WR1TRID.GetHashCode();
      if (WR1BTRID1.Length != 0) hash ^= WR1BTRID1.GetHashCode();
      if (WR1BCOMMODITYNAME1.Length != 0) hash ^= WR1BCOMMODITYNAME1.GetHashCode();
      if (WR1BCOMMODITYID1.Length != 0) hash ^= WR1BCOMMODITYID1.GetHashCode();
      if (WR1BSETTLEMENTMONTH1 != 0) hash ^= WR1BSETTLEMENTMONTH1.GetHashCode();
      if (WR1BSTRIKEPRICE1 != 0D) hash ^= WR1BSTRIKEPRICE1.GetHashCode();
      if (WR1BBUYSELLKIND1.Length != 0) hash ^= WR1BBUYSELLKIND1.GetHashCode();
      if (WR1BSTOCKCODE1.Length != 0) hash ^= WR1BSTOCKCODE1.GetHashCode();
      if (WR1BTRID2.Length != 0) hash ^= WR1BTRID2.GetHashCode();
      if (WR1BCOMMODITYNAME2.Length != 0) hash ^= WR1BCOMMODITYNAME2.GetHashCode();
      if (WR1BCOMMODITYID2.Length != 0) hash ^= WR1BCOMMODITYID2.GetHashCode();
      if (WR1BSETTLEMENTMONTH2 != 0) hash ^= WR1BSETTLEMENTMONTH2.GetHashCode();
      if (WR1BSTRIKEPRICE2 != 0D) hash ^= WR1BSTRIKEPRICE2.GetHashCode();
      if (WR1BBUYSELLKIND2.Length != 0) hash ^= WR1BBUYSELLKIND2.GetHashCode();
      if (WR1BSTOCKCODE2.Length != 0) hash ^= WR1BSTOCKCODE2.GetHashCode();
      if (WR1STRID1.Length != 0) hash ^= WR1STRID1.GetHashCode();
      if (WR1SCOMMODITYNAME1.Length != 0) hash ^= WR1SCOMMODITYNAME1.GetHashCode();
      if (WR1SCOMMODITYID1.Length != 0) hash ^= WR1SCOMMODITYID1.GetHashCode();
      if (WR1SSETTLEMENTMONTH1 != 0) hash ^= WR1SSETTLEMENTMONTH1.GetHashCode();
      if (WR1SSTRIKEPRICE1 != 0D) hash ^= WR1SSTRIKEPRICE1.GetHashCode();
      if (WR1SBUYSELLKIND1.Length != 0) hash ^= WR1SBUYSELLKIND1.GetHashCode();
      if (WR1SSTOCKCODE1.Length != 0) hash ^= WR1SSTOCKCODE1.GetHashCode();
      if (WR1STRID2.Length != 0) hash ^= WR1STRID2.GetHashCode();
      if (WR1SCOMMODITYNAME2.Length != 0) hash ^= WR1SCOMMODITYNAME2.GetHashCode();
      if (WR1SCOMMODITYID2.Length != 0) hash ^= WR1SCOMMODITYID2.GetHashCode();
      if (WR1SSETTLEMENTMONTH2 != 0) hash ^= WR1SSETTLEMENTMONTH2.GetHashCode();
      if (WR1SSTRIKEPRICE2 != 0D) hash ^= WR1SSTRIKEPRICE2.GetHashCode();
      if (WR1SBUYSELLKIND2.Length != 0) hash ^= WR1SBUYSELLKIND2.GetHashCode();
      if (WR1SSTOCKCODE2.Length != 0) hash ^= WR1SSTOCKCODE2.GetHashCode();
      if (WR1NCBQTY != 0L) hash ^= WR1NCBQTY.GetHashCode();
      if (WR1NCBAVGPRICE != 0D) hash ^= WR1NCBAVGPRICE.GetHashCode();
      if (WR1NCSQTY != 0L) hash ^= WR1NCSQTY.GetHashCode();
      if (WR1NCSAVGPRICE != 0D) hash ^= WR1NCSAVGPRICE.GetHashCode();
      if (WR1NOWPRICE != 0D) hash ^= WR1NOWPRICE.GetHashCode();
      if (WR1CORKIND.Length != 0) hash ^= WR1CORKIND.GetHashCode();
      if (WR1VARINCOME != 0D) hash ^= WR1VARINCOME.GetHashCode();
      if (WR1ORDERBQTY != 0L) hash ^= WR1ORDERBQTY.GetHashCode();
      if (WR1ORDERSQTY != 0L) hash ^= WR1ORDERSQTY.GetHashCode();
      if (WR1TDSNEWOQTY != 0L) hash ^= WR1TDSNEWOQTY.GetHashCode();
      if (WR1YESTERDAYPRICE.Length != 0) hash ^= WR1YESTERDAYPRICE.GetHashCode();
      if (WR1STRATEGYCODE.Length != 0) hash ^= WR1STRATEGYCODE.GetHashCode();
      if (WR1VARINCOMECURRENCY.Length != 0) hash ^= WR1VARINCOMECURRENCY.GetHashCode();
      if (WR1FNCBQTY != 0L) hash ^= WR1FNCBQTY.GetHashCode();
      if (WR1FNCSQTY != 0L) hash ^= WR1FNCSQTY.GetHashCode();
      if (WR1TRADENCBQTY != 0L) hash ^= WR1TRADENCBQTY.GetHashCode();
      if (WR1TRADENCSQTY != 0L) hash ^= WR1TRADENCSQTY.GetHashCode();
      if (WR1SUBVARINCOME != 0D) hash ^= WR1SUBVARINCOME.GetHashCode();
      if (WR1YESTERDAYPRICE2 != 0D) hash ^= WR1YESTERDAYPRICE2.GetHashCode();
      if (WR1NCBAVGPRICE4 != 0D) hash ^= WR1NCBAVGPRICE4.GetHashCode();
      if (WR1NCSAVGPRICE4 != 0D) hash ^= WR1NCSAVGPRICE4.GetHashCode();
      if (WR1SOURCEFLAG.Length != 0) hash ^= WR1SOURCEFLAG.GetHashCode();
      if (FILLER.Length != 0) hash ^= FILLER.GetHashCode();
      if (WR1BVARINCOME1 != 0D) hash ^= WR1BVARINCOME1.GetHashCode();
      if (WR1BVARINCOME2 != 0D) hash ^= WR1BVARINCOME2.GetHashCode();
      if (WR1BAVGPRICE1 != 0D) hash ^= WR1BAVGPRICE1.GetHashCode();
      if (WR1BAVGPRICE2 != 0D) hash ^= WR1BAVGPRICE2.GetHashCode();
      if (WR1BNOWPRICE1 != 0D) hash ^= WR1BNOWPRICE1.GetHashCode();
      if (WR1BNOWPRICE2 != 0D) hash ^= WR1BNOWPRICE2.GetHashCode();
      if (WR1SVARINCOME1 != 0D) hash ^= WR1SVARINCOME1.GetHashCode();
      if (WR1SVARINCOME2 != 0D) hash ^= WR1SVARINCOME2.GetHashCode();
      if (WR1SAVGPRICE1 != 0D) hash ^= WR1SAVGPRICE1.GetHashCode();
      if (WR1SAVGPRICE2 != 0D) hash ^= WR1SAVGPRICE2.GetHashCode();
      if (WR1SNOWPRICE1 != 0D) hash ^= WR1SNOWPRICE1.GetHashCode();
      if (WR1SNOWPRICE2 != 0D) hash ^= WR1SNOWPRICE2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WR1DATAFLAG1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WR1DATAFLAG1);
      }
      if (WR1DATAFLAG2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WR1DATAFLAG2);
      }
      if (WR1TRID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WR1TRID);
      }
      if (WR1BTRID1.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WR1BTRID1);
      }
      if (WR1BCOMMODITYNAME1.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WR1BCOMMODITYNAME1);
      }
      if (WR1BCOMMODITYID1.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WR1BCOMMODITYID1);
      }
      if (WR1BSETTLEMENTMONTH1 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WR1BSETTLEMENTMONTH1);
      }
      if (WR1BSTRIKEPRICE1 != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(WR1BSTRIKEPRICE1);
      }
      if (WR1BBUYSELLKIND1.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WR1BBUYSELLKIND1);
      }
      if (WR1BSTOCKCODE1.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WR1BSTOCKCODE1);
      }
      if (WR1BTRID2.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(WR1BTRID2);
      }
      if (WR1BCOMMODITYNAME2.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WR1BCOMMODITYNAME2);
      }
      if (WR1BCOMMODITYID2.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WR1BCOMMODITYID2);
      }
      if (WR1BSETTLEMENTMONTH2 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(WR1BSETTLEMENTMONTH2);
      }
      if (WR1BSTRIKEPRICE2 != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(WR1BSTRIKEPRICE2);
      }
      if (WR1BBUYSELLKIND2.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WR1BBUYSELLKIND2);
      }
      if (WR1BSTOCKCODE2.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(WR1BSTOCKCODE2);
      }
      if (WR1STRID1.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(WR1STRID1);
      }
      if (WR1SCOMMODITYNAME1.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(WR1SCOMMODITYNAME1);
      }
      if (WR1SCOMMODITYID1.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WR1SCOMMODITYID1);
      }
      if (WR1SSETTLEMENTMONTH1 != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(WR1SSETTLEMENTMONTH1);
      }
      if (WR1SSTRIKEPRICE1 != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(WR1SSTRIKEPRICE1);
      }
      if (WR1SBUYSELLKIND1.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(WR1SBUYSELLKIND1);
      }
      if (WR1SSTOCKCODE1.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(WR1SSTOCKCODE1);
      }
      if (WR1STRID2.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(WR1STRID2);
      }
      if (WR1SCOMMODITYNAME2.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(WR1SCOMMODITYNAME2);
      }
      if (WR1SCOMMODITYID2.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(WR1SCOMMODITYID2);
      }
      if (WR1SSETTLEMENTMONTH2 != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(WR1SSETTLEMENTMONTH2);
      }
      if (WR1SSTRIKEPRICE2 != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(WR1SSTRIKEPRICE2);
      }
      if (WR1SBUYSELLKIND2.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(WR1SBUYSELLKIND2);
      }
      if (WR1SSTOCKCODE2.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(WR1SSTOCKCODE2);
      }
      if (WR1NCBQTY != 0L) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(WR1NCBQTY);
      }
      if (WR1NCBAVGPRICE != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(WR1NCBAVGPRICE);
      }
      if (WR1NCSQTY != 0L) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(WR1NCSQTY);
      }
      if (WR1NCSAVGPRICE != 0D) {
        output.WriteRawTag(153, 2);
        output.WriteDouble(WR1NCSAVGPRICE);
      }
      if (WR1NOWPRICE != 0D) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(WR1NOWPRICE);
      }
      if (WR1CORKIND.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(WR1CORKIND);
      }
      if (WR1VARINCOME != 0D) {
        output.WriteRawTag(177, 2);
        output.WriteDouble(WR1VARINCOME);
      }
      if (WR1ORDERBQTY != 0L) {
        output.WriteRawTag(184, 2);
        output.WriteInt64(WR1ORDERBQTY);
      }
      if (WR1ORDERSQTY != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(WR1ORDERSQTY);
      }
      if (WR1TDSNEWOQTY != 0L) {
        output.WriteRawTag(200, 2);
        output.WriteInt64(WR1TDSNEWOQTY);
      }
      if (WR1YESTERDAYPRICE.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(WR1YESTERDAYPRICE);
      }
      if (WR1STRATEGYCODE.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(WR1STRATEGYCODE);
      }
      if (WR1VARINCOMECURRENCY.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(WR1VARINCOMECURRENCY);
      }
      if (WR1FNCBQTY != 0L) {
        output.WriteRawTag(232, 2);
        output.WriteInt64(WR1FNCBQTY);
      }
      if (WR1FNCSQTY != 0L) {
        output.WriteRawTag(240, 2);
        output.WriteInt64(WR1FNCSQTY);
      }
      if (WR1TRADENCBQTY != 0L) {
        output.WriteRawTag(248, 2);
        output.WriteInt64(WR1TRADENCBQTY);
      }
      if (WR1TRADENCSQTY != 0L) {
        output.WriteRawTag(128, 3);
        output.WriteInt64(WR1TRADENCSQTY);
      }
      if (WR1SUBVARINCOME != 0D) {
        output.WriteRawTag(137, 3);
        output.WriteDouble(WR1SUBVARINCOME);
      }
      if (WR1YESTERDAYPRICE2 != 0D) {
        output.WriteRawTag(145, 3);
        output.WriteDouble(WR1YESTERDAYPRICE2);
      }
      if (WR1NCBAVGPRICE4 != 0D) {
        output.WriteRawTag(153, 3);
        output.WriteDouble(WR1NCBAVGPRICE4);
      }
      if (WR1NCSAVGPRICE4 != 0D) {
        output.WriteRawTag(161, 3);
        output.WriteDouble(WR1NCSAVGPRICE4);
      }
      if (WR1SOURCEFLAG.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(WR1SOURCEFLAG);
      }
      if (FILLER.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(FILLER);
      }
      if (WR1BVARINCOME1 != 0D) {
        output.WriteRawTag(185, 3);
        output.WriteDouble(WR1BVARINCOME1);
      }
      if (WR1BVARINCOME2 != 0D) {
        output.WriteRawTag(193, 3);
        output.WriteDouble(WR1BVARINCOME2);
      }
      if (WR1BAVGPRICE1 != 0D) {
        output.WriteRawTag(201, 3);
        output.WriteDouble(WR1BAVGPRICE1);
      }
      if (WR1BAVGPRICE2 != 0D) {
        output.WriteRawTag(209, 3);
        output.WriteDouble(WR1BAVGPRICE2);
      }
      if (WR1BNOWPRICE1 != 0D) {
        output.WriteRawTag(217, 3);
        output.WriteDouble(WR1BNOWPRICE1);
      }
      if (WR1BNOWPRICE2 != 0D) {
        output.WriteRawTag(225, 3);
        output.WriteDouble(WR1BNOWPRICE2);
      }
      if (WR1SVARINCOME1 != 0D) {
        output.WriteRawTag(233, 3);
        output.WriteDouble(WR1SVARINCOME1);
      }
      if (WR1SVARINCOME2 != 0D) {
        output.WriteRawTag(241, 3);
        output.WriteDouble(WR1SVARINCOME2);
      }
      if (WR1SAVGPRICE1 != 0D) {
        output.WriteRawTag(249, 3);
        output.WriteDouble(WR1SAVGPRICE1);
      }
      if (WR1SAVGPRICE2 != 0D) {
        output.WriteRawTag(129, 4);
        output.WriteDouble(WR1SAVGPRICE2);
      }
      if (WR1SNOWPRICE1 != 0D) {
        output.WriteRawTag(137, 4);
        output.WriteDouble(WR1SNOWPRICE1);
      }
      if (WR1SNOWPRICE2 != 0D) {
        output.WriteRawTag(145, 4);
        output.WriteDouble(WR1SNOWPRICE2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WR1DATAFLAG1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR1DATAFLAG1);
      }
      if (WR1DATAFLAG2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR1DATAFLAG2);
      }
      if (WR1TRID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR1TRID);
      }
      if (WR1BTRID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR1BTRID1);
      }
      if (WR1BCOMMODITYNAME1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR1BCOMMODITYNAME1);
      }
      if (WR1BCOMMODITYID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR1BCOMMODITYID1);
      }
      if (WR1BSETTLEMENTMONTH1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WR1BSETTLEMENTMONTH1);
      }
      if (WR1BSTRIKEPRICE1 != 0D) {
        size += 1 + 8;
      }
      if (WR1BBUYSELLKIND1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR1BBUYSELLKIND1);
      }
      if (WR1BSTOCKCODE1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR1BSTOCKCODE1);
      }
      if (WR1BTRID2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR1BTRID2);
      }
      if (WR1BCOMMODITYNAME2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR1BCOMMODITYNAME2);
      }
      if (WR1BCOMMODITYID2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR1BCOMMODITYID2);
      }
      if (WR1BSETTLEMENTMONTH2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WR1BSETTLEMENTMONTH2);
      }
      if (WR1BSTRIKEPRICE2 != 0D) {
        size += 1 + 8;
      }
      if (WR1BBUYSELLKIND2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1BBUYSELLKIND2);
      }
      if (WR1BSTOCKCODE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1BSTOCKCODE2);
      }
      if (WR1STRID1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1STRID1);
      }
      if (WR1SCOMMODITYNAME1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1SCOMMODITYNAME1);
      }
      if (WR1SCOMMODITYID1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1SCOMMODITYID1);
      }
      if (WR1SSETTLEMENTMONTH1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WR1SSETTLEMENTMONTH1);
      }
      if (WR1SSTRIKEPRICE1 != 0D) {
        size += 2 + 8;
      }
      if (WR1SBUYSELLKIND1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1SBUYSELLKIND1);
      }
      if (WR1SSTOCKCODE1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1SSTOCKCODE1);
      }
      if (WR1STRID2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1STRID2);
      }
      if (WR1SCOMMODITYNAME2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1SCOMMODITYNAME2);
      }
      if (WR1SCOMMODITYID2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1SCOMMODITYID2);
      }
      if (WR1SSETTLEMENTMONTH2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WR1SSETTLEMENTMONTH2);
      }
      if (WR1SSTRIKEPRICE2 != 0D) {
        size += 2 + 8;
      }
      if (WR1SBUYSELLKIND2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1SBUYSELLKIND2);
      }
      if (WR1SSTOCKCODE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1SSTOCKCODE2);
      }
      if (WR1NCBQTY != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WR1NCBQTY);
      }
      if (WR1NCBAVGPRICE != 0D) {
        size += 2 + 8;
      }
      if (WR1NCSQTY != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WR1NCSQTY);
      }
      if (WR1NCSAVGPRICE != 0D) {
        size += 2 + 8;
      }
      if (WR1NOWPRICE != 0D) {
        size += 2 + 8;
      }
      if (WR1CORKIND.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1CORKIND);
      }
      if (WR1VARINCOME != 0D) {
        size += 2 + 8;
      }
      if (WR1ORDERBQTY != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WR1ORDERBQTY);
      }
      if (WR1ORDERSQTY != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WR1ORDERSQTY);
      }
      if (WR1TDSNEWOQTY != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WR1TDSNEWOQTY);
      }
      if (WR1YESTERDAYPRICE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1YESTERDAYPRICE);
      }
      if (WR1STRATEGYCODE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1STRATEGYCODE);
      }
      if (WR1VARINCOMECURRENCY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1VARINCOMECURRENCY);
      }
      if (WR1FNCBQTY != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WR1FNCBQTY);
      }
      if (WR1FNCSQTY != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WR1FNCSQTY);
      }
      if (WR1TRADENCBQTY != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WR1TRADENCBQTY);
      }
      if (WR1TRADENCSQTY != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WR1TRADENCSQTY);
      }
      if (WR1SUBVARINCOME != 0D) {
        size += 2 + 8;
      }
      if (WR1YESTERDAYPRICE2 != 0D) {
        size += 2 + 8;
      }
      if (WR1NCBAVGPRICE4 != 0D) {
        size += 2 + 8;
      }
      if (WR1NCSAVGPRICE4 != 0D) {
        size += 2 + 8;
      }
      if (WR1SOURCEFLAG.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR1SOURCEFLAG);
      }
      if (FILLER.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER);
      }
      if (WR1BVARINCOME1 != 0D) {
        size += 2 + 8;
      }
      if (WR1BVARINCOME2 != 0D) {
        size += 2 + 8;
      }
      if (WR1BAVGPRICE1 != 0D) {
        size += 2 + 8;
      }
      if (WR1BAVGPRICE2 != 0D) {
        size += 2 + 8;
      }
      if (WR1BNOWPRICE1 != 0D) {
        size += 2 + 8;
      }
      if (WR1BNOWPRICE2 != 0D) {
        size += 2 + 8;
      }
      if (WR1SVARINCOME1 != 0D) {
        size += 2 + 8;
      }
      if (WR1SVARINCOME2 != 0D) {
        size += 2 + 8;
      }
      if (WR1SAVGPRICE1 != 0D) {
        size += 2 + 8;
      }
      if (WR1SAVGPRICE2 != 0D) {
        size += 2 + 8;
      }
      if (WR1SNOWPRICE1 != 0D) {
        size += 2 + 8;
      }
      if (WR1SNOWPRICE2 != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemResult_AGGREGATE other) {
      if (other == null) {
        return;
      }
      if (other.WR1DATAFLAG1.Length != 0) {
        WR1DATAFLAG1 = other.WR1DATAFLAG1;
      }
      if (other.WR1DATAFLAG2.Length != 0) {
        WR1DATAFLAG2 = other.WR1DATAFLAG2;
      }
      if (other.WR1TRID.Length != 0) {
        WR1TRID = other.WR1TRID;
      }
      if (other.WR1BTRID1.Length != 0) {
        WR1BTRID1 = other.WR1BTRID1;
      }
      if (other.WR1BCOMMODITYNAME1.Length != 0) {
        WR1BCOMMODITYNAME1 = other.WR1BCOMMODITYNAME1;
      }
      if (other.WR1BCOMMODITYID1.Length != 0) {
        WR1BCOMMODITYID1 = other.WR1BCOMMODITYID1;
      }
      if (other.WR1BSETTLEMENTMONTH1 != 0) {
        WR1BSETTLEMENTMONTH1 = other.WR1BSETTLEMENTMONTH1;
      }
      if (other.WR1BSTRIKEPRICE1 != 0D) {
        WR1BSTRIKEPRICE1 = other.WR1BSTRIKEPRICE1;
      }
      if (other.WR1BBUYSELLKIND1.Length != 0) {
        WR1BBUYSELLKIND1 = other.WR1BBUYSELLKIND1;
      }
      if (other.WR1BSTOCKCODE1.Length != 0) {
        WR1BSTOCKCODE1 = other.WR1BSTOCKCODE1;
      }
      if (other.WR1BTRID2.Length != 0) {
        WR1BTRID2 = other.WR1BTRID2;
      }
      if (other.WR1BCOMMODITYNAME2.Length != 0) {
        WR1BCOMMODITYNAME2 = other.WR1BCOMMODITYNAME2;
      }
      if (other.WR1BCOMMODITYID2.Length != 0) {
        WR1BCOMMODITYID2 = other.WR1BCOMMODITYID2;
      }
      if (other.WR1BSETTLEMENTMONTH2 != 0) {
        WR1BSETTLEMENTMONTH2 = other.WR1BSETTLEMENTMONTH2;
      }
      if (other.WR1BSTRIKEPRICE2 != 0D) {
        WR1BSTRIKEPRICE2 = other.WR1BSTRIKEPRICE2;
      }
      if (other.WR1BBUYSELLKIND2.Length != 0) {
        WR1BBUYSELLKIND2 = other.WR1BBUYSELLKIND2;
      }
      if (other.WR1BSTOCKCODE2.Length != 0) {
        WR1BSTOCKCODE2 = other.WR1BSTOCKCODE2;
      }
      if (other.WR1STRID1.Length != 0) {
        WR1STRID1 = other.WR1STRID1;
      }
      if (other.WR1SCOMMODITYNAME1.Length != 0) {
        WR1SCOMMODITYNAME1 = other.WR1SCOMMODITYNAME1;
      }
      if (other.WR1SCOMMODITYID1.Length != 0) {
        WR1SCOMMODITYID1 = other.WR1SCOMMODITYID1;
      }
      if (other.WR1SSETTLEMENTMONTH1 != 0) {
        WR1SSETTLEMENTMONTH1 = other.WR1SSETTLEMENTMONTH1;
      }
      if (other.WR1SSTRIKEPRICE1 != 0D) {
        WR1SSTRIKEPRICE1 = other.WR1SSTRIKEPRICE1;
      }
      if (other.WR1SBUYSELLKIND1.Length != 0) {
        WR1SBUYSELLKIND1 = other.WR1SBUYSELLKIND1;
      }
      if (other.WR1SSTOCKCODE1.Length != 0) {
        WR1SSTOCKCODE1 = other.WR1SSTOCKCODE1;
      }
      if (other.WR1STRID2.Length != 0) {
        WR1STRID2 = other.WR1STRID2;
      }
      if (other.WR1SCOMMODITYNAME2.Length != 0) {
        WR1SCOMMODITYNAME2 = other.WR1SCOMMODITYNAME2;
      }
      if (other.WR1SCOMMODITYID2.Length != 0) {
        WR1SCOMMODITYID2 = other.WR1SCOMMODITYID2;
      }
      if (other.WR1SSETTLEMENTMONTH2 != 0) {
        WR1SSETTLEMENTMONTH2 = other.WR1SSETTLEMENTMONTH2;
      }
      if (other.WR1SSTRIKEPRICE2 != 0D) {
        WR1SSTRIKEPRICE2 = other.WR1SSTRIKEPRICE2;
      }
      if (other.WR1SBUYSELLKIND2.Length != 0) {
        WR1SBUYSELLKIND2 = other.WR1SBUYSELLKIND2;
      }
      if (other.WR1SSTOCKCODE2.Length != 0) {
        WR1SSTOCKCODE2 = other.WR1SSTOCKCODE2;
      }
      if (other.WR1NCBQTY != 0L) {
        WR1NCBQTY = other.WR1NCBQTY;
      }
      if (other.WR1NCBAVGPRICE != 0D) {
        WR1NCBAVGPRICE = other.WR1NCBAVGPRICE;
      }
      if (other.WR1NCSQTY != 0L) {
        WR1NCSQTY = other.WR1NCSQTY;
      }
      if (other.WR1NCSAVGPRICE != 0D) {
        WR1NCSAVGPRICE = other.WR1NCSAVGPRICE;
      }
      if (other.WR1NOWPRICE != 0D) {
        WR1NOWPRICE = other.WR1NOWPRICE;
      }
      if (other.WR1CORKIND.Length != 0) {
        WR1CORKIND = other.WR1CORKIND;
      }
      if (other.WR1VARINCOME != 0D) {
        WR1VARINCOME = other.WR1VARINCOME;
      }
      if (other.WR1ORDERBQTY != 0L) {
        WR1ORDERBQTY = other.WR1ORDERBQTY;
      }
      if (other.WR1ORDERSQTY != 0L) {
        WR1ORDERSQTY = other.WR1ORDERSQTY;
      }
      if (other.WR1TDSNEWOQTY != 0L) {
        WR1TDSNEWOQTY = other.WR1TDSNEWOQTY;
      }
      if (other.WR1YESTERDAYPRICE.Length != 0) {
        WR1YESTERDAYPRICE = other.WR1YESTERDAYPRICE;
      }
      if (other.WR1STRATEGYCODE.Length != 0) {
        WR1STRATEGYCODE = other.WR1STRATEGYCODE;
      }
      if (other.WR1VARINCOMECURRENCY.Length != 0) {
        WR1VARINCOMECURRENCY = other.WR1VARINCOMECURRENCY;
      }
      if (other.WR1FNCBQTY != 0L) {
        WR1FNCBQTY = other.WR1FNCBQTY;
      }
      if (other.WR1FNCSQTY != 0L) {
        WR1FNCSQTY = other.WR1FNCSQTY;
      }
      if (other.WR1TRADENCBQTY != 0L) {
        WR1TRADENCBQTY = other.WR1TRADENCBQTY;
      }
      if (other.WR1TRADENCSQTY != 0L) {
        WR1TRADENCSQTY = other.WR1TRADENCSQTY;
      }
      if (other.WR1SUBVARINCOME != 0D) {
        WR1SUBVARINCOME = other.WR1SUBVARINCOME;
      }
      if (other.WR1YESTERDAYPRICE2 != 0D) {
        WR1YESTERDAYPRICE2 = other.WR1YESTERDAYPRICE2;
      }
      if (other.WR1NCBAVGPRICE4 != 0D) {
        WR1NCBAVGPRICE4 = other.WR1NCBAVGPRICE4;
      }
      if (other.WR1NCSAVGPRICE4 != 0D) {
        WR1NCSAVGPRICE4 = other.WR1NCSAVGPRICE4;
      }
      if (other.WR1SOURCEFLAG.Length != 0) {
        WR1SOURCEFLAG = other.WR1SOURCEFLAG;
      }
      if (other.FILLER.Length != 0) {
        FILLER = other.FILLER;
      }
      if (other.WR1BVARINCOME1 != 0D) {
        WR1BVARINCOME1 = other.WR1BVARINCOME1;
      }
      if (other.WR1BVARINCOME2 != 0D) {
        WR1BVARINCOME2 = other.WR1BVARINCOME2;
      }
      if (other.WR1BAVGPRICE1 != 0D) {
        WR1BAVGPRICE1 = other.WR1BAVGPRICE1;
      }
      if (other.WR1BAVGPRICE2 != 0D) {
        WR1BAVGPRICE2 = other.WR1BAVGPRICE2;
      }
      if (other.WR1BNOWPRICE1 != 0D) {
        WR1BNOWPRICE1 = other.WR1BNOWPRICE1;
      }
      if (other.WR1BNOWPRICE2 != 0D) {
        WR1BNOWPRICE2 = other.WR1BNOWPRICE2;
      }
      if (other.WR1SVARINCOME1 != 0D) {
        WR1SVARINCOME1 = other.WR1SVARINCOME1;
      }
      if (other.WR1SVARINCOME2 != 0D) {
        WR1SVARINCOME2 = other.WR1SVARINCOME2;
      }
      if (other.WR1SAVGPRICE1 != 0D) {
        WR1SAVGPRICE1 = other.WR1SAVGPRICE1;
      }
      if (other.WR1SAVGPRICE2 != 0D) {
        WR1SAVGPRICE2 = other.WR1SAVGPRICE2;
      }
      if (other.WR1SNOWPRICE1 != 0D) {
        WR1SNOWPRICE1 = other.WR1SNOWPRICE1;
      }
      if (other.WR1SNOWPRICE2 != 0D) {
        WR1SNOWPRICE2 = other.WR1SNOWPRICE2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WR1DATAFLAG1 = input.ReadString();
            break;
          }
          case 18: {
            WR1DATAFLAG2 = input.ReadString();
            break;
          }
          case 26: {
            WR1TRID = input.ReadString();
            break;
          }
          case 34: {
            WR1BTRID1 = input.ReadString();
            break;
          }
          case 42: {
            WR1BCOMMODITYNAME1 = input.ReadString();
            break;
          }
          case 50: {
            WR1BCOMMODITYID1 = input.ReadString();
            break;
          }
          case 56: {
            WR1BSETTLEMENTMONTH1 = input.ReadInt32();
            break;
          }
          case 65: {
            WR1BSTRIKEPRICE1 = input.ReadDouble();
            break;
          }
          case 74: {
            WR1BBUYSELLKIND1 = input.ReadString();
            break;
          }
          case 82: {
            WR1BSTOCKCODE1 = input.ReadString();
            break;
          }
          case 90: {
            WR1BTRID2 = input.ReadString();
            break;
          }
          case 98: {
            WR1BCOMMODITYNAME2 = input.ReadString();
            break;
          }
          case 106: {
            WR1BCOMMODITYID2 = input.ReadString();
            break;
          }
          case 112: {
            WR1BSETTLEMENTMONTH2 = input.ReadInt32();
            break;
          }
          case 121: {
            WR1BSTRIKEPRICE2 = input.ReadDouble();
            break;
          }
          case 130: {
            WR1BBUYSELLKIND2 = input.ReadString();
            break;
          }
          case 138: {
            WR1BSTOCKCODE2 = input.ReadString();
            break;
          }
          case 146: {
            WR1STRID1 = input.ReadString();
            break;
          }
          case 154: {
            WR1SCOMMODITYNAME1 = input.ReadString();
            break;
          }
          case 162: {
            WR1SCOMMODITYID1 = input.ReadString();
            break;
          }
          case 168: {
            WR1SSETTLEMENTMONTH1 = input.ReadInt32();
            break;
          }
          case 177: {
            WR1SSTRIKEPRICE1 = input.ReadDouble();
            break;
          }
          case 186: {
            WR1SBUYSELLKIND1 = input.ReadString();
            break;
          }
          case 194: {
            WR1SSTOCKCODE1 = input.ReadString();
            break;
          }
          case 202: {
            WR1STRID2 = input.ReadString();
            break;
          }
          case 210: {
            WR1SCOMMODITYNAME2 = input.ReadString();
            break;
          }
          case 218: {
            WR1SCOMMODITYID2 = input.ReadString();
            break;
          }
          case 224: {
            WR1SSETTLEMENTMONTH2 = input.ReadInt32();
            break;
          }
          case 233: {
            WR1SSTRIKEPRICE2 = input.ReadDouble();
            break;
          }
          case 242: {
            WR1SBUYSELLKIND2 = input.ReadString();
            break;
          }
          case 250: {
            WR1SSTOCKCODE2 = input.ReadString();
            break;
          }
          case 256: {
            WR1NCBQTY = input.ReadInt64();
            break;
          }
          case 265: {
            WR1NCBAVGPRICE = input.ReadDouble();
            break;
          }
          case 272: {
            WR1NCSQTY = input.ReadInt64();
            break;
          }
          case 281: {
            WR1NCSAVGPRICE = input.ReadDouble();
            break;
          }
          case 289: {
            WR1NOWPRICE = input.ReadDouble();
            break;
          }
          case 298: {
            WR1CORKIND = input.ReadString();
            break;
          }
          case 305: {
            WR1VARINCOME = input.ReadDouble();
            break;
          }
          case 312: {
            WR1ORDERBQTY = input.ReadInt64();
            break;
          }
          case 320: {
            WR1ORDERSQTY = input.ReadInt64();
            break;
          }
          case 328: {
            WR1TDSNEWOQTY = input.ReadInt64();
            break;
          }
          case 338: {
            WR1YESTERDAYPRICE = input.ReadString();
            break;
          }
          case 346: {
            WR1STRATEGYCODE = input.ReadString();
            break;
          }
          case 354: {
            WR1VARINCOMECURRENCY = input.ReadString();
            break;
          }
          case 360: {
            WR1FNCBQTY = input.ReadInt64();
            break;
          }
          case 368: {
            WR1FNCSQTY = input.ReadInt64();
            break;
          }
          case 376: {
            WR1TRADENCBQTY = input.ReadInt64();
            break;
          }
          case 384: {
            WR1TRADENCSQTY = input.ReadInt64();
            break;
          }
          case 393: {
            WR1SUBVARINCOME = input.ReadDouble();
            break;
          }
          case 401: {
            WR1YESTERDAYPRICE2 = input.ReadDouble();
            break;
          }
          case 409: {
            WR1NCBAVGPRICE4 = input.ReadDouble();
            break;
          }
          case 417: {
            WR1NCSAVGPRICE4 = input.ReadDouble();
            break;
          }
          case 426: {
            WR1SOURCEFLAG = input.ReadString();
            break;
          }
          case 434: {
            FILLER = input.ReadString();
            break;
          }
          case 441: {
            WR1BVARINCOME1 = input.ReadDouble();
            break;
          }
          case 449: {
            WR1BVARINCOME2 = input.ReadDouble();
            break;
          }
          case 457: {
            WR1BAVGPRICE1 = input.ReadDouble();
            break;
          }
          case 465: {
            WR1BAVGPRICE2 = input.ReadDouble();
            break;
          }
          case 473: {
            WR1BNOWPRICE1 = input.ReadDouble();
            break;
          }
          case 481: {
            WR1BNOWPRICE2 = input.ReadDouble();
            break;
          }
          case 489: {
            WR1SVARINCOME1 = input.ReadDouble();
            break;
          }
          case 497: {
            WR1SVARINCOME2 = input.ReadDouble();
            break;
          }
          case 505: {
            WR1SAVGPRICE1 = input.ReadDouble();
            break;
          }
          case 513: {
            WR1SAVGPRICE2 = input.ReadDouble();
            break;
          }
          case 521: {
            WR1SNOWPRICE1 = input.ReadDouble();
            break;
          }
          case 529: {
            WR1SNOWPRICE2 = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///    => 2 未平倉明細 (WR_READ_DATA) 明細格式如下 : (400 bytes)
  /// </summary>
  public sealed partial class TandemResult_DETAIL : pb::IMessage<TandemResult_DETAIL> {
    private static readonly pb::MessageParser<TandemResult_DETAIL> _parser = new pb::MessageParser<TandemResult_DETAIL>(() => new TandemResult_DETAIL());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemResult_DETAIL> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_DETAIL() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_DETAIL(TandemResult_DETAIL other) : this() {
      wR2DATAFLAG1_ = other.wR2DATAFLAG1_;
      wR2DATAFLAG2_ = other.wR2DATAFLAG2_;
      wR2MATCHDATE_ = other.wR2MATCHDATE_;
      wR2TRID1_ = other.wR2TRID1_;
      wR2COMMODITYNAME1_ = other.wR2COMMODITYNAME1_;
      wR2COMMODITYID1_ = other.wR2COMMODITYID1_;
      wR2SETTLEMENTMONTH1_ = other.wR2SETTLEMENTMONTH1_;
      wR2STRIKEPRICE1_ = other.wR2STRIKEPRICE1_;
      wR2BUYSELLKIND1_ = other.wR2BUYSELLKIND1_;
      wR2STOCKCODE1_ = other.wR2STOCKCODE1_;
      wR2MATCHQTY_ = other.wR2MATCHQTY_;
      wR2NONCOVERQTY_ = other.wR2NONCOVERQTY_;
      wR2MATCHPRICE_ = other.wR2MATCHPRICE_;
      wR2NOWPRICE_ = other.wR2NOWPRICE_;
      wR2VARINCOME_ = other.wR2VARINCOME_;
      wR2ORDERNOF_ = other.wR2ORDERNOF_;
      wR2ORDERNOL_ = other.wR2ORDERNOL_;
      wR2SPOKIND_ = other.wR2SPOKIND_;
      wR2STRATEGYCODE_ = other.wR2STRATEGYCODE_;
      wR2VARINCOMECURRENCY_ = other.wR2VARINCOMECURRENCY_;
      wR2DAYTRADEID_ = other.wR2DAYTRADEID_;
      fILLER_ = other.fILLER_;
      wR2MATCHPRICE9_ = other.wR2MATCHPRICE9_;
      wR2NOWPRICE9_ = other.wR2NOWPRICE9_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_DETAIL Clone() {
      return new TandemResult_DETAIL(this);
    }

    /// <summary>Field number for the "WR2_DATA_FLAG_1" field.</summary>
    public const int WR2DATAFLAG1FieldNumber = 1;
    private string wR2DATAFLAG1_ = "";
    /// <summary>
    ///            PIC X(1).資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR2DATAFLAG1 {
      get { return wR2DATAFLAG1_; }
      set {
        wR2DATAFLAG1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR2_DATA_FLAG_2" field.</summary>
    public const int WR2DATAFLAG2FieldNumber = 2;
    private string wR2DATAFLAG2_ = "";
    /// <summary>
    ///          PIC X(1).子資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR2DATAFLAG2 {
      get { return wR2DATAFLAG2_; }
      set {
        wR2DATAFLAG2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR2_MATCH_DATE" field.</summary>
    public const int WR2MATCHDATEFieldNumber = 3;
    private string wR2MATCHDATE_ = "";
    /// <summary>
    ///             PIC X(08).成交日期YYYYMMDD/ "競價中"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR2MATCHDATE {
      get { return wR2MATCHDATE_; }
      set {
        wR2MATCHDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR2_TR_ID_1" field.</summary>
    public const int WR2TRID1FieldNumber = 4;
    private string wR2TRID1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR2TRID1 {
      get { return wR2TRID1_; }
      set {
        wR2TRID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR2_COMMODITY_NAME_1" field.</summary>
    public const int WR2COMMODITYNAME1FieldNumber = 5;
    private string wR2COMMODITYNAME1_ = "";
    /// <summary>
    ///  PIC X(10).//商品１簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR2COMMODITYNAME1 {
      get { return wR2COMMODITYNAME1_; }
      set {
        wR2COMMODITYNAME1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR2_COMMODITY_ID_1" field.</summary>
    public const int WR2COMMODITYID1FieldNumber = 6;
    private string wR2COMMODITYID1_ = "";
    /// <summary>
    ///    PIC X(7).商品１代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR2COMMODITYID1 {
      get { return wR2COMMODITYID1_; }
      set {
        wR2COMMODITYID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR2_SETTLEMENT_MONTH_1" field.</summary>
    public const int WR2SETTLEMENTMONTH1FieldNumber = 7;
    private long wR2SETTLEMENTMONTH1_;
    /// <summary>
    /// PIC 9(6).商品１年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WR2SETTLEMENTMONTH1 {
      get { return wR2SETTLEMENTMONTH1_; }
      set {
        wR2SETTLEMENTMONTH1_ = value;
      }
    }

    /// <summary>Field number for the "WR2_STRIKE_PRICE_1" field.</summary>
    public const int WR2STRIKEPRICE1FieldNumber = 8;
    private double wR2STRIKEPRICE1_;
    /// <summary>
    ///   PIC 9(6)V9(3).商品１履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR2STRIKEPRICE1 {
      get { return wR2STRIKEPRICE1_; }
      set {
        wR2STRIKEPRICE1_ = value;
      }
    }

    /// <summary>Field number for the "WR2_BUY_SELL_KIND_1" field.</summary>
    public const int WR2BUYSELLKIND1FieldNumber = 9;
    private string wR2BUYSELLKIND1_ = "";
    /// <summary>
    ///   PIC X(1).商品１買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR2BUYSELLKIND1 {
      get { return wR2BUYSELLKIND1_; }
      set {
        wR2BUYSELLKIND1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR2_STOCK_CODE_1" field.</summary>
    public const int WR2STOCKCODE1FieldNumber = 10;
    private string wR2STOCKCODE1_ = "";
    /// <summary>
    ///    PIC X(07).商品１個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR2STOCKCODE1 {
      get { return wR2STOCKCODE1_; }
      set {
        wR2STOCKCODE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR2_MATCH_QTY" field.</summary>
    public const int WR2MATCHQTYFieldNumber = 11;
    private long wR2MATCHQTY_;
    /// <summary>
    ///     PIC 9(14) COMP.成交口數/委託口數if WR2_match_date 為 YYMMDD成交日 ,此欄為成交口數if WR2_match_date 為 "競價中"     ,此欄為委託口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WR2MATCHQTY {
      get { return wR2MATCHQTY_; }
      set {
        wR2MATCHQTY_ = value;
      }
    }

    /// <summary>Field number for the "WR2_NON_COVER_QTY" field.</summary>
    public const int WR2NONCOVERQTYFieldNumber = 12;
    private long wR2NONCOVERQTY_;
    /// <summary>
    ///   PIC 9(14) COMP.未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WR2NONCOVERQTY {
      get { return wR2NONCOVERQTY_; }
      set {
        wR2NONCOVERQTY_ = value;
      }
    }

    /// <summary>Field number for the "WR2_MATCH_PRICE" field.</summary>
    public const int WR2MATCHPRICEFieldNumber = 13;
    private double wR2MATCHPRICE_;
    /// <summary>
    ///     PIC S9(6)V9(3) COMP."成交價格/委託價格(擬作廢日期未定,請改用底下小數9位的對應欄位)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR2MATCHPRICE {
      get { return wR2MATCHPRICE_; }
      set {
        wR2MATCHPRICE_ = value;
      }
    }

    /// <summary>Field number for the "WR2_NOW_PRICE" field.</summary>
    public const int WR2NOWPRICEFieldNumber = 14;
    private double wR2NOWPRICE_;
    /// <summary>
    ///    PIC S9(6)V9(3) COMP."現(貨)價(擬作廢日期未定,請改用底下小數9位的對應欄位)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR2NOWPRICE {
      get { return wR2NOWPRICE_; }
      set {
        wR2NOWPRICE_ = value;
      }
    }

    /// <summary>Field number for the "WR2_VAR_INCOME" field.</summary>
    public const int WR2VARINCOMEFieldNumber = 15;
    private double wR2VARINCOME_;
    /// <summary>
    ///   PIC S9(14)V9(2) COMP.預估損益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR2VARINCOME {
      get { return wR2VARINCOME_; }
      set {
        wR2VARINCOME_ = value;
      }
    }

    /// <summary>Field number for the "WR2_ORDER_NO_F" field.</summary>
    public const int WR2ORDERNOFFieldNumber = 16;
    private string wR2ORDERNOF_ = "";
    /// <summary>
    ///   PIC X(02).委託書編號頭兩碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR2ORDERNOF {
      get { return wR2ORDERNOF_; }
      set {
        wR2ORDERNOF_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR2_ORDER_NO_L" field.</summary>
    public const int WR2ORDERNOLFieldNumber = 17;
    private string wR2ORDERNOL_ = "";
    /// <summary>
    ///   PIC X(03).委託書編號流水號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR2ORDERNOL {
      get { return wR2ORDERNOL_; }
      set {
        wR2ORDERNOL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR2_SPO_KIND" field.</summary>
    public const int WR2SPOKINDFieldNumber = 18;
    private string wR2SPOKIND_ = "";
    /// <summary>
    ///   PIC X(3).特殊單(DONOT CARE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR2SPOKIND {
      get { return wR2SPOKIND_; }
      set {
        wR2SPOKIND_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR2_STRATEGY_CODE" field.</summary>
    public const int WR2STRATEGYCODEFieldNumber = 19;
    private string wR2STRATEGYCODE_ = "";
    /// <summary>
    ///   PIC X(5).策略代號(TMPS)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR2STRATEGYCODE {
      get { return wR2STRATEGYCODE_; }
      set {
        wR2STRATEGYCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR2_VAR_INCOME_CURRENCY" field.</summary>
    public const int WR2VARINCOMECURRENCYFieldNumber = 20;
    private string wR2VARINCOMECURRENCY_ = "";
    /// <summary>
    /// PIC X(1)."N":台幣 "U"美金 "R":人民幣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR2VARINCOMECURRENCY {
      get { return wR2VARINCOMECURRENCY_; }
      set {
        wR2VARINCOMECURRENCY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR2_DAY_TRADE_ID" field.</summary>
    public const int WR2DAYTRADEIDFieldNumber = 21;
    private string wR2DAYTRADEID_ = "";
    /// <summary>
    ///    PIC X(01).當沖記號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR2DAYTRADEID {
      get { return wR2DAYTRADEID_; }
      set {
        wR2DAYTRADEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER" field.</summary>
    public const int FILLERFieldNumber = 22;
    private string fILLER_ = "";
    /// <summary>
    ///       PIC X(01).FILLSER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER {
      get { return fILLER_; }
      set {
        fILLER_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR2_MATCH_PRICE_9" field.</summary>
    public const int WR2MATCHPRICE9FieldNumber = 23;
    private double wR2MATCHPRICE9_;
    /// <summary>
    ///   PIC S9(9)V9(9) COMP.成交價格/委託價格(小數9位)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR2MATCHPRICE9 {
      get { return wR2MATCHPRICE9_; }
      set {
        wR2MATCHPRICE9_ = value;
      }
    }

    /// <summary>Field number for the "WR2_NOW_PRICE_9" field.</summary>
    public const int WR2NOWPRICE9FieldNumber = 24;
    private double wR2NOWPRICE9_;
    /// <summary>
    ///     PIC S9(9)V9(9) COMP.現(貨)價(小數9位)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WR2NOWPRICE9 {
      get { return wR2NOWPRICE9_; }
      set {
        wR2NOWPRICE9_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemResult_DETAIL);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemResult_DETAIL other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WR2DATAFLAG1 != other.WR2DATAFLAG1) return false;
      if (WR2DATAFLAG2 != other.WR2DATAFLAG2) return false;
      if (WR2MATCHDATE != other.WR2MATCHDATE) return false;
      if (WR2TRID1 != other.WR2TRID1) return false;
      if (WR2COMMODITYNAME1 != other.WR2COMMODITYNAME1) return false;
      if (WR2COMMODITYID1 != other.WR2COMMODITYID1) return false;
      if (WR2SETTLEMENTMONTH1 != other.WR2SETTLEMENTMONTH1) return false;
      if (WR2STRIKEPRICE1 != other.WR2STRIKEPRICE1) return false;
      if (WR2BUYSELLKIND1 != other.WR2BUYSELLKIND1) return false;
      if (WR2STOCKCODE1 != other.WR2STOCKCODE1) return false;
      if (WR2MATCHQTY != other.WR2MATCHQTY) return false;
      if (WR2NONCOVERQTY != other.WR2NONCOVERQTY) return false;
      if (WR2MATCHPRICE != other.WR2MATCHPRICE) return false;
      if (WR2NOWPRICE != other.WR2NOWPRICE) return false;
      if (WR2VARINCOME != other.WR2VARINCOME) return false;
      if (WR2ORDERNOF != other.WR2ORDERNOF) return false;
      if (WR2ORDERNOL != other.WR2ORDERNOL) return false;
      if (WR2SPOKIND != other.WR2SPOKIND) return false;
      if (WR2STRATEGYCODE != other.WR2STRATEGYCODE) return false;
      if (WR2VARINCOMECURRENCY != other.WR2VARINCOMECURRENCY) return false;
      if (WR2DAYTRADEID != other.WR2DAYTRADEID) return false;
      if (FILLER != other.FILLER) return false;
      if (WR2MATCHPRICE9 != other.WR2MATCHPRICE9) return false;
      if (WR2NOWPRICE9 != other.WR2NOWPRICE9) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WR2DATAFLAG1.Length != 0) hash ^= WR2DATAFLAG1.GetHashCode();
      if (WR2DATAFLAG2.Length != 0) hash ^= WR2DATAFLAG2.GetHashCode();
      if (WR2MATCHDATE.Length != 0) hash ^= WR2MATCHDATE.GetHashCode();
      if (WR2TRID1.Length != 0) hash ^= WR2TRID1.GetHashCode();
      if (WR2COMMODITYNAME1.Length != 0) hash ^= WR2COMMODITYNAME1.GetHashCode();
      if (WR2COMMODITYID1.Length != 0) hash ^= WR2COMMODITYID1.GetHashCode();
      if (WR2SETTLEMENTMONTH1 != 0L) hash ^= WR2SETTLEMENTMONTH1.GetHashCode();
      if (WR2STRIKEPRICE1 != 0D) hash ^= WR2STRIKEPRICE1.GetHashCode();
      if (WR2BUYSELLKIND1.Length != 0) hash ^= WR2BUYSELLKIND1.GetHashCode();
      if (WR2STOCKCODE1.Length != 0) hash ^= WR2STOCKCODE1.GetHashCode();
      if (WR2MATCHQTY != 0L) hash ^= WR2MATCHQTY.GetHashCode();
      if (WR2NONCOVERQTY != 0L) hash ^= WR2NONCOVERQTY.GetHashCode();
      if (WR2MATCHPRICE != 0D) hash ^= WR2MATCHPRICE.GetHashCode();
      if (WR2NOWPRICE != 0D) hash ^= WR2NOWPRICE.GetHashCode();
      if (WR2VARINCOME != 0D) hash ^= WR2VARINCOME.GetHashCode();
      if (WR2ORDERNOF.Length != 0) hash ^= WR2ORDERNOF.GetHashCode();
      if (WR2ORDERNOL.Length != 0) hash ^= WR2ORDERNOL.GetHashCode();
      if (WR2SPOKIND.Length != 0) hash ^= WR2SPOKIND.GetHashCode();
      if (WR2STRATEGYCODE.Length != 0) hash ^= WR2STRATEGYCODE.GetHashCode();
      if (WR2VARINCOMECURRENCY.Length != 0) hash ^= WR2VARINCOMECURRENCY.GetHashCode();
      if (WR2DAYTRADEID.Length != 0) hash ^= WR2DAYTRADEID.GetHashCode();
      if (FILLER.Length != 0) hash ^= FILLER.GetHashCode();
      if (WR2MATCHPRICE9 != 0D) hash ^= WR2MATCHPRICE9.GetHashCode();
      if (WR2NOWPRICE9 != 0D) hash ^= WR2NOWPRICE9.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WR2DATAFLAG1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WR2DATAFLAG1);
      }
      if (WR2DATAFLAG2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WR2DATAFLAG2);
      }
      if (WR2MATCHDATE.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WR2MATCHDATE);
      }
      if (WR2TRID1.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WR2TRID1);
      }
      if (WR2COMMODITYNAME1.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WR2COMMODITYNAME1);
      }
      if (WR2COMMODITYID1.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WR2COMMODITYID1);
      }
      if (WR2SETTLEMENTMONTH1 != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(WR2SETTLEMENTMONTH1);
      }
      if (WR2STRIKEPRICE1 != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(WR2STRIKEPRICE1);
      }
      if (WR2BUYSELLKIND1.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WR2BUYSELLKIND1);
      }
      if (WR2STOCKCODE1.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WR2STOCKCODE1);
      }
      if (WR2MATCHQTY != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(WR2MATCHQTY);
      }
      if (WR2NONCOVERQTY != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(WR2NONCOVERQTY);
      }
      if (WR2MATCHPRICE != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(WR2MATCHPRICE);
      }
      if (WR2NOWPRICE != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(WR2NOWPRICE);
      }
      if (WR2VARINCOME != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(WR2VARINCOME);
      }
      if (WR2ORDERNOF.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WR2ORDERNOF);
      }
      if (WR2ORDERNOL.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(WR2ORDERNOL);
      }
      if (WR2SPOKIND.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(WR2SPOKIND);
      }
      if (WR2STRATEGYCODE.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(WR2STRATEGYCODE);
      }
      if (WR2VARINCOMECURRENCY.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WR2VARINCOMECURRENCY);
      }
      if (WR2DAYTRADEID.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(WR2DAYTRADEID);
      }
      if (FILLER.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(FILLER);
      }
      if (WR2MATCHPRICE9 != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(WR2MATCHPRICE9);
      }
      if (WR2NOWPRICE9 != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(WR2NOWPRICE9);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WR2DATAFLAG1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR2DATAFLAG1);
      }
      if (WR2DATAFLAG2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR2DATAFLAG2);
      }
      if (WR2MATCHDATE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR2MATCHDATE);
      }
      if (WR2TRID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR2TRID1);
      }
      if (WR2COMMODITYNAME1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR2COMMODITYNAME1);
      }
      if (WR2COMMODITYID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR2COMMODITYID1);
      }
      if (WR2SETTLEMENTMONTH1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WR2SETTLEMENTMONTH1);
      }
      if (WR2STRIKEPRICE1 != 0D) {
        size += 1 + 8;
      }
      if (WR2BUYSELLKIND1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR2BUYSELLKIND1);
      }
      if (WR2STOCKCODE1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR2STOCKCODE1);
      }
      if (WR2MATCHQTY != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WR2MATCHQTY);
      }
      if (WR2NONCOVERQTY != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WR2NONCOVERQTY);
      }
      if (WR2MATCHPRICE != 0D) {
        size += 1 + 8;
      }
      if (WR2NOWPRICE != 0D) {
        size += 1 + 8;
      }
      if (WR2VARINCOME != 0D) {
        size += 1 + 8;
      }
      if (WR2ORDERNOF.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR2ORDERNOF);
      }
      if (WR2ORDERNOL.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR2ORDERNOL);
      }
      if (WR2SPOKIND.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR2SPOKIND);
      }
      if (WR2STRATEGYCODE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR2STRATEGYCODE);
      }
      if (WR2VARINCOMECURRENCY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR2VARINCOMECURRENCY);
      }
      if (WR2DAYTRADEID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR2DAYTRADEID);
      }
      if (FILLER.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER);
      }
      if (WR2MATCHPRICE9 != 0D) {
        size += 2 + 8;
      }
      if (WR2NOWPRICE9 != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemResult_DETAIL other) {
      if (other == null) {
        return;
      }
      if (other.WR2DATAFLAG1.Length != 0) {
        WR2DATAFLAG1 = other.WR2DATAFLAG1;
      }
      if (other.WR2DATAFLAG2.Length != 0) {
        WR2DATAFLAG2 = other.WR2DATAFLAG2;
      }
      if (other.WR2MATCHDATE.Length != 0) {
        WR2MATCHDATE = other.WR2MATCHDATE;
      }
      if (other.WR2TRID1.Length != 0) {
        WR2TRID1 = other.WR2TRID1;
      }
      if (other.WR2COMMODITYNAME1.Length != 0) {
        WR2COMMODITYNAME1 = other.WR2COMMODITYNAME1;
      }
      if (other.WR2COMMODITYID1.Length != 0) {
        WR2COMMODITYID1 = other.WR2COMMODITYID1;
      }
      if (other.WR2SETTLEMENTMONTH1 != 0L) {
        WR2SETTLEMENTMONTH1 = other.WR2SETTLEMENTMONTH1;
      }
      if (other.WR2STRIKEPRICE1 != 0D) {
        WR2STRIKEPRICE1 = other.WR2STRIKEPRICE1;
      }
      if (other.WR2BUYSELLKIND1.Length != 0) {
        WR2BUYSELLKIND1 = other.WR2BUYSELLKIND1;
      }
      if (other.WR2STOCKCODE1.Length != 0) {
        WR2STOCKCODE1 = other.WR2STOCKCODE1;
      }
      if (other.WR2MATCHQTY != 0L) {
        WR2MATCHQTY = other.WR2MATCHQTY;
      }
      if (other.WR2NONCOVERQTY != 0L) {
        WR2NONCOVERQTY = other.WR2NONCOVERQTY;
      }
      if (other.WR2MATCHPRICE != 0D) {
        WR2MATCHPRICE = other.WR2MATCHPRICE;
      }
      if (other.WR2NOWPRICE != 0D) {
        WR2NOWPRICE = other.WR2NOWPRICE;
      }
      if (other.WR2VARINCOME != 0D) {
        WR2VARINCOME = other.WR2VARINCOME;
      }
      if (other.WR2ORDERNOF.Length != 0) {
        WR2ORDERNOF = other.WR2ORDERNOF;
      }
      if (other.WR2ORDERNOL.Length != 0) {
        WR2ORDERNOL = other.WR2ORDERNOL;
      }
      if (other.WR2SPOKIND.Length != 0) {
        WR2SPOKIND = other.WR2SPOKIND;
      }
      if (other.WR2STRATEGYCODE.Length != 0) {
        WR2STRATEGYCODE = other.WR2STRATEGYCODE;
      }
      if (other.WR2VARINCOMECURRENCY.Length != 0) {
        WR2VARINCOMECURRENCY = other.WR2VARINCOMECURRENCY;
      }
      if (other.WR2DAYTRADEID.Length != 0) {
        WR2DAYTRADEID = other.WR2DAYTRADEID;
      }
      if (other.FILLER.Length != 0) {
        FILLER = other.FILLER;
      }
      if (other.WR2MATCHPRICE9 != 0D) {
        WR2MATCHPRICE9 = other.WR2MATCHPRICE9;
      }
      if (other.WR2NOWPRICE9 != 0D) {
        WR2NOWPRICE9 = other.WR2NOWPRICE9;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WR2DATAFLAG1 = input.ReadString();
            break;
          }
          case 18: {
            WR2DATAFLAG2 = input.ReadString();
            break;
          }
          case 26: {
            WR2MATCHDATE = input.ReadString();
            break;
          }
          case 34: {
            WR2TRID1 = input.ReadString();
            break;
          }
          case 42: {
            WR2COMMODITYNAME1 = input.ReadString();
            break;
          }
          case 50: {
            WR2COMMODITYID1 = input.ReadString();
            break;
          }
          case 56: {
            WR2SETTLEMENTMONTH1 = input.ReadInt64();
            break;
          }
          case 65: {
            WR2STRIKEPRICE1 = input.ReadDouble();
            break;
          }
          case 74: {
            WR2BUYSELLKIND1 = input.ReadString();
            break;
          }
          case 82: {
            WR2STOCKCODE1 = input.ReadString();
            break;
          }
          case 88: {
            WR2MATCHQTY = input.ReadInt64();
            break;
          }
          case 96: {
            WR2NONCOVERQTY = input.ReadInt64();
            break;
          }
          case 105: {
            WR2MATCHPRICE = input.ReadDouble();
            break;
          }
          case 113: {
            WR2NOWPRICE = input.ReadDouble();
            break;
          }
          case 121: {
            WR2VARINCOME = input.ReadDouble();
            break;
          }
          case 130: {
            WR2ORDERNOF = input.ReadString();
            break;
          }
          case 138: {
            WR2ORDERNOL = input.ReadString();
            break;
          }
          case 146: {
            WR2SPOKIND = input.ReadString();
            break;
          }
          case 154: {
            WR2STRATEGYCODE = input.ReadString();
            break;
          }
          case 162: {
            WR2VARINCOMECURRENCY = input.ReadString();
            break;
          }
          case 170: {
            WR2DAYTRADEID = input.ReadString();
            break;
          }
          case 178: {
            FILLER = input.ReadString();
            break;
          }
          case 185: {
            WR2MATCHPRICE9 = input.ReadDouble();
            break;
          }
          case 193: {
            WR2NOWPRICE9 = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///    => 3 今彙總 (WR_READ_DATA) 明細格式如下 : (400 bytes)
  /// </summary>
  public sealed partial class TandemResult_TODAY_AGGREGATE : pb::IMessage<TandemResult_TODAY_AGGREGATE> {
    private static readonly pb::MessageParser<TandemResult_TODAY_AGGREGATE> _parser = new pb::MessageParser<TandemResult_TODAY_AGGREGATE>(() => new TandemResult_TODAY_AGGREGATE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemResult_TODAY_AGGREGATE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_TODAY_AGGREGATE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_TODAY_AGGREGATE(TandemResult_TODAY_AGGREGATE other) : this() {
      wR3DATAFLAG1_ = other.wR3DATAFLAG1_;
      wR3DATAFLAG2_ = other.wR3DATAFLAG2_;
      wR3TRID_ = other.wR3TRID_;
      wR3BTRID1_ = other.wR3BTRID1_;
      wR3BCOMMODITYNAME1_ = other.wR3BCOMMODITYNAME1_;
      wR3BCOMMODITYID1_ = other.wR3BCOMMODITYID1_;
      wR3BSETTLEMENTMONTH1_ = other.wR3BSETTLEMENTMONTH1_;
      wR3BSTRIKEPRICE1_ = other.wR3BSTRIKEPRICE1_;
      wR3BBUYSELLKIND1_ = other.wR3BBUYSELLKIND1_;
      wR3BSTOCKCODE1_ = other.wR3BSTOCKCODE1_;
      wR3BTRID2_ = other.wR3BTRID2_;
      wR3BCOMMODITYNAME2_ = other.wR3BCOMMODITYNAME2_;
      wR3BCOMMODITYID2_ = other.wR3BCOMMODITYID2_;
      wR3BSETTLEMENTMONTH2_ = other.wR3BSETTLEMENTMONTH2_;
      wR3BSTRIKEPRICE2_ = other.wR3BSTRIKEPRICE2_;
      wR3BBUYSELLKIND2_ = other.wR3BBUYSELLKIND2_;
      wR3BSTOCKCODE2_ = other.wR3BSTOCKCODE2_;
      wR3STRID1_ = other.wR3STRID1_;
      wR3SCOMMODITYNAME1_ = other.wR3SCOMMODITYNAME1_;
      wR3SCOMMODITYID1_ = other.wR3SCOMMODITYID1_;
      wR3SSETTLEMENTMONTH1_ = other.wR3SSETTLEMENTMONTH1_;
      wR3SSTRIKEPRICE1_ = other.wR3SSTRIKEPRICE1_;
      wR3SBUYSELLKIND1_ = other.wR3SBUYSELLKIND1_;
      wR3SSTOCKCODE1_ = other.wR3SSTOCKCODE1_;
      wR3STRID2_ = other.wR3STRID2_;
      wR3SCOMMODITYNAME2_ = other.wR3SCOMMODITYNAME2_;
      wR3SCOMMODITYID2_ = other.wR3SCOMMODITYID2_;
      wR3SSETTLEMENTMONTH2_ = other.wR3SSETTLEMENTMONTH2_;
      wR3SSTRIKEPRICE2_ = other.wR3SSTRIKEPRICE2_;
      wR3SBUYSELLKIND2_ = other.wR3SBUYSELLKIND2_;
      wR3SSTOCKCODE2_ = other.wR3SSTOCKCODE2_;
      wR3NCBQTY_ = other.wR3NCBQTY_;
      wR3NCBAVGPRICE_ = other.wR3NCBAVGPRICE_;
      wR3NCSQTY_ = other.wR3NCSQTY_;
      wR3NCSAVGPRICE_ = other.wR3NCSAVGPRICE_;
      wR3BORDERQTY_ = other.wR3BORDERQTY_;
      wR3BQTY_ = other.wR3BQTY_;
      wR3BAVGPRICE_ = other.wR3BAVGPRICE_;
      wR3SORDERQTY_ = other.wR3SORDERQTY_;
      wR3SQTY_ = other.wR3SQTY_;
      wR3SAVGPRICE_ = other.wR3SAVGPRICE_;
      wR3COVERINCOME_ = other.wR3COVERINCOME_;
      wR3STRATEGYCODE_ = other.wR3STRATEGYCODE_;
      wR3COVERINCOMECURRENCY_ = other.wR3COVERINCOMECURRENCY_;
      wR3BTRAORDERQTY_ = other.wR3BTRAORDERQTY_;
      wR3BTRAQTY_ = other.wR3BTRAQTY_;
      wR3BTRANCQTY_ = other.wR3BTRANCQTY_;
      wR3BTRAAVGPRICE_ = other.wR3BTRAAVGPRICE_;
      wR3STRAORDERQTY_ = other.wR3STRAORDERQTY_;
      wR3STRAQTY_ = other.wR3STRAQTY_;
      wR3STRANCQTY_ = other.wR3STRANCQTY_;
      wR3STRAAVGPRICE_ = other.wR3STRAAVGPRICE_;
      wR3TRAINCOME_ = other.wR3TRAINCOME_;
      wR3NCBAVGPRICE4_ = other.wR3NCBAVGPRICE4_;
      wR3NCSAVGPRICE4_ = other.wR3NCSAVGPRICE4_;
      wR3BTRAAVGPRICE4_ = other.wR3BTRAAVGPRICE4_;
      wR3STRAAVGPRICE4_ = other.wR3STRAAVGPRICE4_;
      wR3BAVGPRICE4_ = other.wR3BAVGPRICE4_;
      wR3SAVGPRICE4_ = other.wR3SAVGPRICE4_;
      fILLER_ = other.fILLER_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_TODAY_AGGREGATE Clone() {
      return new TandemResult_TODAY_AGGREGATE(this);
    }

    /// <summary>Field number for the "WR3_DATA_FLAG_1" field.</summary>
    public const int WR3DATAFLAG1FieldNumber = 1;
    private string wR3DATAFLAG1_ = "";
    /// <summary>
    ///             PIC X(1).	1	X	1	0	3:    今彙總	資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3DATAFLAG1 {
      get { return wR3DATAFLAG1_; }
      set {
        wR3DATAFLAG1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_DATA_FLAG_2" field.</summary>
    public const int WR3DATAFLAG2FieldNumber = 2;
    private string wR3DATAFLAG2_ = "";
    /// <summary>
    ///             PIC X(1).	1	X	1	0	1:首筆 	子資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3DATAFLAG2 {
      get { return wR3DATAFLAG2_; }
      set {
        wR3DATAFLAG2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_TR_ID" field.</summary>
    public const int WR3TRIDFieldNumber = 3;
    private string wR3TRID_ = "";
    /// <summary>
    ///                   PIC X(20).	20	X	20	0		期交所商品代號option:期交所編碼 (TXO + 05400履約價 + A_L:CALL,M_X:PUT...月 + 1年(2001) )fu: FITX,FITE,FITF,FIMTX (前七位名稱,後六位商品年月YYYYMM,後五位SPACES)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3TRID {
      get { return wR3TRID_; }
      set {
        wR3TRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_TR_ID_1" field.</summary>
    public const int WR3BTRID1FieldNumber = 4;
    private string wR3BTRID1_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BTRID1 {
      get { return wR3BTRID1_; }
      set {
        wR3BTRID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_COMMODITY_NAME_1" field.</summary>
    public const int WR3BCOMMODITYNAME1FieldNumber = 5;
    private string wR3BCOMMODITYNAME1_ = "";
    /// <summary>
    ///   PIC X(10).	10	X	10	0		買方  商品１                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BCOMMODITYNAME1 {
      get { return wR3BCOMMODITYNAME1_; }
      set {
        wR3BCOMMODITYNAME1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_COMMODITY_ID_1" field.</summary>
    public const int WR3BCOMMODITYID1FieldNumber = 6;
    private string wR3BCOMMODITYID1_ = "";
    /// <summary>
    ///     PIC X(7).	7	X	7	0		買方  商品１                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BCOMMODITYID1 {
      get { return wR3BCOMMODITYID1_; }
      set {
        wR3BCOMMODITYID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_SETTLEMENT_MONTH_1" field.</summary>
    public const int WR3BSETTLEMENTMONTH1FieldNumber = 7;
    private string wR3BSETTLEMENTMONTH1_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		買方  商品１           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BSETTLEMENTMONTH1 {
      get { return wR3BSETTLEMENTMONTH1_; }
      set {
        wR3BSETTLEMENTMONTH1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_STRIKE_PRICE_1" field.</summary>
    public const int WR3BSTRIKEPRICE1FieldNumber = 8;
    private string wR3BSTRIKEPRICE1_ = "";
    /// <summary>
    ///     PIC 9(6)V9(3).	9	9	6	3		買方  商品１               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BSTRIKEPRICE1 {
      get { return wR3BSTRIKEPRICE1_; }
      set {
        wR3BSTRIKEPRICE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_BUY_SELL_KIND_1" field.</summary>
    public const int WR3BBUYSELLKIND1FieldNumber = 9;
    private string wR3BBUYSELLKIND1_ = "";
    /// <summary>
    ///    PIC X(1).	1	X	1	0		買方  商品１               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BBUYSELLKIND1 {
      get { return wR3BBUYSELLKIND1_; }
      set {
        wR3BBUYSELLKIND1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_STOCK_CODE_1" field.</summary>
    public const int WR3BSTOCKCODE1FieldNumber = 10;
    private string wR3BSTOCKCODE1_ = "";
    /// <summary>
    ///       PIC X(07).	7	X	7	0		買方  商品１   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BSTOCKCODE1 {
      get { return wR3BSTOCKCODE1_; }
      set {
        wR3BSTOCKCODE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_TR_ID_2" field.</summary>
    public const int WR3BTRID2FieldNumber = 11;
    private string wR3BTRID2_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BTRID2 {
      get { return wR3BTRID2_; }
      set {
        wR3BTRID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_COMMODITY_NAME_2" field.</summary>
    public const int WR3BCOMMODITYNAME2FieldNumber = 12;
    private string wR3BCOMMODITYNAME2_ = "";
    /// <summary>
    ///   PIC X(10).	10	X	10	0		買方  商品２                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BCOMMODITYNAME2 {
      get { return wR3BCOMMODITYNAME2_; }
      set {
        wR3BCOMMODITYNAME2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_COMMODITY_ID_2" field.</summary>
    public const int WR3BCOMMODITYID2FieldNumber = 13;
    private string wR3BCOMMODITYID2_ = "";
    /// <summary>
    ///     PIC X(7).	7	X	7	0		買方  商品２                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BCOMMODITYID2 {
      get { return wR3BCOMMODITYID2_; }
      set {
        wR3BCOMMODITYID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_SETTLEMENT_MONTH_2" field.</summary>
    public const int WR3BSETTLEMENTMONTH2FieldNumber = 14;
    private string wR3BSETTLEMENTMONTH2_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		買方  商品２           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BSETTLEMENTMONTH2 {
      get { return wR3BSETTLEMENTMONTH2_; }
      set {
        wR3BSETTLEMENTMONTH2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_STRIKE_PRICE_2" field.</summary>
    public const int WR3BSTRIKEPRICE2FieldNumber = 15;
    private string wR3BSTRIKEPRICE2_ = "";
    /// <summary>
    ///     PIC 9(6)V9(3).	9	9	6	3		買方  商品２               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BSTRIKEPRICE2 {
      get { return wR3BSTRIKEPRICE2_; }
      set {
        wR3BSTRIKEPRICE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_BUY_SELL_KIND_2" field.</summary>
    public const int WR3BBUYSELLKIND2FieldNumber = 16;
    private string wR3BBUYSELLKIND2_ = "";
    /// <summary>
    ///    PIC X(1).	1	X	1	0		買方  商品２               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BBUYSELLKIND2 {
      get { return wR3BBUYSELLKIND2_; }
      set {
        wR3BBUYSELLKIND2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_STOCK_CODE_2" field.</summary>
    public const int WR3BSTOCKCODE2FieldNumber = 17;
    private string wR3BSTOCKCODE2_ = "";
    /// <summary>
    ///       PIC X(07).	7	X	7	0		買方  商品２   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BSTOCKCODE2 {
      get { return wR3BSTOCKCODE2_; }
      set {
        wR3BSTOCKCODE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_TR_ID_1" field.</summary>
    public const int WR3STRID1FieldNumber = 18;
    private string wR3STRID1_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3STRID1 {
      get { return wR3STRID1_; }
      set {
        wR3STRID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_COMMODITY_NAME_1" field.</summary>
    public const int WR3SCOMMODITYNAME1FieldNumber = 19;
    private string wR3SCOMMODITYNAME1_ = "";
    /// <summary>
    ///   PIC X(10).	10	X	10	0		賣方  商品１                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SCOMMODITYNAME1 {
      get { return wR3SCOMMODITYNAME1_; }
      set {
        wR3SCOMMODITYNAME1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_COMMODITY_ID_1" field.</summary>
    public const int WR3SCOMMODITYID1FieldNumber = 20;
    private string wR3SCOMMODITYID1_ = "";
    /// <summary>
    ///     PIC X(7).	7	X	7	0		賣方  商品１                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SCOMMODITYID1 {
      get { return wR3SCOMMODITYID1_; }
      set {
        wR3SCOMMODITYID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_SETTLEMENT_MONTH_1" field.</summary>
    public const int WR3SSETTLEMENTMONTH1FieldNumber = 21;
    private string wR3SSETTLEMENTMONTH1_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		賣方  商品１           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SSETTLEMENTMONTH1 {
      get { return wR3SSETTLEMENTMONTH1_; }
      set {
        wR3SSETTLEMENTMONTH1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_STRIKE_PRICE_1" field.</summary>
    public const int WR3SSTRIKEPRICE1FieldNumber = 22;
    private string wR3SSTRIKEPRICE1_ = "";
    /// <summary>
    ///     PIC 9(6)V9(3).	9	9	6	3		賣方  商品１               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SSTRIKEPRICE1 {
      get { return wR3SSTRIKEPRICE1_; }
      set {
        wR3SSTRIKEPRICE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_BUY_SELL_KIND_1" field.</summary>
    public const int WR3SBUYSELLKIND1FieldNumber = 23;
    private string wR3SBUYSELLKIND1_ = "";
    /// <summary>
    ///    PIC X(1).	1	X	1	0		賣方  商品１               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SBUYSELLKIND1 {
      get { return wR3SBUYSELLKIND1_; }
      set {
        wR3SBUYSELLKIND1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_STOCK_CODE_1" field.</summary>
    public const int WR3SSTOCKCODE1FieldNumber = 24;
    private string wR3SSTOCKCODE1_ = "";
    /// <summary>
    ///       PIC X(07).	7	X	7	0		賣方  商品１   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SSTOCKCODE1 {
      get { return wR3SSTOCKCODE1_; }
      set {
        wR3SSTOCKCODE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_TR_ID_2" field.</summary>
    public const int WR3STRID2FieldNumber = 25;
    private string wR3STRID2_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3STRID2 {
      get { return wR3STRID2_; }
      set {
        wR3STRID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_COMMODITY_NAME_2" field.</summary>
    public const int WR3SCOMMODITYNAME2FieldNumber = 26;
    private string wR3SCOMMODITYNAME2_ = "";
    /// <summary>
    ///   PIC X(10).	10	X	10	0		賣方  商品２                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SCOMMODITYNAME2 {
      get { return wR3SCOMMODITYNAME2_; }
      set {
        wR3SCOMMODITYNAME2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_COMMODITY_ID_2" field.</summary>
    public const int WR3SCOMMODITYID2FieldNumber = 27;
    private string wR3SCOMMODITYID2_ = "";
    /// <summary>
    ///     PIC X(7).	7	X	7	0		賣方  商品２                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SCOMMODITYID2 {
      get { return wR3SCOMMODITYID2_; }
      set {
        wR3SCOMMODITYID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_SETTLEMENT_MONTH_2" field.</summary>
    public const int WR3SSETTLEMENTMONTH2FieldNumber = 28;
    private string wR3SSETTLEMENTMONTH2_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		賣方  商品２           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SSETTLEMENTMONTH2 {
      get { return wR3SSETTLEMENTMONTH2_; }
      set {
        wR3SSETTLEMENTMONTH2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_STRIKE_PRICE_2" field.</summary>
    public const int WR3SSTRIKEPRICE2FieldNumber = 29;
    private string wR3SSTRIKEPRICE2_ = "";
    /// <summary>
    ///     PIC 9(6)V9(3).	9	9	6	3		賣方  商品２               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SSTRIKEPRICE2 {
      get { return wR3SSTRIKEPRICE2_; }
      set {
        wR3SSTRIKEPRICE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_BUY_SELL_KIND_2" field.</summary>
    public const int WR3SBUYSELLKIND2FieldNumber = 30;
    private string wR3SBUYSELLKIND2_ = "";
    /// <summary>
    ///    PIC X(1).	1	X	1	0		賣方  商品２               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SBUYSELLKIND2 {
      get { return wR3SBUYSELLKIND2_; }
      set {
        wR3SBUYSELLKIND2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_STOCK_CODE_2" field.</summary>
    public const int WR3SSTOCKCODE2FieldNumber = 31;
    private string wR3SSTOCKCODE2_ = "";
    /// <summary>
    ///       PIC X(07).	7	X	7	0		賣方  商品２   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SSTOCKCODE2 {
      get { return wR3SSTOCKCODE2_; }
      set {
        wR3SSTOCKCODE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_NC_B_QTY" field.</summary>
    public const int WR3NCBQTYFieldNumber = 32;
    private string wR3NCBQTY_ = "";
    /// <summary>
    ///         PIC 9(14) COMP.	8	C	14	0		買方    未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3NCBQTY {
      get { return wR3NCBQTY_; }
      set {
        wR3NCBQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_NC_B_AVG_PRICE" field.</summary>
    public const int WR3NCBAVGPRICEFieldNumber = 33;
    private string wR3NCBAVGPRICE_ = "";
    /// <summary>
    ///   PIC S9(6)V9(3) COMP.	4	C	6	3		"買方  未平倉平均價(擬作廢日期未定,請改用底下小數9位的對應欄位)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3NCBAVGPRICE {
      get { return wR3NCBAVGPRICE_; }
      set {
        wR3NCBAVGPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_NC_S_QTY" field.</summary>
    public const int WR3NCSQTYFieldNumber = 34;
    private string wR3NCSQTY_ = "";
    /// <summary>
    ///         PIC 9(14) COMP.	8	C	14	0		賣方    未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3NCSQTY {
      get { return wR3NCSQTY_; }
      set {
        wR3NCSQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_NC_S_AVG_PRICE" field.</summary>
    public const int WR3NCSAVGPRICEFieldNumber = 35;
    private string wR3NCSAVGPRICE_ = "";
    /// <summary>
    ///   PIC S9(6)V9(3) COMP.	4	C	6	3		"賣方  未平倉平均價(擬作廢日期未定,請改用底下小數9位的對應欄位)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3NCSAVGPRICE {
      get { return wR3NCSAVGPRICE_; }
      set {
        wR3NCSAVGPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_ORDER_QTY" field.</summary>
    public const int WR3BORDERQTYFieldNumber = 36;
    private string wR3BORDERQTY_ = "";
    /// <summary>
    ///      PIC 9(14) COMP.	8	C	14	0		今日  買方  委託口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BORDERQTY {
      get { return wR3BORDERQTY_; }
      set {
        wR3BORDERQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_QTY" field.</summary>
    public const int WR3BQTYFieldNumber = 37;
    private string wR3BQTY_ = "";
    /// <summary>
    ///            PIC 9(14) COMP.	8	C	14	0		今日  買方  成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BQTY {
      get { return wR3BQTY_; }
      set {
        wR3BQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_AVG_PRICE" field.</summary>
    public const int WR3BAVGPRICEFieldNumber = 38;
    private string wR3BAVGPRICE_ = "";
    /// <summary>
    ///      PIC S9(06)V9(03) COMP.	4	C	6	3		"今日  買方      均價(擬作廢日期未定,請改用底下小數9位的對應欄位)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BAVGPRICE {
      get { return wR3BAVGPRICE_; }
      set {
        wR3BAVGPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_ORDER_QTY" field.</summary>
    public const int WR3SORDERQTYFieldNumber = 39;
    private string wR3SORDERQTY_ = "";
    /// <summary>
    ///      PIC 9(14) COMP.	8	C	14	0		今日  賣方  委託口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SORDERQTY {
      get { return wR3SORDERQTY_; }
      set {
        wR3SORDERQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_QTY" field.</summary>
    public const int WR3SQTYFieldNumber = 40;
    private string wR3SQTY_ = "";
    /// <summary>
    ///            PIC 9(14) COMP.	8	C	14	0		今日  賣方  成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SQTY {
      get { return wR3SQTY_; }
      set {
        wR3SQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_AVG_PRICE" field.</summary>
    public const int WR3SAVGPRICEFieldNumber = 41;
    private string wR3SAVGPRICE_ = "";
    /// <summary>
    ///      PIC S9(06)V9(03) COMP.	4	C	6	3		"今日  賣方      均價(擬作廢日期未定,請改用底下小數9位的對應欄位)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SAVGPRICE {
      get { return wR3SAVGPRICE_; }
      set {
        wR3SAVGPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_COVER_INCOME" field.</summary>
    public const int WR3COVERINCOMEFieldNumber = 42;
    private string wR3COVERINCOME_ = "";
    /// <summary>
    ///     PIC S9(14)V9(2) COMP.	8	C	14	2		今日平倉損益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3COVERINCOME {
      get { return wR3COVERINCOME_; }
      set {
        wR3COVERINCOME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_STRATEGY_CODE" field.</summary>
    public const int WR3STRATEGYCODEFieldNumber = 43;
    private string wR3STRATEGYCODE_ = "";
    /// <summary>
    ///    PIC X(5).	5	X	5	0	(本欄位為TPMS專用,沒用到的會回SPACE)	策略代號(TMPS)	FILLER	策略代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3STRATEGYCODE {
      get { return wR3STRATEGYCODE_; }
      set {
        wR3STRATEGYCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_COVER_INCOME_CURRENCY" field.</summary>
    public const int WR3COVERINCOMECURRENCYFieldNumber = 44;
    private string wR3COVERINCOMECURRENCY_ = "";
    /// <summary>
    /// PIC X(1).	1	X	1	0	請注意,不同幣別之金額需分開計算.	"N":台幣 "U"美金 "R":人民幣	平倉損益幣別	FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3COVERINCOMECURRENCY {
      get { return wR3COVERINCOMECURRENCY_; }
      set {
        wR3COVERINCOMECURRENCY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_TRA_ORDER_QTY" field.</summary>
    public const int WR3BTRAORDERQTYFieldNumber = 45;
    private string wR3BTRAORDERQTY_ = "";
    /// <summary>
    ///  PIC 9(08) COMP.	4	C	8	0		今日  買方  當沖  委託口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BTRAORDERQTY {
      get { return wR3BTRAORDERQTY_; }
      set {
        wR3BTRAORDERQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_TRA_QTY" field.</summary>
    public const int WR3BTRAQTYFieldNumber = 46;
    private string wR3BTRAQTY_ = "";
    /// <summary>
    ///        PIC 9(08) COMP.	4	C	8	0		今日  買方  當沖  成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BTRAQTY {
      get { return wR3BTRAQTY_; }
      set {
        wR3BTRAQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_TRA_NC_QTY" field.</summary>
    public const int WR3BTRANCQTYFieldNumber = 47;
    private string wR3BTRANCQTY_ = "";
    /// <summary>
    ///     PIC 9(08) COMP.	4	C	8	0		今日  買方  當沖  未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BTRANCQTY {
      get { return wR3BTRANCQTY_; }
      set {
        wR3BTRANCQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_TRA_AVG_PRICE" field.</summary>
    public const int WR3BTRAAVGPRICEFieldNumber = 48;
    private string wR3BTRAAVGPRICE_ = "";
    /// <summary>
    ///  PIC S9(06)V9(03) COMP	4	C	6	3		"今日  買方  當沖  未平倉均價(擬作廢日期未定,請改用底下小數9位的對應欄位)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BTRAAVGPRICE {
      get { return wR3BTRAAVGPRICE_; }
      set {
        wR3BTRAAVGPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_TRA_ORDER_QTY" field.</summary>
    public const int WR3STRAORDERQTYFieldNumber = 49;
    private string wR3STRAORDERQTY_ = "";
    /// <summary>
    ///  PIC 9(08) COMP.	4	C	8	0		今日  賣方  當沖  委託口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3STRAORDERQTY {
      get { return wR3STRAORDERQTY_; }
      set {
        wR3STRAORDERQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_TRA_QTY" field.</summary>
    public const int WR3STRAQTYFieldNumber = 50;
    private string wR3STRAQTY_ = "";
    /// <summary>
    ///        PIC 9(08) COMP.	4	C	8	0		今日  賣方  當沖  成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3STRAQTY {
      get { return wR3STRAQTY_; }
      set {
        wR3STRAQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_TRA_NC_QTY" field.</summary>
    public const int WR3STRANCQTYFieldNumber = 51;
    private string wR3STRANCQTY_ = "";
    /// <summary>
    ///     PIC 9(08) COMP.	4	C	8	0		今日  賣方  當沖  未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3STRANCQTY {
      get { return wR3STRANCQTY_; }
      set {
        wR3STRANCQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_TRA_AVG_PRICE" field.</summary>
    public const int WR3STRAAVGPRICEFieldNumber = 52;
    private string wR3STRAAVGPRICE_ = "";
    /// <summary>
    ///  PIC S9(06)V9(03) COMP	4	C	6	3		"今日  賣方  當沖  未平倉均價(擬作廢日期未定,請改用底下小數9位的對應欄位)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3STRAAVGPRICE {
      get { return wR3STRAAVGPRICE_; }
      set {
        wR3STRAAVGPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_TRA_INCOME" field.</summary>
    public const int WR3TRAINCOMEFieldNumber = 53;
    private string wR3TRAINCOME_ = "";
    /// <summary>
    ///       PIC S9(14)V9(2) COMP.	8	C	14	2		當沖平倉損益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3TRAINCOME {
      get { return wR3TRAINCOME_; }
      set {
        wR3TRAINCOME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_NC_B_AVG_PRICE_4" field.</summary>
    public const int WR3NCBAVGPRICE4FieldNumber = 54;
    private string wR3NCBAVGPRICE4_ = "";
    /// <summary>
    ///   PIC S9(06)V9(string ) COMP.	8	C	6	4	小數四位(後台為小數三位)	買方  未平倉平均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3NCBAVGPRICE4 {
      get { return wR3NCBAVGPRICE4_; }
      set {
        wR3NCBAVGPRICE4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_NC_S_AVG_PRICE_4" field.</summary>
    public const int WR3NCSAVGPRICE4FieldNumber = 55;
    private string wR3NCSAVGPRICE4_ = "";
    /// <summary>
    ///   PIC S9(06)V9(string ) COMP.	8	C	6	4	小數四位(後台為小數三位)	賣方  未平倉平均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3NCSAVGPRICE4 {
      get { return wR3NCSAVGPRICE4_; }
      set {
        wR3NCSAVGPRICE4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_TRA_AVG_PRICE_4" field.</summary>
    public const int WR3BTRAAVGPRICE4FieldNumber = 56;
    private string wR3BTRAAVGPRICE4_ = "";
    /// <summary>
    ///  PIC S9(06)V9(string ) COMP	8	C	6	4	小數四位(後台為小數三位)	今日  買方  當沖  未平倉均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BTRAAVGPRICE4 {
      get { return wR3BTRAAVGPRICE4_; }
      set {
        wR3BTRAAVGPRICE4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_TRA_AVG_PRICE_4" field.</summary>
    public const int WR3STRAAVGPRICE4FieldNumber = 57;
    private string wR3STRAAVGPRICE4_ = "";
    /// <summary>
    ///  PIC S9(06)V9(string ) COMP	8	C	6	4	小數四位(後台為小數三位)	今日  賣方  當沖  未平倉均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3STRAAVGPRICE4 {
      get { return wR3STRAAVGPRICE4_; }
      set {
        wR3STRAAVGPRICE4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_B_AVG_PRICE_4" field.</summary>
    public const int WR3BAVGPRICE4FieldNumber = 58;
    private string wR3BAVGPRICE4_ = "";
    /// <summary>
    ///      PIC S9(06)V9(string ) COMP.	8	C	6	4	小數四位	今日  買方      均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3BAVGPRICE4 {
      get { return wR3BAVGPRICE4_; }
      set {
        wR3BAVGPRICE4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR3_S_AVG_PRICE_4" field.</summary>
    public const int WR3SAVGPRICE4FieldNumber = 59;
    private string wR3SAVGPRICE4_ = "";
    /// <summary>
    ///      PIC S9(06)V9(string ) COMP.	8	C	6	4	小數四位	今日  賣方      均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR3SAVGPRICE4 {
      get { return wR3SAVGPRICE4_; }
      set {
        wR3SAVGPRICE4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER" field.</summary>
    public const int FILLERFieldNumber = 60;
    private string fILLER_ = "";
    /// <summary>
    ///               PIC X(52).	52	X	52	0	SPACE	FILLSER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER {
      get { return fILLER_; }
      set {
        fILLER_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemResult_TODAY_AGGREGATE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemResult_TODAY_AGGREGATE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WR3DATAFLAG1 != other.WR3DATAFLAG1) return false;
      if (WR3DATAFLAG2 != other.WR3DATAFLAG2) return false;
      if (WR3TRID != other.WR3TRID) return false;
      if (WR3BTRID1 != other.WR3BTRID1) return false;
      if (WR3BCOMMODITYNAME1 != other.WR3BCOMMODITYNAME1) return false;
      if (WR3BCOMMODITYID1 != other.WR3BCOMMODITYID1) return false;
      if (WR3BSETTLEMENTMONTH1 != other.WR3BSETTLEMENTMONTH1) return false;
      if (WR3BSTRIKEPRICE1 != other.WR3BSTRIKEPRICE1) return false;
      if (WR3BBUYSELLKIND1 != other.WR3BBUYSELLKIND1) return false;
      if (WR3BSTOCKCODE1 != other.WR3BSTOCKCODE1) return false;
      if (WR3BTRID2 != other.WR3BTRID2) return false;
      if (WR3BCOMMODITYNAME2 != other.WR3BCOMMODITYNAME2) return false;
      if (WR3BCOMMODITYID2 != other.WR3BCOMMODITYID2) return false;
      if (WR3BSETTLEMENTMONTH2 != other.WR3BSETTLEMENTMONTH2) return false;
      if (WR3BSTRIKEPRICE2 != other.WR3BSTRIKEPRICE2) return false;
      if (WR3BBUYSELLKIND2 != other.WR3BBUYSELLKIND2) return false;
      if (WR3BSTOCKCODE2 != other.WR3BSTOCKCODE2) return false;
      if (WR3STRID1 != other.WR3STRID1) return false;
      if (WR3SCOMMODITYNAME1 != other.WR3SCOMMODITYNAME1) return false;
      if (WR3SCOMMODITYID1 != other.WR3SCOMMODITYID1) return false;
      if (WR3SSETTLEMENTMONTH1 != other.WR3SSETTLEMENTMONTH1) return false;
      if (WR3SSTRIKEPRICE1 != other.WR3SSTRIKEPRICE1) return false;
      if (WR3SBUYSELLKIND1 != other.WR3SBUYSELLKIND1) return false;
      if (WR3SSTOCKCODE1 != other.WR3SSTOCKCODE1) return false;
      if (WR3STRID2 != other.WR3STRID2) return false;
      if (WR3SCOMMODITYNAME2 != other.WR3SCOMMODITYNAME2) return false;
      if (WR3SCOMMODITYID2 != other.WR3SCOMMODITYID2) return false;
      if (WR3SSETTLEMENTMONTH2 != other.WR3SSETTLEMENTMONTH2) return false;
      if (WR3SSTRIKEPRICE2 != other.WR3SSTRIKEPRICE2) return false;
      if (WR3SBUYSELLKIND2 != other.WR3SBUYSELLKIND2) return false;
      if (WR3SSTOCKCODE2 != other.WR3SSTOCKCODE2) return false;
      if (WR3NCBQTY != other.WR3NCBQTY) return false;
      if (WR3NCBAVGPRICE != other.WR3NCBAVGPRICE) return false;
      if (WR3NCSQTY != other.WR3NCSQTY) return false;
      if (WR3NCSAVGPRICE != other.WR3NCSAVGPRICE) return false;
      if (WR3BORDERQTY != other.WR3BORDERQTY) return false;
      if (WR3BQTY != other.WR3BQTY) return false;
      if (WR3BAVGPRICE != other.WR3BAVGPRICE) return false;
      if (WR3SORDERQTY != other.WR3SORDERQTY) return false;
      if (WR3SQTY != other.WR3SQTY) return false;
      if (WR3SAVGPRICE != other.WR3SAVGPRICE) return false;
      if (WR3COVERINCOME != other.WR3COVERINCOME) return false;
      if (WR3STRATEGYCODE != other.WR3STRATEGYCODE) return false;
      if (WR3COVERINCOMECURRENCY != other.WR3COVERINCOMECURRENCY) return false;
      if (WR3BTRAORDERQTY != other.WR3BTRAORDERQTY) return false;
      if (WR3BTRAQTY != other.WR3BTRAQTY) return false;
      if (WR3BTRANCQTY != other.WR3BTRANCQTY) return false;
      if (WR3BTRAAVGPRICE != other.WR3BTRAAVGPRICE) return false;
      if (WR3STRAORDERQTY != other.WR3STRAORDERQTY) return false;
      if (WR3STRAQTY != other.WR3STRAQTY) return false;
      if (WR3STRANCQTY != other.WR3STRANCQTY) return false;
      if (WR3STRAAVGPRICE != other.WR3STRAAVGPRICE) return false;
      if (WR3TRAINCOME != other.WR3TRAINCOME) return false;
      if (WR3NCBAVGPRICE4 != other.WR3NCBAVGPRICE4) return false;
      if (WR3NCSAVGPRICE4 != other.WR3NCSAVGPRICE4) return false;
      if (WR3BTRAAVGPRICE4 != other.WR3BTRAAVGPRICE4) return false;
      if (WR3STRAAVGPRICE4 != other.WR3STRAAVGPRICE4) return false;
      if (WR3BAVGPRICE4 != other.WR3BAVGPRICE4) return false;
      if (WR3SAVGPRICE4 != other.WR3SAVGPRICE4) return false;
      if (FILLER != other.FILLER) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WR3DATAFLAG1.Length != 0) hash ^= WR3DATAFLAG1.GetHashCode();
      if (WR3DATAFLAG2.Length != 0) hash ^= WR3DATAFLAG2.GetHashCode();
      if (WR3TRID.Length != 0) hash ^= WR3TRID.GetHashCode();
      if (WR3BTRID1.Length != 0) hash ^= WR3BTRID1.GetHashCode();
      if (WR3BCOMMODITYNAME1.Length != 0) hash ^= WR3BCOMMODITYNAME1.GetHashCode();
      if (WR3BCOMMODITYID1.Length != 0) hash ^= WR3BCOMMODITYID1.GetHashCode();
      if (WR3BSETTLEMENTMONTH1.Length != 0) hash ^= WR3BSETTLEMENTMONTH1.GetHashCode();
      if (WR3BSTRIKEPRICE1.Length != 0) hash ^= WR3BSTRIKEPRICE1.GetHashCode();
      if (WR3BBUYSELLKIND1.Length != 0) hash ^= WR3BBUYSELLKIND1.GetHashCode();
      if (WR3BSTOCKCODE1.Length != 0) hash ^= WR3BSTOCKCODE1.GetHashCode();
      if (WR3BTRID2.Length != 0) hash ^= WR3BTRID2.GetHashCode();
      if (WR3BCOMMODITYNAME2.Length != 0) hash ^= WR3BCOMMODITYNAME2.GetHashCode();
      if (WR3BCOMMODITYID2.Length != 0) hash ^= WR3BCOMMODITYID2.GetHashCode();
      if (WR3BSETTLEMENTMONTH2.Length != 0) hash ^= WR3BSETTLEMENTMONTH2.GetHashCode();
      if (WR3BSTRIKEPRICE2.Length != 0) hash ^= WR3BSTRIKEPRICE2.GetHashCode();
      if (WR3BBUYSELLKIND2.Length != 0) hash ^= WR3BBUYSELLKIND2.GetHashCode();
      if (WR3BSTOCKCODE2.Length != 0) hash ^= WR3BSTOCKCODE2.GetHashCode();
      if (WR3STRID1.Length != 0) hash ^= WR3STRID1.GetHashCode();
      if (WR3SCOMMODITYNAME1.Length != 0) hash ^= WR3SCOMMODITYNAME1.GetHashCode();
      if (WR3SCOMMODITYID1.Length != 0) hash ^= WR3SCOMMODITYID1.GetHashCode();
      if (WR3SSETTLEMENTMONTH1.Length != 0) hash ^= WR3SSETTLEMENTMONTH1.GetHashCode();
      if (WR3SSTRIKEPRICE1.Length != 0) hash ^= WR3SSTRIKEPRICE1.GetHashCode();
      if (WR3SBUYSELLKIND1.Length != 0) hash ^= WR3SBUYSELLKIND1.GetHashCode();
      if (WR3SSTOCKCODE1.Length != 0) hash ^= WR3SSTOCKCODE1.GetHashCode();
      if (WR3STRID2.Length != 0) hash ^= WR3STRID2.GetHashCode();
      if (WR3SCOMMODITYNAME2.Length != 0) hash ^= WR3SCOMMODITYNAME2.GetHashCode();
      if (WR3SCOMMODITYID2.Length != 0) hash ^= WR3SCOMMODITYID2.GetHashCode();
      if (WR3SSETTLEMENTMONTH2.Length != 0) hash ^= WR3SSETTLEMENTMONTH2.GetHashCode();
      if (WR3SSTRIKEPRICE2.Length != 0) hash ^= WR3SSTRIKEPRICE2.GetHashCode();
      if (WR3SBUYSELLKIND2.Length != 0) hash ^= WR3SBUYSELLKIND2.GetHashCode();
      if (WR3SSTOCKCODE2.Length != 0) hash ^= WR3SSTOCKCODE2.GetHashCode();
      if (WR3NCBQTY.Length != 0) hash ^= WR3NCBQTY.GetHashCode();
      if (WR3NCBAVGPRICE.Length != 0) hash ^= WR3NCBAVGPRICE.GetHashCode();
      if (WR3NCSQTY.Length != 0) hash ^= WR3NCSQTY.GetHashCode();
      if (WR3NCSAVGPRICE.Length != 0) hash ^= WR3NCSAVGPRICE.GetHashCode();
      if (WR3BORDERQTY.Length != 0) hash ^= WR3BORDERQTY.GetHashCode();
      if (WR3BQTY.Length != 0) hash ^= WR3BQTY.GetHashCode();
      if (WR3BAVGPRICE.Length != 0) hash ^= WR3BAVGPRICE.GetHashCode();
      if (WR3SORDERQTY.Length != 0) hash ^= WR3SORDERQTY.GetHashCode();
      if (WR3SQTY.Length != 0) hash ^= WR3SQTY.GetHashCode();
      if (WR3SAVGPRICE.Length != 0) hash ^= WR3SAVGPRICE.GetHashCode();
      if (WR3COVERINCOME.Length != 0) hash ^= WR3COVERINCOME.GetHashCode();
      if (WR3STRATEGYCODE.Length != 0) hash ^= WR3STRATEGYCODE.GetHashCode();
      if (WR3COVERINCOMECURRENCY.Length != 0) hash ^= WR3COVERINCOMECURRENCY.GetHashCode();
      if (WR3BTRAORDERQTY.Length != 0) hash ^= WR3BTRAORDERQTY.GetHashCode();
      if (WR3BTRAQTY.Length != 0) hash ^= WR3BTRAQTY.GetHashCode();
      if (WR3BTRANCQTY.Length != 0) hash ^= WR3BTRANCQTY.GetHashCode();
      if (WR3BTRAAVGPRICE.Length != 0) hash ^= WR3BTRAAVGPRICE.GetHashCode();
      if (WR3STRAORDERQTY.Length != 0) hash ^= WR3STRAORDERQTY.GetHashCode();
      if (WR3STRAQTY.Length != 0) hash ^= WR3STRAQTY.GetHashCode();
      if (WR3STRANCQTY.Length != 0) hash ^= WR3STRANCQTY.GetHashCode();
      if (WR3STRAAVGPRICE.Length != 0) hash ^= WR3STRAAVGPRICE.GetHashCode();
      if (WR3TRAINCOME.Length != 0) hash ^= WR3TRAINCOME.GetHashCode();
      if (WR3NCBAVGPRICE4.Length != 0) hash ^= WR3NCBAVGPRICE4.GetHashCode();
      if (WR3NCSAVGPRICE4.Length != 0) hash ^= WR3NCSAVGPRICE4.GetHashCode();
      if (WR3BTRAAVGPRICE4.Length != 0) hash ^= WR3BTRAAVGPRICE4.GetHashCode();
      if (WR3STRAAVGPRICE4.Length != 0) hash ^= WR3STRAAVGPRICE4.GetHashCode();
      if (WR3BAVGPRICE4.Length != 0) hash ^= WR3BAVGPRICE4.GetHashCode();
      if (WR3SAVGPRICE4.Length != 0) hash ^= WR3SAVGPRICE4.GetHashCode();
      if (FILLER.Length != 0) hash ^= FILLER.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WR3DATAFLAG1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WR3DATAFLAG1);
      }
      if (WR3DATAFLAG2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WR3DATAFLAG2);
      }
      if (WR3TRID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WR3TRID);
      }
      if (WR3BTRID1.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WR3BTRID1);
      }
      if (WR3BCOMMODITYNAME1.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WR3BCOMMODITYNAME1);
      }
      if (WR3BCOMMODITYID1.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WR3BCOMMODITYID1);
      }
      if (WR3BSETTLEMENTMONTH1.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WR3BSETTLEMENTMONTH1);
      }
      if (WR3BSTRIKEPRICE1.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WR3BSTRIKEPRICE1);
      }
      if (WR3BBUYSELLKIND1.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WR3BBUYSELLKIND1);
      }
      if (WR3BSTOCKCODE1.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WR3BSTOCKCODE1);
      }
      if (WR3BTRID2.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(WR3BTRID2);
      }
      if (WR3BCOMMODITYNAME2.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WR3BCOMMODITYNAME2);
      }
      if (WR3BCOMMODITYID2.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WR3BCOMMODITYID2);
      }
      if (WR3BSETTLEMENTMONTH2.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(WR3BSETTLEMENTMONTH2);
      }
      if (WR3BSTRIKEPRICE2.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(WR3BSTRIKEPRICE2);
      }
      if (WR3BBUYSELLKIND2.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WR3BBUYSELLKIND2);
      }
      if (WR3BSTOCKCODE2.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(WR3BSTOCKCODE2);
      }
      if (WR3STRID1.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(WR3STRID1);
      }
      if (WR3SCOMMODITYNAME1.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(WR3SCOMMODITYNAME1);
      }
      if (WR3SCOMMODITYID1.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WR3SCOMMODITYID1);
      }
      if (WR3SSETTLEMENTMONTH1.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(WR3SSETTLEMENTMONTH1);
      }
      if (WR3SSTRIKEPRICE1.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(WR3SSTRIKEPRICE1);
      }
      if (WR3SBUYSELLKIND1.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(WR3SBUYSELLKIND1);
      }
      if (WR3SSTOCKCODE1.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(WR3SSTOCKCODE1);
      }
      if (WR3STRID2.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(WR3STRID2);
      }
      if (WR3SCOMMODITYNAME2.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(WR3SCOMMODITYNAME2);
      }
      if (WR3SCOMMODITYID2.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(WR3SCOMMODITYID2);
      }
      if (WR3SSETTLEMENTMONTH2.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(WR3SSETTLEMENTMONTH2);
      }
      if (WR3SSTRIKEPRICE2.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(WR3SSTRIKEPRICE2);
      }
      if (WR3SBUYSELLKIND2.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(WR3SBUYSELLKIND2);
      }
      if (WR3SSTOCKCODE2.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(WR3SSTOCKCODE2);
      }
      if (WR3NCBQTY.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(WR3NCBQTY);
      }
      if (WR3NCBAVGPRICE.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(WR3NCBAVGPRICE);
      }
      if (WR3NCSQTY.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(WR3NCSQTY);
      }
      if (WR3NCSAVGPRICE.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(WR3NCSAVGPRICE);
      }
      if (WR3BORDERQTY.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(WR3BORDERQTY);
      }
      if (WR3BQTY.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(WR3BQTY);
      }
      if (WR3BAVGPRICE.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(WR3BAVGPRICE);
      }
      if (WR3SORDERQTY.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(WR3SORDERQTY);
      }
      if (WR3SQTY.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(WR3SQTY);
      }
      if (WR3SAVGPRICE.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(WR3SAVGPRICE);
      }
      if (WR3COVERINCOME.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(WR3COVERINCOME);
      }
      if (WR3STRATEGYCODE.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(WR3STRATEGYCODE);
      }
      if (WR3COVERINCOMECURRENCY.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(WR3COVERINCOMECURRENCY);
      }
      if (WR3BTRAORDERQTY.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(WR3BTRAORDERQTY);
      }
      if (WR3BTRAQTY.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(WR3BTRAQTY);
      }
      if (WR3BTRANCQTY.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(WR3BTRANCQTY);
      }
      if (WR3BTRAAVGPRICE.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(WR3BTRAAVGPRICE);
      }
      if (WR3STRAORDERQTY.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(WR3STRAORDERQTY);
      }
      if (WR3STRAQTY.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(WR3STRAQTY);
      }
      if (WR3STRANCQTY.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(WR3STRANCQTY);
      }
      if (WR3STRAAVGPRICE.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(WR3STRAAVGPRICE);
      }
      if (WR3TRAINCOME.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(WR3TRAINCOME);
      }
      if (WR3NCBAVGPRICE4.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(WR3NCBAVGPRICE4);
      }
      if (WR3NCSAVGPRICE4.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(WR3NCSAVGPRICE4);
      }
      if (WR3BTRAAVGPRICE4.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(WR3BTRAAVGPRICE4);
      }
      if (WR3STRAAVGPRICE4.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(WR3STRAAVGPRICE4);
      }
      if (WR3BAVGPRICE4.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(WR3BAVGPRICE4);
      }
      if (WR3SAVGPRICE4.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(WR3SAVGPRICE4);
      }
      if (FILLER.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(FILLER);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WR3DATAFLAG1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3DATAFLAG1);
      }
      if (WR3DATAFLAG2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3DATAFLAG2);
      }
      if (WR3TRID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3TRID);
      }
      if (WR3BTRID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3BTRID1);
      }
      if (WR3BCOMMODITYNAME1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3BCOMMODITYNAME1);
      }
      if (WR3BCOMMODITYID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3BCOMMODITYID1);
      }
      if (WR3BSETTLEMENTMONTH1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3BSETTLEMENTMONTH1);
      }
      if (WR3BSTRIKEPRICE1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3BSTRIKEPRICE1);
      }
      if (WR3BBUYSELLKIND1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3BBUYSELLKIND1);
      }
      if (WR3BSTOCKCODE1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3BSTOCKCODE1);
      }
      if (WR3BTRID2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3BTRID2);
      }
      if (WR3BCOMMODITYNAME2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3BCOMMODITYNAME2);
      }
      if (WR3BCOMMODITYID2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3BCOMMODITYID2);
      }
      if (WR3BSETTLEMENTMONTH2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3BSETTLEMENTMONTH2);
      }
      if (WR3BSTRIKEPRICE2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR3BSTRIKEPRICE2);
      }
      if (WR3BBUYSELLKIND2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3BBUYSELLKIND2);
      }
      if (WR3BSTOCKCODE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3BSTOCKCODE2);
      }
      if (WR3STRID1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3STRID1);
      }
      if (WR3SCOMMODITYNAME1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SCOMMODITYNAME1);
      }
      if (WR3SCOMMODITYID1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SCOMMODITYID1);
      }
      if (WR3SSETTLEMENTMONTH1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SSETTLEMENTMONTH1);
      }
      if (WR3SSTRIKEPRICE1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SSTRIKEPRICE1);
      }
      if (WR3SBUYSELLKIND1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SBUYSELLKIND1);
      }
      if (WR3SSTOCKCODE1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SSTOCKCODE1);
      }
      if (WR3STRID2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3STRID2);
      }
      if (WR3SCOMMODITYNAME2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SCOMMODITYNAME2);
      }
      if (WR3SCOMMODITYID2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SCOMMODITYID2);
      }
      if (WR3SSETTLEMENTMONTH2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SSETTLEMENTMONTH2);
      }
      if (WR3SSTRIKEPRICE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SSTRIKEPRICE2);
      }
      if (WR3SBUYSELLKIND2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SBUYSELLKIND2);
      }
      if (WR3SSTOCKCODE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SSTOCKCODE2);
      }
      if (WR3NCBQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3NCBQTY);
      }
      if (WR3NCBAVGPRICE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3NCBAVGPRICE);
      }
      if (WR3NCSQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3NCSQTY);
      }
      if (WR3NCSAVGPRICE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3NCSAVGPRICE);
      }
      if (WR3BORDERQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3BORDERQTY);
      }
      if (WR3BQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3BQTY);
      }
      if (WR3BAVGPRICE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3BAVGPRICE);
      }
      if (WR3SORDERQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SORDERQTY);
      }
      if (WR3SQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SQTY);
      }
      if (WR3SAVGPRICE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SAVGPRICE);
      }
      if (WR3COVERINCOME.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3COVERINCOME);
      }
      if (WR3STRATEGYCODE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3STRATEGYCODE);
      }
      if (WR3COVERINCOMECURRENCY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3COVERINCOMECURRENCY);
      }
      if (WR3BTRAORDERQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3BTRAORDERQTY);
      }
      if (WR3BTRAQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3BTRAQTY);
      }
      if (WR3BTRANCQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3BTRANCQTY);
      }
      if (WR3BTRAAVGPRICE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3BTRAAVGPRICE);
      }
      if (WR3STRAORDERQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3STRAORDERQTY);
      }
      if (WR3STRAQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3STRAQTY);
      }
      if (WR3STRANCQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3STRANCQTY);
      }
      if (WR3STRAAVGPRICE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3STRAAVGPRICE);
      }
      if (WR3TRAINCOME.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3TRAINCOME);
      }
      if (WR3NCBAVGPRICE4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3NCBAVGPRICE4);
      }
      if (WR3NCSAVGPRICE4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3NCSAVGPRICE4);
      }
      if (WR3BTRAAVGPRICE4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3BTRAAVGPRICE4);
      }
      if (WR3STRAAVGPRICE4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3STRAAVGPRICE4);
      }
      if (WR3BAVGPRICE4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3BAVGPRICE4);
      }
      if (WR3SAVGPRICE4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR3SAVGPRICE4);
      }
      if (FILLER.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemResult_TODAY_AGGREGATE other) {
      if (other == null) {
        return;
      }
      if (other.WR3DATAFLAG1.Length != 0) {
        WR3DATAFLAG1 = other.WR3DATAFLAG1;
      }
      if (other.WR3DATAFLAG2.Length != 0) {
        WR3DATAFLAG2 = other.WR3DATAFLAG2;
      }
      if (other.WR3TRID.Length != 0) {
        WR3TRID = other.WR3TRID;
      }
      if (other.WR3BTRID1.Length != 0) {
        WR3BTRID1 = other.WR3BTRID1;
      }
      if (other.WR3BCOMMODITYNAME1.Length != 0) {
        WR3BCOMMODITYNAME1 = other.WR3BCOMMODITYNAME1;
      }
      if (other.WR3BCOMMODITYID1.Length != 0) {
        WR3BCOMMODITYID1 = other.WR3BCOMMODITYID1;
      }
      if (other.WR3BSETTLEMENTMONTH1.Length != 0) {
        WR3BSETTLEMENTMONTH1 = other.WR3BSETTLEMENTMONTH1;
      }
      if (other.WR3BSTRIKEPRICE1.Length != 0) {
        WR3BSTRIKEPRICE1 = other.WR3BSTRIKEPRICE1;
      }
      if (other.WR3BBUYSELLKIND1.Length != 0) {
        WR3BBUYSELLKIND1 = other.WR3BBUYSELLKIND1;
      }
      if (other.WR3BSTOCKCODE1.Length != 0) {
        WR3BSTOCKCODE1 = other.WR3BSTOCKCODE1;
      }
      if (other.WR3BTRID2.Length != 0) {
        WR3BTRID2 = other.WR3BTRID2;
      }
      if (other.WR3BCOMMODITYNAME2.Length != 0) {
        WR3BCOMMODITYNAME2 = other.WR3BCOMMODITYNAME2;
      }
      if (other.WR3BCOMMODITYID2.Length != 0) {
        WR3BCOMMODITYID2 = other.WR3BCOMMODITYID2;
      }
      if (other.WR3BSETTLEMENTMONTH2.Length != 0) {
        WR3BSETTLEMENTMONTH2 = other.WR3BSETTLEMENTMONTH2;
      }
      if (other.WR3BSTRIKEPRICE2.Length != 0) {
        WR3BSTRIKEPRICE2 = other.WR3BSTRIKEPRICE2;
      }
      if (other.WR3BBUYSELLKIND2.Length != 0) {
        WR3BBUYSELLKIND2 = other.WR3BBUYSELLKIND2;
      }
      if (other.WR3BSTOCKCODE2.Length != 0) {
        WR3BSTOCKCODE2 = other.WR3BSTOCKCODE2;
      }
      if (other.WR3STRID1.Length != 0) {
        WR3STRID1 = other.WR3STRID1;
      }
      if (other.WR3SCOMMODITYNAME1.Length != 0) {
        WR3SCOMMODITYNAME1 = other.WR3SCOMMODITYNAME1;
      }
      if (other.WR3SCOMMODITYID1.Length != 0) {
        WR3SCOMMODITYID1 = other.WR3SCOMMODITYID1;
      }
      if (other.WR3SSETTLEMENTMONTH1.Length != 0) {
        WR3SSETTLEMENTMONTH1 = other.WR3SSETTLEMENTMONTH1;
      }
      if (other.WR3SSTRIKEPRICE1.Length != 0) {
        WR3SSTRIKEPRICE1 = other.WR3SSTRIKEPRICE1;
      }
      if (other.WR3SBUYSELLKIND1.Length != 0) {
        WR3SBUYSELLKIND1 = other.WR3SBUYSELLKIND1;
      }
      if (other.WR3SSTOCKCODE1.Length != 0) {
        WR3SSTOCKCODE1 = other.WR3SSTOCKCODE1;
      }
      if (other.WR3STRID2.Length != 0) {
        WR3STRID2 = other.WR3STRID2;
      }
      if (other.WR3SCOMMODITYNAME2.Length != 0) {
        WR3SCOMMODITYNAME2 = other.WR3SCOMMODITYNAME2;
      }
      if (other.WR3SCOMMODITYID2.Length != 0) {
        WR3SCOMMODITYID2 = other.WR3SCOMMODITYID2;
      }
      if (other.WR3SSETTLEMENTMONTH2.Length != 0) {
        WR3SSETTLEMENTMONTH2 = other.WR3SSETTLEMENTMONTH2;
      }
      if (other.WR3SSTRIKEPRICE2.Length != 0) {
        WR3SSTRIKEPRICE2 = other.WR3SSTRIKEPRICE2;
      }
      if (other.WR3SBUYSELLKIND2.Length != 0) {
        WR3SBUYSELLKIND2 = other.WR3SBUYSELLKIND2;
      }
      if (other.WR3SSTOCKCODE2.Length != 0) {
        WR3SSTOCKCODE2 = other.WR3SSTOCKCODE2;
      }
      if (other.WR3NCBQTY.Length != 0) {
        WR3NCBQTY = other.WR3NCBQTY;
      }
      if (other.WR3NCBAVGPRICE.Length != 0) {
        WR3NCBAVGPRICE = other.WR3NCBAVGPRICE;
      }
      if (other.WR3NCSQTY.Length != 0) {
        WR3NCSQTY = other.WR3NCSQTY;
      }
      if (other.WR3NCSAVGPRICE.Length != 0) {
        WR3NCSAVGPRICE = other.WR3NCSAVGPRICE;
      }
      if (other.WR3BORDERQTY.Length != 0) {
        WR3BORDERQTY = other.WR3BORDERQTY;
      }
      if (other.WR3BQTY.Length != 0) {
        WR3BQTY = other.WR3BQTY;
      }
      if (other.WR3BAVGPRICE.Length != 0) {
        WR3BAVGPRICE = other.WR3BAVGPRICE;
      }
      if (other.WR3SORDERQTY.Length != 0) {
        WR3SORDERQTY = other.WR3SORDERQTY;
      }
      if (other.WR3SQTY.Length != 0) {
        WR3SQTY = other.WR3SQTY;
      }
      if (other.WR3SAVGPRICE.Length != 0) {
        WR3SAVGPRICE = other.WR3SAVGPRICE;
      }
      if (other.WR3COVERINCOME.Length != 0) {
        WR3COVERINCOME = other.WR3COVERINCOME;
      }
      if (other.WR3STRATEGYCODE.Length != 0) {
        WR3STRATEGYCODE = other.WR3STRATEGYCODE;
      }
      if (other.WR3COVERINCOMECURRENCY.Length != 0) {
        WR3COVERINCOMECURRENCY = other.WR3COVERINCOMECURRENCY;
      }
      if (other.WR3BTRAORDERQTY.Length != 0) {
        WR3BTRAORDERQTY = other.WR3BTRAORDERQTY;
      }
      if (other.WR3BTRAQTY.Length != 0) {
        WR3BTRAQTY = other.WR3BTRAQTY;
      }
      if (other.WR3BTRANCQTY.Length != 0) {
        WR3BTRANCQTY = other.WR3BTRANCQTY;
      }
      if (other.WR3BTRAAVGPRICE.Length != 0) {
        WR3BTRAAVGPRICE = other.WR3BTRAAVGPRICE;
      }
      if (other.WR3STRAORDERQTY.Length != 0) {
        WR3STRAORDERQTY = other.WR3STRAORDERQTY;
      }
      if (other.WR3STRAQTY.Length != 0) {
        WR3STRAQTY = other.WR3STRAQTY;
      }
      if (other.WR3STRANCQTY.Length != 0) {
        WR3STRANCQTY = other.WR3STRANCQTY;
      }
      if (other.WR3STRAAVGPRICE.Length != 0) {
        WR3STRAAVGPRICE = other.WR3STRAAVGPRICE;
      }
      if (other.WR3TRAINCOME.Length != 0) {
        WR3TRAINCOME = other.WR3TRAINCOME;
      }
      if (other.WR3NCBAVGPRICE4.Length != 0) {
        WR3NCBAVGPRICE4 = other.WR3NCBAVGPRICE4;
      }
      if (other.WR3NCSAVGPRICE4.Length != 0) {
        WR3NCSAVGPRICE4 = other.WR3NCSAVGPRICE4;
      }
      if (other.WR3BTRAAVGPRICE4.Length != 0) {
        WR3BTRAAVGPRICE4 = other.WR3BTRAAVGPRICE4;
      }
      if (other.WR3STRAAVGPRICE4.Length != 0) {
        WR3STRAAVGPRICE4 = other.WR3STRAAVGPRICE4;
      }
      if (other.WR3BAVGPRICE4.Length != 0) {
        WR3BAVGPRICE4 = other.WR3BAVGPRICE4;
      }
      if (other.WR3SAVGPRICE4.Length != 0) {
        WR3SAVGPRICE4 = other.WR3SAVGPRICE4;
      }
      if (other.FILLER.Length != 0) {
        FILLER = other.FILLER;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WR3DATAFLAG1 = input.ReadString();
            break;
          }
          case 18: {
            WR3DATAFLAG2 = input.ReadString();
            break;
          }
          case 26: {
            WR3TRID = input.ReadString();
            break;
          }
          case 34: {
            WR3BTRID1 = input.ReadString();
            break;
          }
          case 42: {
            WR3BCOMMODITYNAME1 = input.ReadString();
            break;
          }
          case 50: {
            WR3BCOMMODITYID1 = input.ReadString();
            break;
          }
          case 58: {
            WR3BSETTLEMENTMONTH1 = input.ReadString();
            break;
          }
          case 66: {
            WR3BSTRIKEPRICE1 = input.ReadString();
            break;
          }
          case 74: {
            WR3BBUYSELLKIND1 = input.ReadString();
            break;
          }
          case 82: {
            WR3BSTOCKCODE1 = input.ReadString();
            break;
          }
          case 90: {
            WR3BTRID2 = input.ReadString();
            break;
          }
          case 98: {
            WR3BCOMMODITYNAME2 = input.ReadString();
            break;
          }
          case 106: {
            WR3BCOMMODITYID2 = input.ReadString();
            break;
          }
          case 114: {
            WR3BSETTLEMENTMONTH2 = input.ReadString();
            break;
          }
          case 122: {
            WR3BSTRIKEPRICE2 = input.ReadString();
            break;
          }
          case 130: {
            WR3BBUYSELLKIND2 = input.ReadString();
            break;
          }
          case 138: {
            WR3BSTOCKCODE2 = input.ReadString();
            break;
          }
          case 146: {
            WR3STRID1 = input.ReadString();
            break;
          }
          case 154: {
            WR3SCOMMODITYNAME1 = input.ReadString();
            break;
          }
          case 162: {
            WR3SCOMMODITYID1 = input.ReadString();
            break;
          }
          case 170: {
            WR3SSETTLEMENTMONTH1 = input.ReadString();
            break;
          }
          case 178: {
            WR3SSTRIKEPRICE1 = input.ReadString();
            break;
          }
          case 186: {
            WR3SBUYSELLKIND1 = input.ReadString();
            break;
          }
          case 194: {
            WR3SSTOCKCODE1 = input.ReadString();
            break;
          }
          case 202: {
            WR3STRID2 = input.ReadString();
            break;
          }
          case 210: {
            WR3SCOMMODITYNAME2 = input.ReadString();
            break;
          }
          case 218: {
            WR3SCOMMODITYID2 = input.ReadString();
            break;
          }
          case 226: {
            WR3SSETTLEMENTMONTH2 = input.ReadString();
            break;
          }
          case 234: {
            WR3SSTRIKEPRICE2 = input.ReadString();
            break;
          }
          case 242: {
            WR3SBUYSELLKIND2 = input.ReadString();
            break;
          }
          case 250: {
            WR3SSTOCKCODE2 = input.ReadString();
            break;
          }
          case 258: {
            WR3NCBQTY = input.ReadString();
            break;
          }
          case 266: {
            WR3NCBAVGPRICE = input.ReadString();
            break;
          }
          case 274: {
            WR3NCSQTY = input.ReadString();
            break;
          }
          case 282: {
            WR3NCSAVGPRICE = input.ReadString();
            break;
          }
          case 290: {
            WR3BORDERQTY = input.ReadString();
            break;
          }
          case 298: {
            WR3BQTY = input.ReadString();
            break;
          }
          case 306: {
            WR3BAVGPRICE = input.ReadString();
            break;
          }
          case 314: {
            WR3SORDERQTY = input.ReadString();
            break;
          }
          case 322: {
            WR3SQTY = input.ReadString();
            break;
          }
          case 330: {
            WR3SAVGPRICE = input.ReadString();
            break;
          }
          case 338: {
            WR3COVERINCOME = input.ReadString();
            break;
          }
          case 346: {
            WR3STRATEGYCODE = input.ReadString();
            break;
          }
          case 354: {
            WR3COVERINCOMECURRENCY = input.ReadString();
            break;
          }
          case 362: {
            WR3BTRAORDERQTY = input.ReadString();
            break;
          }
          case 370: {
            WR3BTRAQTY = input.ReadString();
            break;
          }
          case 378: {
            WR3BTRANCQTY = input.ReadString();
            break;
          }
          case 386: {
            WR3BTRAAVGPRICE = input.ReadString();
            break;
          }
          case 394: {
            WR3STRAORDERQTY = input.ReadString();
            break;
          }
          case 402: {
            WR3STRAQTY = input.ReadString();
            break;
          }
          case 410: {
            WR3STRANCQTY = input.ReadString();
            break;
          }
          case 418: {
            WR3STRAAVGPRICE = input.ReadString();
            break;
          }
          case 426: {
            WR3TRAINCOME = input.ReadString();
            break;
          }
          case 434: {
            WR3NCBAVGPRICE4 = input.ReadString();
            break;
          }
          case 442: {
            WR3NCSAVGPRICE4 = input.ReadString();
            break;
          }
          case 450: {
            WR3BTRAAVGPRICE4 = input.ReadString();
            break;
          }
          case 458: {
            WR3STRAAVGPRICE4 = input.ReadString();
            break;
          }
          case 466: {
            WR3BAVGPRICE4 = input.ReadString();
            break;
          }
          case 474: {
            WR3SAVGPRICE4 = input.ReadString();
            break;
          }
          case 482: {
            FILLER = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///    => 4 今明細 (WR_READ_DATA) 明細格式如下 : (400 bytes)
  /// </summary>
  public sealed partial class TandemResult_TODAY_DETAIL : pb::IMessage<TandemResult_TODAY_DETAIL> {
    private static readonly pb::MessageParser<TandemResult_TODAY_DETAIL> _parser = new pb::MessageParser<TandemResult_TODAY_DETAIL>(() => new TandemResult_TODAY_DETAIL());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemResult_TODAY_DETAIL> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_TODAY_DETAIL() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_TODAY_DETAIL(TandemResult_TODAY_DETAIL other) : this() {
      wR4DATAFLAG1_ = other.wR4DATAFLAG1_;
      wR4DATAFLAG2_ = other.wR4DATAFLAG2_;
      wR4MATCHDATE_ = other.wR4MATCHDATE_;
      wR4TRID1_ = other.wR4TRID1_;
      wR4COMMODITYNAME1_ = other.wR4COMMODITYNAME1_;
      wR4COMMODITYID1_ = other.wR4COMMODITYID1_;
      wR4SETTLEMENTMONTH1_ = other.wR4SETTLEMENTMONTH1_;
      wR4STRIKEPRICE1_ = other.wR4STRIKEPRICE1_;
      wR4BUYSELLKIND1_ = other.wR4BUYSELLKIND1_;
      wR4STOCKCODE1_ = other.wR4STOCKCODE1_;
      wR4MATCHQTY_ = other.wR4MATCHQTY_;
      wR4NONCOVERQTY_ = other.wR4NONCOVERQTY_;
      wR4MATCHPRICE_ = other.wR4MATCHPRICE_;
      wR4NOWPRICE_ = other.wR4NOWPRICE_;
      wR4VARINCOME_ = other.wR4VARINCOME_;
      wR4ORDERNOF_ = other.wR4ORDERNOF_;
      wR4ORDERNOL_ = other.wR4ORDERNOL_;
      wR4SPOKIND_ = other.wR4SPOKIND_;
      wR4STRATEGYCODE_ = other.wR4STRATEGYCODE_;
      wR4VARINCOMECURRENCY_ = other.wR4VARINCOMECURRENCY_;
      wR4DAYTRADEID_ = other.wR4DAYTRADEID_;
      fILLER1_ = other.fILLER1_;
      wR4MATCHPRICE9_ = other.wR4MATCHPRICE9_;
      wR4NOWPRICE9_ = other.wR4NOWPRICE9_;
      fILLER2_ = other.fILLER2_;
      fILLER3_ = other.fILLER3_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_TODAY_DETAIL Clone() {
      return new TandemResult_TODAY_DETAIL(this);
    }

    /// <summary>Field number for the "WR4_DATA_FLAG_1" field.</summary>
    public const int WR4DATAFLAG1FieldNumber = 1;
    private string wR4DATAFLAG1_ = "";
    /// <summary>
    ///             PIC X(1).	1	X	1	0	4:    今明細	資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4DATAFLAG1 {
      get { return wR4DATAFLAG1_; }
      set {
        wR4DATAFLAG1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_DATA_FLAG_2" field.</summary>
    public const int WR4DATAFLAG2FieldNumber = 2;
    private string wR4DATAFLAG2_ = "";
    /// <summary>
    ///             PIC X(1).	1	X	1	0	     1:首筆 	子資料類別		2:同一商品或委託的第二筆(包含)及其以後的資料資料內容.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4DATAFLAG2 {
      get { return wR4DATAFLAG2_; }
      set {
        wR4DATAFLAG2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_MATCH_DATE" field.</summary>
    public const int WR4MATCHDATEFieldNumber = 3;
    private string wR4MATCHDATE_ = "";
    /// <summary>
    ///       PIC X(08).	8	X	8	0	YYYYMMDD 或 "競價中"	成交日期YYYYMMDD/ "競價中"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4MATCHDATE {
      get { return wR4MATCHDATE_; }
      set {
        wR4MATCHDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_TR_ID_1" field.</summary>
    public const int WR4TRID1FieldNumber = 4;
    private string wR4TRID1_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4TRID1 {
      get { return wR4TRID1_; }
      set {
        wR4TRID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_COMMODITY_NAME_1" field.</summary>
    public const int WR4COMMODITYNAME1FieldNumber = 5;
    private string wR4COMMODITYNAME1_ = "";
    /// <summary>
    ///   PIC X(10).	10	X	10	0		商品１簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4COMMODITYNAME1 {
      get { return wR4COMMODITYNAME1_; }
      set {
        wR4COMMODITYNAME1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_COMMODITY_ID_1" field.</summary>
    public const int WR4COMMODITYID1FieldNumber = 6;
    private string wR4COMMODITYID1_ = "";
    /// <summary>
    ///     PIC X(7).	7	X	7	0		商品１代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4COMMODITYID1 {
      get { return wR4COMMODITYID1_; }
      set {
        wR4COMMODITYID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_SETTLEMENT_MONTH_1" field.</summary>
    public const int WR4SETTLEMENTMONTH1FieldNumber = 7;
    private string wR4SETTLEMENTMONTH1_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		商品１年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4SETTLEMENTMONTH1 {
      get { return wR4SETTLEMENTMONTH1_; }
      set {
        wR4SETTLEMENTMONTH1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_STRIKE_PRICE_1" field.</summary>
    public const int WR4STRIKEPRICE1FieldNumber = 8;
    private string wR4STRIKEPRICE1_ = "";
    /// <summary>
    ///     PIC 9(6)V9(3).	9	9	6	3		商品１履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4STRIKEPRICE1 {
      get { return wR4STRIKEPRICE1_; }
      set {
        wR4STRIKEPRICE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_BUY_SELL_KIND_1" field.</summary>
    public const int WR4BUYSELLKIND1FieldNumber = 9;
    private string wR4BUYSELLKIND1_ = "";
    /// <summary>
    ///    PIC X(1).	1	X	1	0		商品１買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4BUYSELLKIND1 {
      get { return wR4BUYSELLKIND1_; }
      set {
        wR4BUYSELLKIND1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_STOCK_CODE_1" field.</summary>
    public const int WR4STOCKCODE1FieldNumber = 10;
    private string wR4STOCKCODE1_ = "";
    /// <summary>
    ///       PIC X(07).	7	X	7	0		商品１個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4STOCKCODE1 {
      get { return wR4STOCKCODE1_; }
      set {
        wR4STOCKCODE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_MATCH_QTY" field.</summary>
    public const int WR4MATCHQTYFieldNumber = 11;
    private string wR4MATCHQTY_ = "";
    /// <summary>
    ///        PIC 9(14) COMP.	8	C	14	0		成交口數/委託口數		if WR2_match_date 為 YYMMDD成交日 ,此欄為成交口數if WR2_match_date 為 "競價中"     ,此欄為委託口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4MATCHQTY {
      get { return wR4MATCHQTY_; }
      set {
        wR4MATCHQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_NON_COVER_QTY" field.</summary>
    public const int WR4NONCOVERQTYFieldNumber = 12;
    private string wR4NONCOVERQTY_ = "";
    /// <summary>
    ///    PIC 9(14) COMP.	8	C	14	0		未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4NONCOVERQTY {
      get { return wR4NONCOVERQTY_; }
      set {
        wR4NONCOVERQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_MATCH_PRICE" field.</summary>
    public const int WR4MATCHPRICEFieldNumber = 13;
    private string wR4MATCHPRICE_ = "";
    /// <summary>
    ///      PIC S9(6)V9(3) COMP.	4	C	6	3		"成交價格/委託價格(擬作廢日期未定,請改用底下小數9位的對應欄位)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4MATCHPRICE {
      get { return wR4MATCHPRICE_; }
      set {
        wR4MATCHPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_NOW_PRICE" field.</summary>
    public const int WR4NOWPRICEFieldNumber = 14;
    private string wR4NOWPRICE_ = "";
    /// <summary>
    ///        PIC S9(6)V9(3) COMP.	4	C	6	3		"現(貨)價(擬作廢日期未定,請改用底下小數9位的對應欄位)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4NOWPRICE {
      get { return wR4NOWPRICE_; }
      set {
        wR4NOWPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_VAR_INCOME" field.</summary>
    public const int WR4VARINCOMEFieldNumber = 15;
    private string wR4VARINCOME_ = "";
    /// <summary>
    ///       PIC S9(14)V9(2) COMP.	8	C	14	2		預估損益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4VARINCOME {
      get { return wR4VARINCOME_; }
      set {
        wR4VARINCOME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_ORDER_NO_F" field.</summary>
    public const int WR4ORDERNOFFieldNumber = 16;
    private string wR4ORDERNOF_ = "";
    /// <summary>
    ///       PIC X(02).	2	X	2	0		委託書編號頭兩碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4ORDERNOF {
      get { return wR4ORDERNOF_; }
      set {
        wR4ORDERNOF_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_ORDER_NO_L" field.</summary>
    public const int WR4ORDERNOLFieldNumber = 17;
    private string wR4ORDERNOL_ = "";
    /// <summary>
    ///       PIC X(03).	3	X	3	0		委託書編號流水號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4ORDERNOL {
      get { return wR4ORDERNOL_; }
      set {
        wR4ORDERNOL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_SPO_KIND" field.</summary>
    public const int WR4SPOKINDFieldNumber = 18;
    private string wR4SPOKIND_ = "";
    /// <summary>
    ///         PIC X(3).	3	X	3	0		特殊單(DONOT CARE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4SPOKIND {
      get { return wR4SPOKIND_; }
      set {
        wR4SPOKIND_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_STRATEGY_CODE" field.</summary>
    public const int WR4STRATEGYCODEFieldNumber = 19;
    private string wR4STRATEGYCODE_ = "";
    /// <summary>
    ///    PIC X(5).	5	X	5	0	(本欄位為TPMS專用,沒用到的會回SPACE)	策略代號(TMPS)	FILLER	策略代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4STRATEGYCODE {
      get { return wR4STRATEGYCODE_; }
      set {
        wR4STRATEGYCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_VAR_INCOME_CURRENCY" field.</summary>
    public const int WR4VARINCOMECURRENCYFieldNumber = 20;
    private string wR4VARINCOMECURRENCY_ = "";
    /// <summary>
    /// PIC X(1).	1	X	1	0	請注意,不同幣別之金額需分開計算.	"N":台幣 "U"美金 "R":人民幣	預估損益幣別	預估損益幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4VARINCOMECURRENCY {
      get { return wR4VARINCOMECURRENCY_; }
      set {
        wR4VARINCOMECURRENCY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_DAY_TRADE_ID" field.</summary>
    public const int WR4DAYTRADEIDFieldNumber = 21;
    private string wR4DAYTRADEID_ = "";
    /// <summary>
    ///     PIC X(01).	1	X	1	0	Y : 當日沖銷	當沖記號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4DAYTRADEID {
      get { return wR4DAYTRADEID_; }
      set {
        wR4DAYTRADEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER1" field.</summary>
    public const int FILLER1FieldNumber = 22;
    private string fILLER1_ = "";
    /// <summary>
    ///               PIC X(01).	1	X	1	0	SPACE	FILLSER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER1 {
      get { return fILLER1_; }
      set {
        fILLER1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_MATCH_PRICE_9" field.</summary>
    public const int WR4MATCHPRICE9FieldNumber = 23;
    private string wR4MATCHPRICE9_ = "";
    /// <summary>
    ///    PIC S9(9)V9(9) COMP.	8	C	9	9		成交價格/委託價格(小數9位)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4MATCHPRICE9 {
      get { return wR4MATCHPRICE9_; }
      set {
        wR4MATCHPRICE9_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR4_NOW_PRICE_9" field.</summary>
    public const int WR4NOWPRICE9FieldNumber = 24;
    private string wR4NOWPRICE9_ = "";
    /// <summary>
    ///      PIC S9(9)V9(9) COMP.	8	C	9	9		現(貨)價(小數9位)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR4NOWPRICE9 {
      get { return wR4NOWPRICE9_; }
      set {
        wR4NOWPRICE9_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER2" field.</summary>
    public const int FILLER2FieldNumber = 25;
    private string fILLER2_ = "";
    /// <summary>
    ///               PIC X(100).	100	X	100	0	SPACE	FILLSER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER2 {
      get { return fILLER2_; }
      set {
        fILLER2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER3" field.</summary>
    public const int FILLER3FieldNumber = 26;
    private string fILLER3_ = "";
    /// <summary>
    ///               PIC X(186).	186	X	186	0	X(203)=>X(186) SPACE	FILLSER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER3 {
      get { return fILLER3_; }
      set {
        fILLER3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemResult_TODAY_DETAIL);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemResult_TODAY_DETAIL other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WR4DATAFLAG1 != other.WR4DATAFLAG1) return false;
      if (WR4DATAFLAG2 != other.WR4DATAFLAG2) return false;
      if (WR4MATCHDATE != other.WR4MATCHDATE) return false;
      if (WR4TRID1 != other.WR4TRID1) return false;
      if (WR4COMMODITYNAME1 != other.WR4COMMODITYNAME1) return false;
      if (WR4COMMODITYID1 != other.WR4COMMODITYID1) return false;
      if (WR4SETTLEMENTMONTH1 != other.WR4SETTLEMENTMONTH1) return false;
      if (WR4STRIKEPRICE1 != other.WR4STRIKEPRICE1) return false;
      if (WR4BUYSELLKIND1 != other.WR4BUYSELLKIND1) return false;
      if (WR4STOCKCODE1 != other.WR4STOCKCODE1) return false;
      if (WR4MATCHQTY != other.WR4MATCHQTY) return false;
      if (WR4NONCOVERQTY != other.WR4NONCOVERQTY) return false;
      if (WR4MATCHPRICE != other.WR4MATCHPRICE) return false;
      if (WR4NOWPRICE != other.WR4NOWPRICE) return false;
      if (WR4VARINCOME != other.WR4VARINCOME) return false;
      if (WR4ORDERNOF != other.WR4ORDERNOF) return false;
      if (WR4ORDERNOL != other.WR4ORDERNOL) return false;
      if (WR4SPOKIND != other.WR4SPOKIND) return false;
      if (WR4STRATEGYCODE != other.WR4STRATEGYCODE) return false;
      if (WR4VARINCOMECURRENCY != other.WR4VARINCOMECURRENCY) return false;
      if (WR4DAYTRADEID != other.WR4DAYTRADEID) return false;
      if (FILLER1 != other.FILLER1) return false;
      if (WR4MATCHPRICE9 != other.WR4MATCHPRICE9) return false;
      if (WR4NOWPRICE9 != other.WR4NOWPRICE9) return false;
      if (FILLER2 != other.FILLER2) return false;
      if (FILLER3 != other.FILLER3) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WR4DATAFLAG1.Length != 0) hash ^= WR4DATAFLAG1.GetHashCode();
      if (WR4DATAFLAG2.Length != 0) hash ^= WR4DATAFLAG2.GetHashCode();
      if (WR4MATCHDATE.Length != 0) hash ^= WR4MATCHDATE.GetHashCode();
      if (WR4TRID1.Length != 0) hash ^= WR4TRID1.GetHashCode();
      if (WR4COMMODITYNAME1.Length != 0) hash ^= WR4COMMODITYNAME1.GetHashCode();
      if (WR4COMMODITYID1.Length != 0) hash ^= WR4COMMODITYID1.GetHashCode();
      if (WR4SETTLEMENTMONTH1.Length != 0) hash ^= WR4SETTLEMENTMONTH1.GetHashCode();
      if (WR4STRIKEPRICE1.Length != 0) hash ^= WR4STRIKEPRICE1.GetHashCode();
      if (WR4BUYSELLKIND1.Length != 0) hash ^= WR4BUYSELLKIND1.GetHashCode();
      if (WR4STOCKCODE1.Length != 0) hash ^= WR4STOCKCODE1.GetHashCode();
      if (WR4MATCHQTY.Length != 0) hash ^= WR4MATCHQTY.GetHashCode();
      if (WR4NONCOVERQTY.Length != 0) hash ^= WR4NONCOVERQTY.GetHashCode();
      if (WR4MATCHPRICE.Length != 0) hash ^= WR4MATCHPRICE.GetHashCode();
      if (WR4NOWPRICE.Length != 0) hash ^= WR4NOWPRICE.GetHashCode();
      if (WR4VARINCOME.Length != 0) hash ^= WR4VARINCOME.GetHashCode();
      if (WR4ORDERNOF.Length != 0) hash ^= WR4ORDERNOF.GetHashCode();
      if (WR4ORDERNOL.Length != 0) hash ^= WR4ORDERNOL.GetHashCode();
      if (WR4SPOKIND.Length != 0) hash ^= WR4SPOKIND.GetHashCode();
      if (WR4STRATEGYCODE.Length != 0) hash ^= WR4STRATEGYCODE.GetHashCode();
      if (WR4VARINCOMECURRENCY.Length != 0) hash ^= WR4VARINCOMECURRENCY.GetHashCode();
      if (WR4DAYTRADEID.Length != 0) hash ^= WR4DAYTRADEID.GetHashCode();
      if (FILLER1.Length != 0) hash ^= FILLER1.GetHashCode();
      if (WR4MATCHPRICE9.Length != 0) hash ^= WR4MATCHPRICE9.GetHashCode();
      if (WR4NOWPRICE9.Length != 0) hash ^= WR4NOWPRICE9.GetHashCode();
      if (FILLER2.Length != 0) hash ^= FILLER2.GetHashCode();
      if (FILLER3.Length != 0) hash ^= FILLER3.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WR4DATAFLAG1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WR4DATAFLAG1);
      }
      if (WR4DATAFLAG2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WR4DATAFLAG2);
      }
      if (WR4MATCHDATE.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WR4MATCHDATE);
      }
      if (WR4TRID1.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WR4TRID1);
      }
      if (WR4COMMODITYNAME1.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WR4COMMODITYNAME1);
      }
      if (WR4COMMODITYID1.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WR4COMMODITYID1);
      }
      if (WR4SETTLEMENTMONTH1.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WR4SETTLEMENTMONTH1);
      }
      if (WR4STRIKEPRICE1.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WR4STRIKEPRICE1);
      }
      if (WR4BUYSELLKIND1.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WR4BUYSELLKIND1);
      }
      if (WR4STOCKCODE1.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WR4STOCKCODE1);
      }
      if (WR4MATCHQTY.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(WR4MATCHQTY);
      }
      if (WR4NONCOVERQTY.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WR4NONCOVERQTY);
      }
      if (WR4MATCHPRICE.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WR4MATCHPRICE);
      }
      if (WR4NOWPRICE.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(WR4NOWPRICE);
      }
      if (WR4VARINCOME.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(WR4VARINCOME);
      }
      if (WR4ORDERNOF.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WR4ORDERNOF);
      }
      if (WR4ORDERNOL.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(WR4ORDERNOL);
      }
      if (WR4SPOKIND.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(WR4SPOKIND);
      }
      if (WR4STRATEGYCODE.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(WR4STRATEGYCODE);
      }
      if (WR4VARINCOMECURRENCY.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WR4VARINCOMECURRENCY);
      }
      if (WR4DAYTRADEID.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(WR4DAYTRADEID);
      }
      if (FILLER1.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(FILLER1);
      }
      if (WR4MATCHPRICE9.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(WR4MATCHPRICE9);
      }
      if (WR4NOWPRICE9.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(WR4NOWPRICE9);
      }
      if (FILLER2.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(FILLER2);
      }
      if (FILLER3.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(FILLER3);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WR4DATAFLAG1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4DATAFLAG1);
      }
      if (WR4DATAFLAG2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4DATAFLAG2);
      }
      if (WR4MATCHDATE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4MATCHDATE);
      }
      if (WR4TRID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4TRID1);
      }
      if (WR4COMMODITYNAME1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4COMMODITYNAME1);
      }
      if (WR4COMMODITYID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4COMMODITYID1);
      }
      if (WR4SETTLEMENTMONTH1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4SETTLEMENTMONTH1);
      }
      if (WR4STRIKEPRICE1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4STRIKEPRICE1);
      }
      if (WR4BUYSELLKIND1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4BUYSELLKIND1);
      }
      if (WR4STOCKCODE1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4STOCKCODE1);
      }
      if (WR4MATCHQTY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4MATCHQTY);
      }
      if (WR4NONCOVERQTY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4NONCOVERQTY);
      }
      if (WR4MATCHPRICE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4MATCHPRICE);
      }
      if (WR4NOWPRICE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4NOWPRICE);
      }
      if (WR4VARINCOME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR4VARINCOME);
      }
      if (WR4ORDERNOF.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR4ORDERNOF);
      }
      if (WR4ORDERNOL.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR4ORDERNOL);
      }
      if (WR4SPOKIND.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR4SPOKIND);
      }
      if (WR4STRATEGYCODE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR4STRATEGYCODE);
      }
      if (WR4VARINCOMECURRENCY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR4VARINCOMECURRENCY);
      }
      if (WR4DAYTRADEID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR4DAYTRADEID);
      }
      if (FILLER1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER1);
      }
      if (WR4MATCHPRICE9.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR4MATCHPRICE9);
      }
      if (WR4NOWPRICE9.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR4NOWPRICE9);
      }
      if (FILLER2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER2);
      }
      if (FILLER3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER3);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemResult_TODAY_DETAIL other) {
      if (other == null) {
        return;
      }
      if (other.WR4DATAFLAG1.Length != 0) {
        WR4DATAFLAG1 = other.WR4DATAFLAG1;
      }
      if (other.WR4DATAFLAG2.Length != 0) {
        WR4DATAFLAG2 = other.WR4DATAFLAG2;
      }
      if (other.WR4MATCHDATE.Length != 0) {
        WR4MATCHDATE = other.WR4MATCHDATE;
      }
      if (other.WR4TRID1.Length != 0) {
        WR4TRID1 = other.WR4TRID1;
      }
      if (other.WR4COMMODITYNAME1.Length != 0) {
        WR4COMMODITYNAME1 = other.WR4COMMODITYNAME1;
      }
      if (other.WR4COMMODITYID1.Length != 0) {
        WR4COMMODITYID1 = other.WR4COMMODITYID1;
      }
      if (other.WR4SETTLEMENTMONTH1.Length != 0) {
        WR4SETTLEMENTMONTH1 = other.WR4SETTLEMENTMONTH1;
      }
      if (other.WR4STRIKEPRICE1.Length != 0) {
        WR4STRIKEPRICE1 = other.WR4STRIKEPRICE1;
      }
      if (other.WR4BUYSELLKIND1.Length != 0) {
        WR4BUYSELLKIND1 = other.WR4BUYSELLKIND1;
      }
      if (other.WR4STOCKCODE1.Length != 0) {
        WR4STOCKCODE1 = other.WR4STOCKCODE1;
      }
      if (other.WR4MATCHQTY.Length != 0) {
        WR4MATCHQTY = other.WR4MATCHQTY;
      }
      if (other.WR4NONCOVERQTY.Length != 0) {
        WR4NONCOVERQTY = other.WR4NONCOVERQTY;
      }
      if (other.WR4MATCHPRICE.Length != 0) {
        WR4MATCHPRICE = other.WR4MATCHPRICE;
      }
      if (other.WR4NOWPRICE.Length != 0) {
        WR4NOWPRICE = other.WR4NOWPRICE;
      }
      if (other.WR4VARINCOME.Length != 0) {
        WR4VARINCOME = other.WR4VARINCOME;
      }
      if (other.WR4ORDERNOF.Length != 0) {
        WR4ORDERNOF = other.WR4ORDERNOF;
      }
      if (other.WR4ORDERNOL.Length != 0) {
        WR4ORDERNOL = other.WR4ORDERNOL;
      }
      if (other.WR4SPOKIND.Length != 0) {
        WR4SPOKIND = other.WR4SPOKIND;
      }
      if (other.WR4STRATEGYCODE.Length != 0) {
        WR4STRATEGYCODE = other.WR4STRATEGYCODE;
      }
      if (other.WR4VARINCOMECURRENCY.Length != 0) {
        WR4VARINCOMECURRENCY = other.WR4VARINCOMECURRENCY;
      }
      if (other.WR4DAYTRADEID.Length != 0) {
        WR4DAYTRADEID = other.WR4DAYTRADEID;
      }
      if (other.FILLER1.Length != 0) {
        FILLER1 = other.FILLER1;
      }
      if (other.WR4MATCHPRICE9.Length != 0) {
        WR4MATCHPRICE9 = other.WR4MATCHPRICE9;
      }
      if (other.WR4NOWPRICE9.Length != 0) {
        WR4NOWPRICE9 = other.WR4NOWPRICE9;
      }
      if (other.FILLER2.Length != 0) {
        FILLER2 = other.FILLER2;
      }
      if (other.FILLER3.Length != 0) {
        FILLER3 = other.FILLER3;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WR4DATAFLAG1 = input.ReadString();
            break;
          }
          case 18: {
            WR4DATAFLAG2 = input.ReadString();
            break;
          }
          case 26: {
            WR4MATCHDATE = input.ReadString();
            break;
          }
          case 34: {
            WR4TRID1 = input.ReadString();
            break;
          }
          case 42: {
            WR4COMMODITYNAME1 = input.ReadString();
            break;
          }
          case 50: {
            WR4COMMODITYID1 = input.ReadString();
            break;
          }
          case 58: {
            WR4SETTLEMENTMONTH1 = input.ReadString();
            break;
          }
          case 66: {
            WR4STRIKEPRICE1 = input.ReadString();
            break;
          }
          case 74: {
            WR4BUYSELLKIND1 = input.ReadString();
            break;
          }
          case 82: {
            WR4STOCKCODE1 = input.ReadString();
            break;
          }
          case 90: {
            WR4MATCHQTY = input.ReadString();
            break;
          }
          case 98: {
            WR4NONCOVERQTY = input.ReadString();
            break;
          }
          case 106: {
            WR4MATCHPRICE = input.ReadString();
            break;
          }
          case 114: {
            WR4NOWPRICE = input.ReadString();
            break;
          }
          case 122: {
            WR4VARINCOME = input.ReadString();
            break;
          }
          case 130: {
            WR4ORDERNOF = input.ReadString();
            break;
          }
          case 138: {
            WR4ORDERNOL = input.ReadString();
            break;
          }
          case 146: {
            WR4SPOKIND = input.ReadString();
            break;
          }
          case 154: {
            WR4STRATEGYCODE = input.ReadString();
            break;
          }
          case 162: {
            WR4VARINCOMECURRENCY = input.ReadString();
            break;
          }
          case 170: {
            WR4DAYTRADEID = input.ReadString();
            break;
          }
          case 178: {
            FILLER1 = input.ReadString();
            break;
          }
          case 186: {
            WR4MATCHPRICE9 = input.ReadString();
            break;
          }
          case 194: {
            WR4NOWPRICE9 = input.ReadString();
            break;
          }
          case 202: {
            FILLER2 = input.ReadString();
            break;
          }
          case 210: {
            FILLER3 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// => 5 今委託成交 (WR_READ_DATA) 明細格式如下 : (400 bytes)
  /// </summary>
  public sealed partial class TandemResult_TODAY_TRADE : pb::IMessage<TandemResult_TODAY_TRADE> {
    private static readonly pb::MessageParser<TandemResult_TODAY_TRADE> _parser = new pb::MessageParser<TandemResult_TODAY_TRADE>(() => new TandemResult_TODAY_TRADE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemResult_TODAY_TRADE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_TODAY_TRADE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_TODAY_TRADE(TandemResult_TODAY_TRADE other) : this() {
      wR5DATAFLAG1_ = other.wR5DATAFLAG1_;
      wR5DATAFLAG2_ = other.wR5DATAFLAG2_;
      wR5ORDERNOF_ = other.wR5ORDERNOF_;
      wR5ORDERNOL_ = other.wR5ORDERNOL_;
      wR5DAYTRADEID_ = other.wR5DAYTRADEID_;
      wR5TRID1_ = other.wR5TRID1_;
      wR5COMMODITYNAME1_ = other.wR5COMMODITYNAME1_;
      wR5COMMODITYID1_ = other.wR5COMMODITYID1_;
      wR5SETTLEMENTMONTH1_ = other.wR5SETTLEMENTMONTH1_;
      wR5STRIKEPRICE1_ = other.wR5STRIKEPRICE1_;
      wR5BUYSELLKIND1_ = other.wR5BUYSELLKIND1_;
      wR5STOCKCODE1_ = other.wR5STOCKCODE1_;
      wR5ORDERQTY_ = other.wR5ORDERQTY_;
      wR5ORDERPRICE_ = other.wR5ORDERPRICE_;
      wR5MATCHQTY_ = other.wR5MATCHQTY_;
      wR5MATCHPRICE_ = other.wR5MATCHPRICE_;
      wR5REMARK_ = other.wR5REMARK_;
      wR5STRATEGYCODE_ = other.wR5STRATEGYCODE_;
      fILLER1_ = other.fILLER1_;
      wR5ORDERPRICE9_ = other.wR5ORDERPRICE9_;
      wR5MATCHPRICE9_ = other.wR5MATCHPRICE9_;
      fILLER2_ = other.fILLER2_;
      fILLER3_ = other.fILLER3_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_TODAY_TRADE Clone() {
      return new TandemResult_TODAY_TRADE(this);
    }

    /// <summary>Field number for the "WR5_DATA_FLAG_1" field.</summary>
    public const int WR5DATAFLAG1FieldNumber = 1;
    private string wR5DATAFLAG1_ = "";
    /// <summary>
    ///             PIC X(1).	1	X	1	0	5:今委託成交	資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5DATAFLAG1 {
      get { return wR5DATAFLAG1_; }
      set {
        wR5DATAFLAG1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_DATA_FLAG_2" field.</summary>
    public const int WR5DATAFLAG2FieldNumber = 2;
    private string wR5DATAFLAG2_ = "";
    /// <summary>
    ///             PIC X(1).	1	X	1	0	     1:首筆 	子資料類別2:同一商品或委託的第二筆(包含)及其以後的資料資料內容.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5DATAFLAG2 {
      get { return wR5DATAFLAG2_; }
      set {
        wR5DATAFLAG2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_ORDER_NO_F" field.</summary>
    public const int WR5ORDERNOFFieldNumber = 3;
    private string wR5ORDERNOF_ = "";
    /// <summary>
    ///       PIC X(02).	2	X	2	0		委託書編號前兩碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5ORDERNOF {
      get { return wR5ORDERNOF_; }
      set {
        wR5ORDERNOF_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_ORDER_NO_L" field.</summary>
    public const int WR5ORDERNOLFieldNumber = 4;
    private string wR5ORDERNOL_ = "";
    /// <summary>
    ///       PIC X(03).	3	X	3	0		委託書編號流水號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5ORDERNOL {
      get { return wR5ORDERNOL_; }
      set {
        wR5ORDERNOL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_DAY_TRADE_ID" field.</summary>
    public const int WR5DAYTRADEIDFieldNumber = 5;
    private string wR5DAYTRADEID_ = "";
    /// <summary>
    ///     PIC X(01).	1	X	1	0	Y : 當日沖銷	當沖記號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5DAYTRADEID {
      get { return wR5DAYTRADEID_; }
      set {
        wR5DAYTRADEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_TR_ID_1" field.</summary>
    public const int WR5TRID1FieldNumber = 6;
    private string wR5TRID1_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5TRID1 {
      get { return wR5TRID1_; }
      set {
        wR5TRID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_COMMODITY_NAME_1" field.</summary>
    public const int WR5COMMODITYNAME1FieldNumber = 7;
    private string wR5COMMODITYNAME1_ = "";
    /// <summary>
    ///   PIC X(10).	10	X	10	0		商品１簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5COMMODITYNAME1 {
      get { return wR5COMMODITYNAME1_; }
      set {
        wR5COMMODITYNAME1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_COMMODITY_ID_1" field.</summary>
    public const int WR5COMMODITYID1FieldNumber = 8;
    private string wR5COMMODITYID1_ = "";
    /// <summary>
    ///     PIC X(7).	7	X	7	0		商品１代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5COMMODITYID1 {
      get { return wR5COMMODITYID1_; }
      set {
        wR5COMMODITYID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_SETTLEMENT_MONTH_1" field.</summary>
    public const int WR5SETTLEMENTMONTH1FieldNumber = 9;
    private string wR5SETTLEMENTMONTH1_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		商品１年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5SETTLEMENTMONTH1 {
      get { return wR5SETTLEMENTMONTH1_; }
      set {
        wR5SETTLEMENTMONTH1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_STRIKE_PRICE_1" field.</summary>
    public const int WR5STRIKEPRICE1FieldNumber = 10;
    private string wR5STRIKEPRICE1_ = "";
    /// <summary>
    ///     PIC 9(6)V9(3).	9	9	6	3		商品１履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5STRIKEPRICE1 {
      get { return wR5STRIKEPRICE1_; }
      set {
        wR5STRIKEPRICE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_BUY_SELL_KIND_1" field.</summary>
    public const int WR5BUYSELLKIND1FieldNumber = 11;
    private string wR5BUYSELLKIND1_ = "";
    /// <summary>
    ///    PIC X(1).	1	X	1	0		商品１買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5BUYSELLKIND1 {
      get { return wR5BUYSELLKIND1_; }
      set {
        wR5BUYSELLKIND1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_STOCK_CODE_1" field.</summary>
    public const int WR5STOCKCODE1FieldNumber = 12;
    private string wR5STOCKCODE1_ = "";
    /// <summary>
    ///       PIC X(07).	7	X	7	0		商品１個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5STOCKCODE1 {
      get { return wR5STOCKCODE1_; }
      set {
        wR5STOCKCODE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_ORDER_QTY" field.</summary>
    public const int WR5ORDERQTYFieldNumber = 13;
    private string wR5ORDERQTY_ = "";
    /// <summary>
    ///        PIC 9(14) COMP.	8	C	14	0		委託口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5ORDERQTY {
      get { return wR5ORDERQTY_; }
      set {
        wR5ORDERQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_ORDER_PRICE" field.</summary>
    public const int WR5ORDERPRICEFieldNumber = 14;
    private string wR5ORDERPRICE_ = "";
    /// <summary>
    ///      PIC S9(6)V9(3) COMP.	4	C	6	3		"委託價格(擬作廢日期未定,請改用底下小數9位的對應欄位)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5ORDERPRICE {
      get { return wR5ORDERPRICE_; }
      set {
        wR5ORDERPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_MATCH_QTY" field.</summary>
    public const int WR5MATCHQTYFieldNumber = 15;
    private string wR5MATCHQTY_ = "";
    /// <summary>
    ///        PIC 9(14) COMP.	8	C	14	0		成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5MATCHQTY {
      get { return wR5MATCHQTY_; }
      set {
        wR5MATCHQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_MATCH_PRICE" field.</summary>
    public const int WR5MATCHPRICEFieldNumber = 16;
    private string wR5MATCHPRICE_ = "";
    /// <summary>
    ///      PIC S9(6)V9(3) COMP.	4	C	6	3		"成交價(擬作廢日期未定,請改用底下小數9位的對應欄位)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5MATCHPRICE {
      get { return wR5MATCHPRICE_; }
      set {
        wR5MATCHPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_REMARK" field.</summary>
    public const int WR5REMARKFieldNumber = 17;
    private string wR5REMARK_ = "";
    /// <summary>
    ///           PIC X(14).	14	X	14	0		備註
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5REMARK {
      get { return wR5REMARK_; }
      set {
        wR5REMARK_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_STRATEGY_CODE" field.</summary>
    public const int WR5STRATEGYCODEFieldNumber = 18;
    private string wR5STRATEGYCODE_ = "";
    /// <summary>
    ///    PIC X(5).	5	X	5	0	(本欄位為TPMS專用,沒用到的會回SPACE)	策略代號(TMPS)	FILLER	策略代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5STRATEGYCODE {
      get { return wR5STRATEGYCODE_; }
      set {
        wR5STRATEGYCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER1" field.</summary>
    public const int FILLER1FieldNumber = 19;
    private string fILLER1_ = "";
    /// <summary>
    ///               PIC X(01).	1	X	1	0	SPACE	FILLSER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER1 {
      get { return fILLER1_; }
      set {
        fILLER1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_ORDER_PRICE_9" field.</summary>
    public const int WR5ORDERPRICE9FieldNumber = 20;
    private string wR5ORDERPRICE9_ = "";
    /// <summary>
    ///    PIC S9(9)V9(9) COMP.	8	C	9	9		委託價格(小數9位)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5ORDERPRICE9 {
      get { return wR5ORDERPRICE9_; }
      set {
        wR5ORDERPRICE9_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR5_MATCH_PRICE_9" field.</summary>
    public const int WR5MATCHPRICE9FieldNumber = 21;
    private string wR5MATCHPRICE9_ = "";
    /// <summary>
    ///    PIC S9(9)V9(9) COMP.	8	C	9	9		成交價(小數9位)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR5MATCHPRICE9 {
      get { return wR5MATCHPRICE9_; }
      set {
        wR5MATCHPRICE9_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER2" field.</summary>
    public const int FILLER2FieldNumber = 22;
    private string fILLER2_ = "";
    /// <summary>
    ///               PIC X(100).	100	X	100	0	SPACE	FILLSER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER2 {
      get { return fILLER2_; }
      set {
        fILLER2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER3" field.</summary>
    public const int FILLER3FieldNumber = 23;
    private string fILLER3_ = "";
    /// <summary>
    ///               PIC X(192).	192	X	192	0	X(209)=>X(192) SPACE	FILLSER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER3 {
      get { return fILLER3_; }
      set {
        fILLER3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemResult_TODAY_TRADE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemResult_TODAY_TRADE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WR5DATAFLAG1 != other.WR5DATAFLAG1) return false;
      if (WR5DATAFLAG2 != other.WR5DATAFLAG2) return false;
      if (WR5ORDERNOF != other.WR5ORDERNOF) return false;
      if (WR5ORDERNOL != other.WR5ORDERNOL) return false;
      if (WR5DAYTRADEID != other.WR5DAYTRADEID) return false;
      if (WR5TRID1 != other.WR5TRID1) return false;
      if (WR5COMMODITYNAME1 != other.WR5COMMODITYNAME1) return false;
      if (WR5COMMODITYID1 != other.WR5COMMODITYID1) return false;
      if (WR5SETTLEMENTMONTH1 != other.WR5SETTLEMENTMONTH1) return false;
      if (WR5STRIKEPRICE1 != other.WR5STRIKEPRICE1) return false;
      if (WR5BUYSELLKIND1 != other.WR5BUYSELLKIND1) return false;
      if (WR5STOCKCODE1 != other.WR5STOCKCODE1) return false;
      if (WR5ORDERQTY != other.WR5ORDERQTY) return false;
      if (WR5ORDERPRICE != other.WR5ORDERPRICE) return false;
      if (WR5MATCHQTY != other.WR5MATCHQTY) return false;
      if (WR5MATCHPRICE != other.WR5MATCHPRICE) return false;
      if (WR5REMARK != other.WR5REMARK) return false;
      if (WR5STRATEGYCODE != other.WR5STRATEGYCODE) return false;
      if (FILLER1 != other.FILLER1) return false;
      if (WR5ORDERPRICE9 != other.WR5ORDERPRICE9) return false;
      if (WR5MATCHPRICE9 != other.WR5MATCHPRICE9) return false;
      if (FILLER2 != other.FILLER2) return false;
      if (FILLER3 != other.FILLER3) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WR5DATAFLAG1.Length != 0) hash ^= WR5DATAFLAG1.GetHashCode();
      if (WR5DATAFLAG2.Length != 0) hash ^= WR5DATAFLAG2.GetHashCode();
      if (WR5ORDERNOF.Length != 0) hash ^= WR5ORDERNOF.GetHashCode();
      if (WR5ORDERNOL.Length != 0) hash ^= WR5ORDERNOL.GetHashCode();
      if (WR5DAYTRADEID.Length != 0) hash ^= WR5DAYTRADEID.GetHashCode();
      if (WR5TRID1.Length != 0) hash ^= WR5TRID1.GetHashCode();
      if (WR5COMMODITYNAME1.Length != 0) hash ^= WR5COMMODITYNAME1.GetHashCode();
      if (WR5COMMODITYID1.Length != 0) hash ^= WR5COMMODITYID1.GetHashCode();
      if (WR5SETTLEMENTMONTH1.Length != 0) hash ^= WR5SETTLEMENTMONTH1.GetHashCode();
      if (WR5STRIKEPRICE1.Length != 0) hash ^= WR5STRIKEPRICE1.GetHashCode();
      if (WR5BUYSELLKIND1.Length != 0) hash ^= WR5BUYSELLKIND1.GetHashCode();
      if (WR5STOCKCODE1.Length != 0) hash ^= WR5STOCKCODE1.GetHashCode();
      if (WR5ORDERQTY.Length != 0) hash ^= WR5ORDERQTY.GetHashCode();
      if (WR5ORDERPRICE.Length != 0) hash ^= WR5ORDERPRICE.GetHashCode();
      if (WR5MATCHQTY.Length != 0) hash ^= WR5MATCHQTY.GetHashCode();
      if (WR5MATCHPRICE.Length != 0) hash ^= WR5MATCHPRICE.GetHashCode();
      if (WR5REMARK.Length != 0) hash ^= WR5REMARK.GetHashCode();
      if (WR5STRATEGYCODE.Length != 0) hash ^= WR5STRATEGYCODE.GetHashCode();
      if (FILLER1.Length != 0) hash ^= FILLER1.GetHashCode();
      if (WR5ORDERPRICE9.Length != 0) hash ^= WR5ORDERPRICE9.GetHashCode();
      if (WR5MATCHPRICE9.Length != 0) hash ^= WR5MATCHPRICE9.GetHashCode();
      if (FILLER2.Length != 0) hash ^= FILLER2.GetHashCode();
      if (FILLER3.Length != 0) hash ^= FILLER3.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WR5DATAFLAG1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WR5DATAFLAG1);
      }
      if (WR5DATAFLAG2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WR5DATAFLAG2);
      }
      if (WR5ORDERNOF.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WR5ORDERNOF);
      }
      if (WR5ORDERNOL.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WR5ORDERNOL);
      }
      if (WR5DAYTRADEID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WR5DAYTRADEID);
      }
      if (WR5TRID1.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WR5TRID1);
      }
      if (WR5COMMODITYNAME1.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WR5COMMODITYNAME1);
      }
      if (WR5COMMODITYID1.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WR5COMMODITYID1);
      }
      if (WR5SETTLEMENTMONTH1.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WR5SETTLEMENTMONTH1);
      }
      if (WR5STRIKEPRICE1.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WR5STRIKEPRICE1);
      }
      if (WR5BUYSELLKIND1.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(WR5BUYSELLKIND1);
      }
      if (WR5STOCKCODE1.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WR5STOCKCODE1);
      }
      if (WR5ORDERQTY.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WR5ORDERQTY);
      }
      if (WR5ORDERPRICE.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(WR5ORDERPRICE);
      }
      if (WR5MATCHQTY.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(WR5MATCHQTY);
      }
      if (WR5MATCHPRICE.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WR5MATCHPRICE);
      }
      if (WR5REMARK.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(WR5REMARK);
      }
      if (WR5STRATEGYCODE.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(WR5STRATEGYCODE);
      }
      if (FILLER1.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(FILLER1);
      }
      if (WR5ORDERPRICE9.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WR5ORDERPRICE9);
      }
      if (WR5MATCHPRICE9.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(WR5MATCHPRICE9);
      }
      if (FILLER2.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(FILLER2);
      }
      if (FILLER3.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(FILLER3);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WR5DATAFLAG1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5DATAFLAG1);
      }
      if (WR5DATAFLAG2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5DATAFLAG2);
      }
      if (WR5ORDERNOF.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5ORDERNOF);
      }
      if (WR5ORDERNOL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5ORDERNOL);
      }
      if (WR5DAYTRADEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5DAYTRADEID);
      }
      if (WR5TRID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5TRID1);
      }
      if (WR5COMMODITYNAME1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5COMMODITYNAME1);
      }
      if (WR5COMMODITYID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5COMMODITYID1);
      }
      if (WR5SETTLEMENTMONTH1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5SETTLEMENTMONTH1);
      }
      if (WR5STRIKEPRICE1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5STRIKEPRICE1);
      }
      if (WR5BUYSELLKIND1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5BUYSELLKIND1);
      }
      if (WR5STOCKCODE1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5STOCKCODE1);
      }
      if (WR5ORDERQTY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5ORDERQTY);
      }
      if (WR5ORDERPRICE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5ORDERPRICE);
      }
      if (WR5MATCHQTY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR5MATCHQTY);
      }
      if (WR5MATCHPRICE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR5MATCHPRICE);
      }
      if (WR5REMARK.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR5REMARK);
      }
      if (WR5STRATEGYCODE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR5STRATEGYCODE);
      }
      if (FILLER1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER1);
      }
      if (WR5ORDERPRICE9.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR5ORDERPRICE9);
      }
      if (WR5MATCHPRICE9.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR5MATCHPRICE9);
      }
      if (FILLER2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER2);
      }
      if (FILLER3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER3);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemResult_TODAY_TRADE other) {
      if (other == null) {
        return;
      }
      if (other.WR5DATAFLAG1.Length != 0) {
        WR5DATAFLAG1 = other.WR5DATAFLAG1;
      }
      if (other.WR5DATAFLAG2.Length != 0) {
        WR5DATAFLAG2 = other.WR5DATAFLAG2;
      }
      if (other.WR5ORDERNOF.Length != 0) {
        WR5ORDERNOF = other.WR5ORDERNOF;
      }
      if (other.WR5ORDERNOL.Length != 0) {
        WR5ORDERNOL = other.WR5ORDERNOL;
      }
      if (other.WR5DAYTRADEID.Length != 0) {
        WR5DAYTRADEID = other.WR5DAYTRADEID;
      }
      if (other.WR5TRID1.Length != 0) {
        WR5TRID1 = other.WR5TRID1;
      }
      if (other.WR5COMMODITYNAME1.Length != 0) {
        WR5COMMODITYNAME1 = other.WR5COMMODITYNAME1;
      }
      if (other.WR5COMMODITYID1.Length != 0) {
        WR5COMMODITYID1 = other.WR5COMMODITYID1;
      }
      if (other.WR5SETTLEMENTMONTH1.Length != 0) {
        WR5SETTLEMENTMONTH1 = other.WR5SETTLEMENTMONTH1;
      }
      if (other.WR5STRIKEPRICE1.Length != 0) {
        WR5STRIKEPRICE1 = other.WR5STRIKEPRICE1;
      }
      if (other.WR5BUYSELLKIND1.Length != 0) {
        WR5BUYSELLKIND1 = other.WR5BUYSELLKIND1;
      }
      if (other.WR5STOCKCODE1.Length != 0) {
        WR5STOCKCODE1 = other.WR5STOCKCODE1;
      }
      if (other.WR5ORDERQTY.Length != 0) {
        WR5ORDERQTY = other.WR5ORDERQTY;
      }
      if (other.WR5ORDERPRICE.Length != 0) {
        WR5ORDERPRICE = other.WR5ORDERPRICE;
      }
      if (other.WR5MATCHQTY.Length != 0) {
        WR5MATCHQTY = other.WR5MATCHQTY;
      }
      if (other.WR5MATCHPRICE.Length != 0) {
        WR5MATCHPRICE = other.WR5MATCHPRICE;
      }
      if (other.WR5REMARK.Length != 0) {
        WR5REMARK = other.WR5REMARK;
      }
      if (other.WR5STRATEGYCODE.Length != 0) {
        WR5STRATEGYCODE = other.WR5STRATEGYCODE;
      }
      if (other.FILLER1.Length != 0) {
        FILLER1 = other.FILLER1;
      }
      if (other.WR5ORDERPRICE9.Length != 0) {
        WR5ORDERPRICE9 = other.WR5ORDERPRICE9;
      }
      if (other.WR5MATCHPRICE9.Length != 0) {
        WR5MATCHPRICE9 = other.WR5MATCHPRICE9;
      }
      if (other.FILLER2.Length != 0) {
        FILLER2 = other.FILLER2;
      }
      if (other.FILLER3.Length != 0) {
        FILLER3 = other.FILLER3;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WR5DATAFLAG1 = input.ReadString();
            break;
          }
          case 18: {
            WR5DATAFLAG2 = input.ReadString();
            break;
          }
          case 26: {
            WR5ORDERNOF = input.ReadString();
            break;
          }
          case 34: {
            WR5ORDERNOL = input.ReadString();
            break;
          }
          case 42: {
            WR5DAYTRADEID = input.ReadString();
            break;
          }
          case 50: {
            WR5TRID1 = input.ReadString();
            break;
          }
          case 58: {
            WR5COMMODITYNAME1 = input.ReadString();
            break;
          }
          case 66: {
            WR5COMMODITYID1 = input.ReadString();
            break;
          }
          case 74: {
            WR5SETTLEMENTMONTH1 = input.ReadString();
            break;
          }
          case 82: {
            WR5STRIKEPRICE1 = input.ReadString();
            break;
          }
          case 90: {
            WR5BUYSELLKIND1 = input.ReadString();
            break;
          }
          case 98: {
            WR5STOCKCODE1 = input.ReadString();
            break;
          }
          case 106: {
            WR5ORDERQTY = input.ReadString();
            break;
          }
          case 114: {
            WR5ORDERPRICE = input.ReadString();
            break;
          }
          case 122: {
            WR5MATCHQTY = input.ReadString();
            break;
          }
          case 130: {
            WR5MATCHPRICE = input.ReadString();
            break;
          }
          case 138: {
            WR5REMARK = input.ReadString();
            break;
          }
          case 146: {
            WR5STRATEGYCODE = input.ReadString();
            break;
          }
          case 154: {
            FILLER1 = input.ReadString();
            break;
          }
          case 162: {
            WR5ORDERPRICE9 = input.ReadString();
            break;
          }
          case 170: {
            WR5MATCHPRICE9 = input.ReadString();
            break;
          }
          case 178: {
            FILLER2 = input.ReadString();
            break;
          }
          case 186: {
            FILLER3 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///    => 7 保證金/標的證券抵繳買權賣方部位查詢 (WR_READ_DATA) 明細格式如下 : (400bytes)
  /// </summary>
  public sealed partial class TandemResult_EQUITY_CALL_SELLSIDE : pb::IMessage<TandemResult_EQUITY_CALL_SELLSIDE> {
    private static readonly pb::MessageParser<TandemResult_EQUITY_CALL_SELLSIDE> _parser = new pb::MessageParser<TandemResult_EQUITY_CALL_SELLSIDE>(() => new TandemResult_EQUITY_CALL_SELLSIDE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemResult_EQUITY_CALL_SELLSIDE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_EQUITY_CALL_SELLSIDE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_EQUITY_CALL_SELLSIDE(TandemResult_EQUITY_CALL_SELLSIDE other) : this() {
      wR7DATAFLAG1_ = other.wR7DATAFLAG1_;
      wR7DATAFLAG2_ = other.wR7DATAFLAG2_;
      wR7TRID_ = other.wR7TRID_;
      fILLER_ = other.fILLER_;
      wR7BQTY_ = other.wR7BQTY_;
      wR7SQTY_ = other.wR7SQTY_;
      fILLER1_ = other.fILLER1_;
      wR7QTY_ = other.wR7QTY_;
      wR7NOS_ = other.wR7NOS_;
      wR7STRATEGYCODE_ = other.wR7STRATEGYCODE_;
      fILLER2_ = other.fILLER2_;
      wR7BTRID1_ = other.wR7BTRID1_;
      wR7BCOMMODITYNAME1_ = other.wR7BCOMMODITYNAME1_;
      wR7BCOMMODITYID1_ = other.wR7BCOMMODITYID1_;
      wR7BSETTLEMENTMONTH1_ = other.wR7BSETTLEMENTMONTH1_;
      wR7BSTRIKEPRICE1_ = other.wR7BSTRIKEPRICE1_;
      wR7BBUYSELLKIND1_ = other.wR7BBUYSELLKIND1_;
      wR7BSTOCKCODE1_ = other.wR7BSTOCKCODE1_;
      wR7BTRID2_ = other.wR7BTRID2_;
      wR7BCOMMODITYNAME2_ = other.wR7BCOMMODITYNAME2_;
      wR7BCOMMODITYID2_ = other.wR7BCOMMODITYID2_;
      wR7BSETTLEMENTMONTH2_ = other.wR7BSETTLEMENTMONTH2_;
      wR7BSTRIKEPRICE2_ = other.wR7BSTRIKEPRICE2_;
      wR7BBUYSELLKIND2_ = other.wR7BBUYSELLKIND2_;
      wR7BSTOCKCODE2_ = other.wR7BSTOCKCODE2_;
      wR7STRID1_ = other.wR7STRID1_;
      wR7SCOMMODITYNAME1_ = other.wR7SCOMMODITYNAME1_;
      wR7SCOMMODITYID1_ = other.wR7SCOMMODITYID1_;
      wR7SSETTLEMENTMONTH1_ = other.wR7SSETTLEMENTMONTH1_;
      wR7SSTRIKEPRICE1_ = other.wR7SSTRIKEPRICE1_;
      wR7SBUYSELLKIND1_ = other.wR7SBUYSELLKIND1_;
      wR7SSTOCKCODE1_ = other.wR7SSTOCKCODE1_;
      wR7STRID2_ = other.wR7STRID2_;
      wR7SCOMMODITYNAME2_ = other.wR7SCOMMODITYNAME2_;
      wR7SCOMMODITYID2_ = other.wR7SCOMMODITYID2_;
      wR7SSETTLEMENTMONTH2_ = other.wR7SSETTLEMENTMONTH2_;
      wR7SSTRIKEPRICE2_ = other.wR7SSTRIKEPRICE2_;
      wR7SBUYSELLKIND2_ = other.wR7SBUYSELLKIND2_;
      wR7SSTOCKCODE2_ = other.wR7SSTOCKCODE2_;
      wR7SUBNOS_ = other.wR7SUBNOS_;
      wR7MARGIN1_ = other.wR7MARGIN1_;
      wR7MARGIN2_ = other.wR7MARGIN2_;
      wR7TMARGIN_ = other.wR7TMARGIN_;
      wR7MARGINCURRENCY_ = other.wR7MARGINCURRENCY_;
      fILLER3_ = other.fILLER3_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_EQUITY_CALL_SELLSIDE Clone() {
      return new TandemResult_EQUITY_CALL_SELLSIDE(this);
    }

    /// <summary>Field number for the "WR7_DATA_FLAG_1" field.</summary>
    public const int WR7DATAFLAG1FieldNumber = 1;
    private string wR7DATAFLAG1_ = "";
    /// <summary>
    ///         PIC X(1).	1	X	1	0	7 保證金/標的證券抵繳	資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7DATAFLAG1 {
      get { return wR7DATAFLAG1_; }
      set {
        wR7DATAFLAG1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_DATA_FLAG_2" field.</summary>
    public const int WR7DATAFLAG2FieldNumber = 2;
    private string wR7DATAFLAG2_ = "";
    /// <summary>
    /// PIC X(1).	1	X	1	0	     1:首筆 	子資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7DATAFLAG2 {
      get { return wR7DATAFLAG2_; }
      set {
        wR7DATAFLAG2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_TR_ID" field.</summary>
    public const int WR7TRIDFieldNumber = 3;
    private string wR7TRID_ = "";
    /// <summary>
    ///        PIC X(20).	20	X	20	0		期交所商品代號option:期交所編碼 (TXO + 05400履約價 + A_L:CALL,M_X:PUT...月 + 1年(2001) )fu: FITX,FITE,FITF,FIMTX (前七位名稱,後六位商品年月YYYYMM,後五位SPACES)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7TRID {
      get { return wR7TRID_; }
      set {
        wR7TRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER" field.</summary>
    public const int FILLERFieldNumber = 4;
    private string fILLER_ = "";
    /// <summary>
    ///          PIC X(40).	40	X	40	0	SPACE	FILLSER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER {
      get { return fILLER_; }
      set {
        fILLER_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_QTY" field.</summary>
    public const int WR7BQTYFieldNumber = 5;
    private string wR7BQTY_ = "";
    /// <summary>
    ///             PIC 9(14) COMP.	8	C	14	0		買方    未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BQTY {
      get { return wR7BQTY_; }
      set {
        wR7BQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_QTY" field.</summary>
    public const int WR7SQTYFieldNumber = 6;
    private string wR7SQTY_ = "";
    /// <summary>
    ///              PIC 9(14) COMP.	8	C	14	0		賣方    未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7SQTY {
      get { return wR7SQTY_; }
      set {
        wR7SQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER1" field.</summary>
    public const int FILLER1FieldNumber = 7;
    private string fILLER1_ = "";
    /// <summary>
    ///                PIC X(8).	8	X	8	0	SPACE	FILLSER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER1 {
      get { return fILLER1_; }
      set {
        fILLER1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_QTY" field.</summary>
    public const int WR7QTYFieldNumber = 8;
    private string wR7QTY_ = "";
    /// <summary>
    ///             PIC 9(14) COMP.	8	C	14	0		抵繳口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7QTY {
      get { return wR7QTY_; }
      set {
        wR7QTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_NOS" field.</summary>
    public const int WR7NOSFieldNumber = 9;
    private string wR7NOS_ = "";
    /// <summary>
    ///            PIC 9(14) COMP.	8	C	14	0		抵繳股票張數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7NOS {
      get { return wR7NOS_; }
      set {
        wR7NOS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_STRATEGY_CODE" field.</summary>
    public const int WR7STRATEGYCODEFieldNumber = 10;
    private string wR7STRATEGYCODE_ = "";
    /// <summary>
    ///         PIC X(5).	5	X	5	0	(本欄位為TPMS專用,沒用到的會回SPACE)	策略代號(TMPS)	FILLER	策略代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7STRATEGYCODE {
      get { return wR7STRATEGYCODE_; }
      set {
        wR7STRATEGYCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER2" field.</summary>
    public const int FILLER2FieldNumber = 11;
    private string fILLER2_ = "";
    /// <summary>
    ///          PIC X(1).	1	X	1	0	SPACE	FILLSER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER2 {
      get { return fILLER2_; }
      set {
        fILLER2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_TR_ID_1" field.</summary>
    public const int WR7BTRID1FieldNumber = 12;
    private string wR7BTRID1_ = "";
    /// <summary>
    ///.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BTRID1 {
      get { return wR7BTRID1_; }
      set {
        wR7BTRID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_COMMODITY_NAME_1" field.</summary>
    public const int WR7BCOMMODITYNAME1FieldNumber = 13;
    private string wR7BCOMMODITYNAME1_ = "";
    /// <summary>
    ///   PIC X(10).	10	X	10	0		買方  商品１                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BCOMMODITYNAME1 {
      get { return wR7BCOMMODITYNAME1_; }
      set {
        wR7BCOMMODITYNAME1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_COMMODITY_ID_1" field.</summary>
    public const int WR7BCOMMODITYID1FieldNumber = 14;
    private string wR7BCOMMODITYID1_ = "";
    /// <summary>
    ///    PIC X(7).	7	X	7	0		買方  商品１                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BCOMMODITYID1 {
      get { return wR7BCOMMODITYID1_; }
      set {
        wR7BCOMMODITYID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_SETTLEMENT_MONTH_1" field.</summary>
    public const int WR7BSETTLEMENTMONTH1FieldNumber = 15;
    private string wR7BSETTLEMENTMONTH1_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		買方  商品１           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BSETTLEMENTMONTH1 {
      get { return wR7BSETTLEMENTMONTH1_; }
      set {
        wR7BSETTLEMENTMONTH1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_STRIKE_PRICE_1" field.</summary>
    public const int WR7BSTRIKEPRICE1FieldNumber = 16;
    private string wR7BSTRIKEPRICE1_ = "";
    /// <summary>
    ///    PIC 9(6)V9(3).	9	9	6	3		買方  商品１               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BSTRIKEPRICE1 {
      get { return wR7BSTRIKEPRICE1_; }
      set {
        wR7BSTRIKEPRICE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_BUY_SELL_KIND_1" field.</summary>
    public const int WR7BBUYSELLKIND1FieldNumber = 17;
    private string wR7BBUYSELLKIND1_ = "";
    /// <summary>
    ///   PIC X(1).	1	X	1	0		買方  商品１               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BBUYSELLKIND1 {
      get { return wR7BBUYSELLKIND1_; }
      set {
        wR7BBUYSELLKIND1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_STOCK_CODE_1" field.</summary>
    public const int WR7BSTOCKCODE1FieldNumber = 18;
    private string wR7BSTOCKCODE1_ = "";
    /// <summary>
    ///    PIC X(07).	7	X	7	0		買方  商品１   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BSTOCKCODE1 {
      get { return wR7BSTOCKCODE1_; }
      set {
        wR7BSTOCKCODE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_TR_ID_2" field.</summary>
    public const int WR7BTRID2FieldNumber = 19;
    private string wR7BTRID2_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BTRID2 {
      get { return wR7BTRID2_; }
      set {
        wR7BTRID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_COMMODITY_NAME_2" field.</summary>
    public const int WR7BCOMMODITYNAME2FieldNumber = 20;
    private string wR7BCOMMODITYNAME2_ = "";
    /// <summary>
    ///  PIC X(10).	10	X	10	0		買方  商品２                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BCOMMODITYNAME2 {
      get { return wR7BCOMMODITYNAME2_; }
      set {
        wR7BCOMMODITYNAME2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_COMMODITY_ID_2" field.</summary>
    public const int WR7BCOMMODITYID2FieldNumber = 21;
    private string wR7BCOMMODITYID2_ = "";
    /// <summary>
    ///    PIC X(7).	7	X	7	0		買方  商品２                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BCOMMODITYID2 {
      get { return wR7BCOMMODITYID2_; }
      set {
        wR7BCOMMODITYID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_SETTLEMENT_MONTH_2" field.</summary>
    public const int WR7BSETTLEMENTMONTH2FieldNumber = 22;
    private string wR7BSETTLEMENTMONTH2_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		買方  商品２           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BSETTLEMENTMONTH2 {
      get { return wR7BSETTLEMENTMONTH2_; }
      set {
        wR7BSETTLEMENTMONTH2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_STRIKE_PRICE_2" field.</summary>
    public const int WR7BSTRIKEPRICE2FieldNumber = 23;
    private string wR7BSTRIKEPRICE2_ = "";
    /// <summary>
    ///    PIC 9(6)V9(3).	9	9	6	3		買方  商品２               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BSTRIKEPRICE2 {
      get { return wR7BSTRIKEPRICE2_; }
      set {
        wR7BSTRIKEPRICE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_BUY_SELL_KIND_2" field.</summary>
    public const int WR7BBUYSELLKIND2FieldNumber = 24;
    private string wR7BBUYSELLKIND2_ = "";
    /// <summary>
    ///   PIC X(1).	1	X	1	0		買方  商品２               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BBUYSELLKIND2 {
      get { return wR7BBUYSELLKIND2_; }
      set {
        wR7BBUYSELLKIND2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_B_STOCK_CODE_2" field.</summary>
    public const int WR7BSTOCKCODE2FieldNumber = 25;
    private string wR7BSTOCKCODE2_ = "";
    /// <summary>
    ///      PIC X(07).	7	X	7	0		買方  商品２   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7BSTOCKCODE2 {
      get { return wR7BSTOCKCODE2_; }
      set {
        wR7BSTOCKCODE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_TR_ID_1" field.</summary>
    public const int WR7STRID1FieldNumber = 26;
    private string wR7STRID1_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7STRID1 {
      get { return wR7STRID1_; }
      set {
        wR7STRID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_COMMODITY_NAME_1" field.</summary>
    public const int WR7SCOMMODITYNAME1FieldNumber = 27;
    private string wR7SCOMMODITYNAME1_ = "";
    /// <summary>
    ///   PIC X(10).	10	X	10	0		賣方  商品１                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7SCOMMODITYNAME1 {
      get { return wR7SCOMMODITYNAME1_; }
      set {
        wR7SCOMMODITYNAME1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_COMMODITY_ID_1" field.</summary>
    public const int WR7SCOMMODITYID1FieldNumber = 28;
    private string wR7SCOMMODITYID1_ = "";
    /// <summary>
    ///    PIC X(7).	7	X	7	0		賣方  商品１                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7SCOMMODITYID1 {
      get { return wR7SCOMMODITYID1_; }
      set {
        wR7SCOMMODITYID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_SETTLEMENT_MONTH_1" field.</summary>
    public const int WR7SSETTLEMENTMONTH1FieldNumber = 29;
    private string wR7SSETTLEMENTMONTH1_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		賣方  商品１           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7SSETTLEMENTMONTH1 {
      get { return wR7SSETTLEMENTMONTH1_; }
      set {
        wR7SSETTLEMENTMONTH1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_STRIKE_PRICE_1" field.</summary>
    public const int WR7SSTRIKEPRICE1FieldNumber = 30;
    private string wR7SSTRIKEPRICE1_ = "";
    /// <summary>
    ///   PIC 9(6)V9(3).	9	9	6	3		賣方  商品１               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7SSTRIKEPRICE1 {
      get { return wR7SSTRIKEPRICE1_; }
      set {
        wR7SSTRIKEPRICE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_BUY_SELL_KIND_1" field.</summary>
    public const int WR7SBUYSELLKIND1FieldNumber = 31;
    private string wR7SBUYSELLKIND1_ = "";
    /// <summary>
    ///   PIC X(1).	1	X	1	0		賣方  商品１               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7SBUYSELLKIND1 {
      get { return wR7SBUYSELLKIND1_; }
      set {
        wR7SBUYSELLKIND1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_STOCK_CODE_1" field.</summary>
    public const int WR7SSTOCKCODE1FieldNumber = 32;
    private string wR7SSTOCKCODE1_ = "";
    /// <summary>
    ///   PIC X(07).	7	X	7	0		賣方  商品１   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7SSTOCKCODE1 {
      get { return wR7SSTOCKCODE1_; }
      set {
        wR7SSTOCKCODE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_TR_ID_2" field.</summary>
    public const int WR7STRID2FieldNumber = 33;
    private string wR7STRID2_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7STRID2 {
      get { return wR7STRID2_; }
      set {
        wR7STRID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_COMMODITY_NAME_2" field.</summary>
    public const int WR7SCOMMODITYNAME2FieldNumber = 34;
    private string wR7SCOMMODITYNAME2_ = "";
    /// <summary>
    ///  PIC X(10).	10	X	10	0		賣方  商品２                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7SCOMMODITYNAME2 {
      get { return wR7SCOMMODITYNAME2_; }
      set {
        wR7SCOMMODITYNAME2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_COMMODITY_ID_2" field.</summary>
    public const int WR7SCOMMODITYID2FieldNumber = 35;
    private string wR7SCOMMODITYID2_ = "";
    /// <summary>
    ///    PIC X(7).	7	X	7	0		賣方  商品２                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7SCOMMODITYID2 {
      get { return wR7SCOMMODITYID2_; }
      set {
        wR7SCOMMODITYID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_SETTLEMENT_MONTH_2" field.</summary>
    public const int WR7SSETTLEMENTMONTH2FieldNumber = 36;
    private string wR7SSETTLEMENTMONTH2_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		賣方  商品２           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7SSETTLEMENTMONTH2 {
      get { return wR7SSETTLEMENTMONTH2_; }
      set {
        wR7SSETTLEMENTMONTH2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_STRIKE_PRICE_2" field.</summary>
    public const int WR7SSTRIKEPRICE2FieldNumber = 37;
    private string wR7SSTRIKEPRICE2_ = "";
    /// <summary>
    ///   PIC 9(6)V9(3).	9	9	6	3		賣方  商品２               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7SSTRIKEPRICE2 {
      get { return wR7SSTRIKEPRICE2_; }
      set {
        wR7SSTRIKEPRICE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_BUY_SELL_KIND_2" field.</summary>
    public const int WR7SBUYSELLKIND2FieldNumber = 38;
    private string wR7SBUYSELLKIND2_ = "";
    /// <summary>
    ///   PIC X(1).	1	X	1	0		賣方  商品２               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7SBUYSELLKIND2 {
      get { return wR7SBUYSELLKIND2_; }
      set {
        wR7SBUYSELLKIND2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_S_STOCK_CODE_2" field.</summary>
    public const int WR7SSTOCKCODE2FieldNumber = 39;
    private string wR7SSTOCKCODE2_ = "";
    /// <summary>
    ///     PIC X(07).	7	X	7	0		賣方  商品２   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7SSTOCKCODE2 {
      get { return wR7SSTOCKCODE2_; }
      set {
        wR7SSTOCKCODE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_SUB_NOS" field.</summary>
    public const int WR7SUBNOSFieldNumber = 40;
    private string wR7SUBNOS_ = "";
    /// <summary>
    ///          PIC 9(14) COMP.	8	C	14	0		未抵繳張數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7SUBNOS {
      get { return wR7SUBNOS_; }
      set {
        wR7SUBNOS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_MARGIN_1" field.</summary>
    public const int WR7MARGIN1FieldNumber = 41;
    private string wR7MARGIN1_ = "";
    /// <summary>
    ///             PIC 9(14)V9(2) COMP.	8	C	14	2		單口保證金 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7MARGIN1 {
      get { return wR7MARGIN1_; }
      set {
        wR7MARGIN1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_MARGIN_2" field.</summary>
    public const int WR7MARGIN2FieldNumber = 42;
    private string wR7MARGIN2_ = "";
    /// <summary>
    ///            PIC 9(14)V9(2) COMP.	8	C	14	2		單口保證金 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7MARGIN2 {
      get { return wR7MARGIN2_; }
      set {
        wR7MARGIN2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_T_MARGIN" field.</summary>
    public const int WR7TMARGINFieldNumber = 43;
    private string wR7TMARGIN_ = "";
    /// <summary>
    ///           PIC 9(14)V9(2) COMP.	8	C	14	2		實收總保證金(扣除抵繳後)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7TMARGIN {
      get { return wR7TMARGIN_; }
      set {
        wR7TMARGIN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR7_MARGIN_CURRENCY" field.</summary>
    public const int WR7MARGINCURRENCYFieldNumber = 44;
    private string wR7MARGINCURRENCY_ = "";
    /// <summary>
    ///       PIC X(1).	1	X	1	0	請注意,不同幣別之金額需分開計算.	"N":台幣 "U"美金 "R":人民幣	保證金幣別	保證金幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR7MARGINCURRENCY {
      get { return wR7MARGINCURRENCY_; }
      set {
        wR7MARGINCURRENCY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER3" field.</summary>
    public const int FILLER3FieldNumber = 45;
    private string fILLER3_ = "";
    /// <summary>
    ///              PIC X(99).	99	X	99	0	SPACE	FILLSER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER3 {
      get { return fILLER3_; }
      set {
        fILLER3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemResult_EQUITY_CALL_SELLSIDE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemResult_EQUITY_CALL_SELLSIDE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WR7DATAFLAG1 != other.WR7DATAFLAG1) return false;
      if (WR7DATAFLAG2 != other.WR7DATAFLAG2) return false;
      if (WR7TRID != other.WR7TRID) return false;
      if (FILLER != other.FILLER) return false;
      if (WR7BQTY != other.WR7BQTY) return false;
      if (WR7SQTY != other.WR7SQTY) return false;
      if (FILLER1 != other.FILLER1) return false;
      if (WR7QTY != other.WR7QTY) return false;
      if (WR7NOS != other.WR7NOS) return false;
      if (WR7STRATEGYCODE != other.WR7STRATEGYCODE) return false;
      if (FILLER2 != other.FILLER2) return false;
      if (WR7BTRID1 != other.WR7BTRID1) return false;
      if (WR7BCOMMODITYNAME1 != other.WR7BCOMMODITYNAME1) return false;
      if (WR7BCOMMODITYID1 != other.WR7BCOMMODITYID1) return false;
      if (WR7BSETTLEMENTMONTH1 != other.WR7BSETTLEMENTMONTH1) return false;
      if (WR7BSTRIKEPRICE1 != other.WR7BSTRIKEPRICE1) return false;
      if (WR7BBUYSELLKIND1 != other.WR7BBUYSELLKIND1) return false;
      if (WR7BSTOCKCODE1 != other.WR7BSTOCKCODE1) return false;
      if (WR7BTRID2 != other.WR7BTRID2) return false;
      if (WR7BCOMMODITYNAME2 != other.WR7BCOMMODITYNAME2) return false;
      if (WR7BCOMMODITYID2 != other.WR7BCOMMODITYID2) return false;
      if (WR7BSETTLEMENTMONTH2 != other.WR7BSETTLEMENTMONTH2) return false;
      if (WR7BSTRIKEPRICE2 != other.WR7BSTRIKEPRICE2) return false;
      if (WR7BBUYSELLKIND2 != other.WR7BBUYSELLKIND2) return false;
      if (WR7BSTOCKCODE2 != other.WR7BSTOCKCODE2) return false;
      if (WR7STRID1 != other.WR7STRID1) return false;
      if (WR7SCOMMODITYNAME1 != other.WR7SCOMMODITYNAME1) return false;
      if (WR7SCOMMODITYID1 != other.WR7SCOMMODITYID1) return false;
      if (WR7SSETTLEMENTMONTH1 != other.WR7SSETTLEMENTMONTH1) return false;
      if (WR7SSTRIKEPRICE1 != other.WR7SSTRIKEPRICE1) return false;
      if (WR7SBUYSELLKIND1 != other.WR7SBUYSELLKIND1) return false;
      if (WR7SSTOCKCODE1 != other.WR7SSTOCKCODE1) return false;
      if (WR7STRID2 != other.WR7STRID2) return false;
      if (WR7SCOMMODITYNAME2 != other.WR7SCOMMODITYNAME2) return false;
      if (WR7SCOMMODITYID2 != other.WR7SCOMMODITYID2) return false;
      if (WR7SSETTLEMENTMONTH2 != other.WR7SSETTLEMENTMONTH2) return false;
      if (WR7SSTRIKEPRICE2 != other.WR7SSTRIKEPRICE2) return false;
      if (WR7SBUYSELLKIND2 != other.WR7SBUYSELLKIND2) return false;
      if (WR7SSTOCKCODE2 != other.WR7SSTOCKCODE2) return false;
      if (WR7SUBNOS != other.WR7SUBNOS) return false;
      if (WR7MARGIN1 != other.WR7MARGIN1) return false;
      if (WR7MARGIN2 != other.WR7MARGIN2) return false;
      if (WR7TMARGIN != other.WR7TMARGIN) return false;
      if (WR7MARGINCURRENCY != other.WR7MARGINCURRENCY) return false;
      if (FILLER3 != other.FILLER3) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WR7DATAFLAG1.Length != 0) hash ^= WR7DATAFLAG1.GetHashCode();
      if (WR7DATAFLAG2.Length != 0) hash ^= WR7DATAFLAG2.GetHashCode();
      if (WR7TRID.Length != 0) hash ^= WR7TRID.GetHashCode();
      if (FILLER.Length != 0) hash ^= FILLER.GetHashCode();
      if (WR7BQTY.Length != 0) hash ^= WR7BQTY.GetHashCode();
      if (WR7SQTY.Length != 0) hash ^= WR7SQTY.GetHashCode();
      if (FILLER1.Length != 0) hash ^= FILLER1.GetHashCode();
      if (WR7QTY.Length != 0) hash ^= WR7QTY.GetHashCode();
      if (WR7NOS.Length != 0) hash ^= WR7NOS.GetHashCode();
      if (WR7STRATEGYCODE.Length != 0) hash ^= WR7STRATEGYCODE.GetHashCode();
      if (FILLER2.Length != 0) hash ^= FILLER2.GetHashCode();
      if (WR7BTRID1.Length != 0) hash ^= WR7BTRID1.GetHashCode();
      if (WR7BCOMMODITYNAME1.Length != 0) hash ^= WR7BCOMMODITYNAME1.GetHashCode();
      if (WR7BCOMMODITYID1.Length != 0) hash ^= WR7BCOMMODITYID1.GetHashCode();
      if (WR7BSETTLEMENTMONTH1.Length != 0) hash ^= WR7BSETTLEMENTMONTH1.GetHashCode();
      if (WR7BSTRIKEPRICE1.Length != 0) hash ^= WR7BSTRIKEPRICE1.GetHashCode();
      if (WR7BBUYSELLKIND1.Length != 0) hash ^= WR7BBUYSELLKIND1.GetHashCode();
      if (WR7BSTOCKCODE1.Length != 0) hash ^= WR7BSTOCKCODE1.GetHashCode();
      if (WR7BTRID2.Length != 0) hash ^= WR7BTRID2.GetHashCode();
      if (WR7BCOMMODITYNAME2.Length != 0) hash ^= WR7BCOMMODITYNAME2.GetHashCode();
      if (WR7BCOMMODITYID2.Length != 0) hash ^= WR7BCOMMODITYID2.GetHashCode();
      if (WR7BSETTLEMENTMONTH2.Length != 0) hash ^= WR7BSETTLEMENTMONTH2.GetHashCode();
      if (WR7BSTRIKEPRICE2.Length != 0) hash ^= WR7BSTRIKEPRICE2.GetHashCode();
      if (WR7BBUYSELLKIND2.Length != 0) hash ^= WR7BBUYSELLKIND2.GetHashCode();
      if (WR7BSTOCKCODE2.Length != 0) hash ^= WR7BSTOCKCODE2.GetHashCode();
      if (WR7STRID1.Length != 0) hash ^= WR7STRID1.GetHashCode();
      if (WR7SCOMMODITYNAME1.Length != 0) hash ^= WR7SCOMMODITYNAME1.GetHashCode();
      if (WR7SCOMMODITYID1.Length != 0) hash ^= WR7SCOMMODITYID1.GetHashCode();
      if (WR7SSETTLEMENTMONTH1.Length != 0) hash ^= WR7SSETTLEMENTMONTH1.GetHashCode();
      if (WR7SSTRIKEPRICE1.Length != 0) hash ^= WR7SSTRIKEPRICE1.GetHashCode();
      if (WR7SBUYSELLKIND1.Length != 0) hash ^= WR7SBUYSELLKIND1.GetHashCode();
      if (WR7SSTOCKCODE1.Length != 0) hash ^= WR7SSTOCKCODE1.GetHashCode();
      if (WR7STRID2.Length != 0) hash ^= WR7STRID2.GetHashCode();
      if (WR7SCOMMODITYNAME2.Length != 0) hash ^= WR7SCOMMODITYNAME2.GetHashCode();
      if (WR7SCOMMODITYID2.Length != 0) hash ^= WR7SCOMMODITYID2.GetHashCode();
      if (WR7SSETTLEMENTMONTH2.Length != 0) hash ^= WR7SSETTLEMENTMONTH2.GetHashCode();
      if (WR7SSTRIKEPRICE2.Length != 0) hash ^= WR7SSTRIKEPRICE2.GetHashCode();
      if (WR7SBUYSELLKIND2.Length != 0) hash ^= WR7SBUYSELLKIND2.GetHashCode();
      if (WR7SSTOCKCODE2.Length != 0) hash ^= WR7SSTOCKCODE2.GetHashCode();
      if (WR7SUBNOS.Length != 0) hash ^= WR7SUBNOS.GetHashCode();
      if (WR7MARGIN1.Length != 0) hash ^= WR7MARGIN1.GetHashCode();
      if (WR7MARGIN2.Length != 0) hash ^= WR7MARGIN2.GetHashCode();
      if (WR7TMARGIN.Length != 0) hash ^= WR7TMARGIN.GetHashCode();
      if (WR7MARGINCURRENCY.Length != 0) hash ^= WR7MARGINCURRENCY.GetHashCode();
      if (FILLER3.Length != 0) hash ^= FILLER3.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WR7DATAFLAG1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WR7DATAFLAG1);
      }
      if (WR7DATAFLAG2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WR7DATAFLAG2);
      }
      if (WR7TRID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WR7TRID);
      }
      if (FILLER.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FILLER);
      }
      if (WR7BQTY.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WR7BQTY);
      }
      if (WR7SQTY.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WR7SQTY);
      }
      if (FILLER1.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FILLER1);
      }
      if (WR7QTY.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WR7QTY);
      }
      if (WR7NOS.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WR7NOS);
      }
      if (WR7STRATEGYCODE.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WR7STRATEGYCODE);
      }
      if (FILLER2.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(FILLER2);
      }
      if (WR7BTRID1.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WR7BTRID1);
      }
      if (WR7BCOMMODITYNAME1.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WR7BCOMMODITYNAME1);
      }
      if (WR7BCOMMODITYID1.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(WR7BCOMMODITYID1);
      }
      if (WR7BSETTLEMENTMONTH1.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(WR7BSETTLEMENTMONTH1);
      }
      if (WR7BSTRIKEPRICE1.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WR7BSTRIKEPRICE1);
      }
      if (WR7BBUYSELLKIND1.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(WR7BBUYSELLKIND1);
      }
      if (WR7BSTOCKCODE1.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(WR7BSTOCKCODE1);
      }
      if (WR7BTRID2.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(WR7BTRID2);
      }
      if (WR7BCOMMODITYNAME2.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WR7BCOMMODITYNAME2);
      }
      if (WR7BCOMMODITYID2.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(WR7BCOMMODITYID2);
      }
      if (WR7BSETTLEMENTMONTH2.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(WR7BSETTLEMENTMONTH2);
      }
      if (WR7BSTRIKEPRICE2.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(WR7BSTRIKEPRICE2);
      }
      if (WR7BBUYSELLKIND2.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(WR7BBUYSELLKIND2);
      }
      if (WR7BSTOCKCODE2.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(WR7BSTOCKCODE2);
      }
      if (WR7STRID1.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(WR7STRID1);
      }
      if (WR7SCOMMODITYNAME1.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(WR7SCOMMODITYNAME1);
      }
      if (WR7SCOMMODITYID1.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(WR7SCOMMODITYID1);
      }
      if (WR7SSETTLEMENTMONTH1.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(WR7SSETTLEMENTMONTH1);
      }
      if (WR7SSTRIKEPRICE1.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(WR7SSTRIKEPRICE1);
      }
      if (WR7SBUYSELLKIND1.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(WR7SBUYSELLKIND1);
      }
      if (WR7SSTOCKCODE1.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(WR7SSTOCKCODE1);
      }
      if (WR7STRID2.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(WR7STRID2);
      }
      if (WR7SCOMMODITYNAME2.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(WR7SCOMMODITYNAME2);
      }
      if (WR7SCOMMODITYID2.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(WR7SCOMMODITYID2);
      }
      if (WR7SSETTLEMENTMONTH2.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(WR7SSETTLEMENTMONTH2);
      }
      if (WR7SSTRIKEPRICE2.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(WR7SSTRIKEPRICE2);
      }
      if (WR7SBUYSELLKIND2.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(WR7SBUYSELLKIND2);
      }
      if (WR7SSTOCKCODE2.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(WR7SSTOCKCODE2);
      }
      if (WR7SUBNOS.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(WR7SUBNOS);
      }
      if (WR7MARGIN1.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(WR7MARGIN1);
      }
      if (WR7MARGIN2.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(WR7MARGIN2);
      }
      if (WR7TMARGIN.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(WR7TMARGIN);
      }
      if (WR7MARGINCURRENCY.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(WR7MARGINCURRENCY);
      }
      if (FILLER3.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(FILLER3);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WR7DATAFLAG1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR7DATAFLAG1);
      }
      if (WR7DATAFLAG2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR7DATAFLAG2);
      }
      if (WR7TRID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR7TRID);
      }
      if (FILLER.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FILLER);
      }
      if (WR7BQTY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR7BQTY);
      }
      if (WR7SQTY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR7SQTY);
      }
      if (FILLER1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FILLER1);
      }
      if (WR7QTY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR7QTY);
      }
      if (WR7NOS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR7NOS);
      }
      if (WR7STRATEGYCODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR7STRATEGYCODE);
      }
      if (FILLER2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FILLER2);
      }
      if (WR7BTRID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR7BTRID1);
      }
      if (WR7BCOMMODITYNAME1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR7BCOMMODITYNAME1);
      }
      if (WR7BCOMMODITYID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR7BCOMMODITYID1);
      }
      if (WR7BSETTLEMENTMONTH1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR7BSETTLEMENTMONTH1);
      }
      if (WR7BSTRIKEPRICE1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7BSTRIKEPRICE1);
      }
      if (WR7BBUYSELLKIND1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7BBUYSELLKIND1);
      }
      if (WR7BSTOCKCODE1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7BSTOCKCODE1);
      }
      if (WR7BTRID2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7BTRID2);
      }
      if (WR7BCOMMODITYNAME2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7BCOMMODITYNAME2);
      }
      if (WR7BCOMMODITYID2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7BCOMMODITYID2);
      }
      if (WR7BSETTLEMENTMONTH2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7BSETTLEMENTMONTH2);
      }
      if (WR7BSTRIKEPRICE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7BSTRIKEPRICE2);
      }
      if (WR7BBUYSELLKIND2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7BBUYSELLKIND2);
      }
      if (WR7BSTOCKCODE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7BSTOCKCODE2);
      }
      if (WR7STRID1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7STRID1);
      }
      if (WR7SCOMMODITYNAME1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7SCOMMODITYNAME1);
      }
      if (WR7SCOMMODITYID1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7SCOMMODITYID1);
      }
      if (WR7SSETTLEMENTMONTH1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7SSETTLEMENTMONTH1);
      }
      if (WR7SSTRIKEPRICE1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7SSTRIKEPRICE1);
      }
      if (WR7SBUYSELLKIND1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7SBUYSELLKIND1);
      }
      if (WR7SSTOCKCODE1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7SSTOCKCODE1);
      }
      if (WR7STRID2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7STRID2);
      }
      if (WR7SCOMMODITYNAME2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7SCOMMODITYNAME2);
      }
      if (WR7SCOMMODITYID2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7SCOMMODITYID2);
      }
      if (WR7SSETTLEMENTMONTH2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7SSETTLEMENTMONTH2);
      }
      if (WR7SSTRIKEPRICE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7SSTRIKEPRICE2);
      }
      if (WR7SBUYSELLKIND2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7SBUYSELLKIND2);
      }
      if (WR7SSTOCKCODE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7SSTOCKCODE2);
      }
      if (WR7SUBNOS.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7SUBNOS);
      }
      if (WR7MARGIN1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7MARGIN1);
      }
      if (WR7MARGIN2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7MARGIN2);
      }
      if (WR7TMARGIN.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7TMARGIN);
      }
      if (WR7MARGINCURRENCY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR7MARGINCURRENCY);
      }
      if (FILLER3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER3);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemResult_EQUITY_CALL_SELLSIDE other) {
      if (other == null) {
        return;
      }
      if (other.WR7DATAFLAG1.Length != 0) {
        WR7DATAFLAG1 = other.WR7DATAFLAG1;
      }
      if (other.WR7DATAFLAG2.Length != 0) {
        WR7DATAFLAG2 = other.WR7DATAFLAG2;
      }
      if (other.WR7TRID.Length != 0) {
        WR7TRID = other.WR7TRID;
      }
      if (other.FILLER.Length != 0) {
        FILLER = other.FILLER;
      }
      if (other.WR7BQTY.Length != 0) {
        WR7BQTY = other.WR7BQTY;
      }
      if (other.WR7SQTY.Length != 0) {
        WR7SQTY = other.WR7SQTY;
      }
      if (other.FILLER1.Length != 0) {
        FILLER1 = other.FILLER1;
      }
      if (other.WR7QTY.Length != 0) {
        WR7QTY = other.WR7QTY;
      }
      if (other.WR7NOS.Length != 0) {
        WR7NOS = other.WR7NOS;
      }
      if (other.WR7STRATEGYCODE.Length != 0) {
        WR7STRATEGYCODE = other.WR7STRATEGYCODE;
      }
      if (other.FILLER2.Length != 0) {
        FILLER2 = other.FILLER2;
      }
      if (other.WR7BTRID1.Length != 0) {
        WR7BTRID1 = other.WR7BTRID1;
      }
      if (other.WR7BCOMMODITYNAME1.Length != 0) {
        WR7BCOMMODITYNAME1 = other.WR7BCOMMODITYNAME1;
      }
      if (other.WR7BCOMMODITYID1.Length != 0) {
        WR7BCOMMODITYID1 = other.WR7BCOMMODITYID1;
      }
      if (other.WR7BSETTLEMENTMONTH1.Length != 0) {
        WR7BSETTLEMENTMONTH1 = other.WR7BSETTLEMENTMONTH1;
      }
      if (other.WR7BSTRIKEPRICE1.Length != 0) {
        WR7BSTRIKEPRICE1 = other.WR7BSTRIKEPRICE1;
      }
      if (other.WR7BBUYSELLKIND1.Length != 0) {
        WR7BBUYSELLKIND1 = other.WR7BBUYSELLKIND1;
      }
      if (other.WR7BSTOCKCODE1.Length != 0) {
        WR7BSTOCKCODE1 = other.WR7BSTOCKCODE1;
      }
      if (other.WR7BTRID2.Length != 0) {
        WR7BTRID2 = other.WR7BTRID2;
      }
      if (other.WR7BCOMMODITYNAME2.Length != 0) {
        WR7BCOMMODITYNAME2 = other.WR7BCOMMODITYNAME2;
      }
      if (other.WR7BCOMMODITYID2.Length != 0) {
        WR7BCOMMODITYID2 = other.WR7BCOMMODITYID2;
      }
      if (other.WR7BSETTLEMENTMONTH2.Length != 0) {
        WR7BSETTLEMENTMONTH2 = other.WR7BSETTLEMENTMONTH2;
      }
      if (other.WR7BSTRIKEPRICE2.Length != 0) {
        WR7BSTRIKEPRICE2 = other.WR7BSTRIKEPRICE2;
      }
      if (other.WR7BBUYSELLKIND2.Length != 0) {
        WR7BBUYSELLKIND2 = other.WR7BBUYSELLKIND2;
      }
      if (other.WR7BSTOCKCODE2.Length != 0) {
        WR7BSTOCKCODE2 = other.WR7BSTOCKCODE2;
      }
      if (other.WR7STRID1.Length != 0) {
        WR7STRID1 = other.WR7STRID1;
      }
      if (other.WR7SCOMMODITYNAME1.Length != 0) {
        WR7SCOMMODITYNAME1 = other.WR7SCOMMODITYNAME1;
      }
      if (other.WR7SCOMMODITYID1.Length != 0) {
        WR7SCOMMODITYID1 = other.WR7SCOMMODITYID1;
      }
      if (other.WR7SSETTLEMENTMONTH1.Length != 0) {
        WR7SSETTLEMENTMONTH1 = other.WR7SSETTLEMENTMONTH1;
      }
      if (other.WR7SSTRIKEPRICE1.Length != 0) {
        WR7SSTRIKEPRICE1 = other.WR7SSTRIKEPRICE1;
      }
      if (other.WR7SBUYSELLKIND1.Length != 0) {
        WR7SBUYSELLKIND1 = other.WR7SBUYSELLKIND1;
      }
      if (other.WR7SSTOCKCODE1.Length != 0) {
        WR7SSTOCKCODE1 = other.WR7SSTOCKCODE1;
      }
      if (other.WR7STRID2.Length != 0) {
        WR7STRID2 = other.WR7STRID2;
      }
      if (other.WR7SCOMMODITYNAME2.Length != 0) {
        WR7SCOMMODITYNAME2 = other.WR7SCOMMODITYNAME2;
      }
      if (other.WR7SCOMMODITYID2.Length != 0) {
        WR7SCOMMODITYID2 = other.WR7SCOMMODITYID2;
      }
      if (other.WR7SSETTLEMENTMONTH2.Length != 0) {
        WR7SSETTLEMENTMONTH2 = other.WR7SSETTLEMENTMONTH2;
      }
      if (other.WR7SSTRIKEPRICE2.Length != 0) {
        WR7SSTRIKEPRICE2 = other.WR7SSTRIKEPRICE2;
      }
      if (other.WR7SBUYSELLKIND2.Length != 0) {
        WR7SBUYSELLKIND2 = other.WR7SBUYSELLKIND2;
      }
      if (other.WR7SSTOCKCODE2.Length != 0) {
        WR7SSTOCKCODE2 = other.WR7SSTOCKCODE2;
      }
      if (other.WR7SUBNOS.Length != 0) {
        WR7SUBNOS = other.WR7SUBNOS;
      }
      if (other.WR7MARGIN1.Length != 0) {
        WR7MARGIN1 = other.WR7MARGIN1;
      }
      if (other.WR7MARGIN2.Length != 0) {
        WR7MARGIN2 = other.WR7MARGIN2;
      }
      if (other.WR7TMARGIN.Length != 0) {
        WR7TMARGIN = other.WR7TMARGIN;
      }
      if (other.WR7MARGINCURRENCY.Length != 0) {
        WR7MARGINCURRENCY = other.WR7MARGINCURRENCY;
      }
      if (other.FILLER3.Length != 0) {
        FILLER3 = other.FILLER3;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WR7DATAFLAG1 = input.ReadString();
            break;
          }
          case 18: {
            WR7DATAFLAG2 = input.ReadString();
            break;
          }
          case 26: {
            WR7TRID = input.ReadString();
            break;
          }
          case 34: {
            FILLER = input.ReadString();
            break;
          }
          case 42: {
            WR7BQTY = input.ReadString();
            break;
          }
          case 50: {
            WR7SQTY = input.ReadString();
            break;
          }
          case 58: {
            FILLER1 = input.ReadString();
            break;
          }
          case 66: {
            WR7QTY = input.ReadString();
            break;
          }
          case 74: {
            WR7NOS = input.ReadString();
            break;
          }
          case 82: {
            WR7STRATEGYCODE = input.ReadString();
            break;
          }
          case 90: {
            FILLER2 = input.ReadString();
            break;
          }
          case 98: {
            WR7BTRID1 = input.ReadString();
            break;
          }
          case 106: {
            WR7BCOMMODITYNAME1 = input.ReadString();
            break;
          }
          case 114: {
            WR7BCOMMODITYID1 = input.ReadString();
            break;
          }
          case 122: {
            WR7BSETTLEMENTMONTH1 = input.ReadString();
            break;
          }
          case 130: {
            WR7BSTRIKEPRICE1 = input.ReadString();
            break;
          }
          case 138: {
            WR7BBUYSELLKIND1 = input.ReadString();
            break;
          }
          case 146: {
            WR7BSTOCKCODE1 = input.ReadString();
            break;
          }
          case 154: {
            WR7BTRID2 = input.ReadString();
            break;
          }
          case 162: {
            WR7BCOMMODITYNAME2 = input.ReadString();
            break;
          }
          case 170: {
            WR7BCOMMODITYID2 = input.ReadString();
            break;
          }
          case 178: {
            WR7BSETTLEMENTMONTH2 = input.ReadString();
            break;
          }
          case 186: {
            WR7BSTRIKEPRICE2 = input.ReadString();
            break;
          }
          case 194: {
            WR7BBUYSELLKIND2 = input.ReadString();
            break;
          }
          case 202: {
            WR7BSTOCKCODE2 = input.ReadString();
            break;
          }
          case 210: {
            WR7STRID1 = input.ReadString();
            break;
          }
          case 218: {
            WR7SCOMMODITYNAME1 = input.ReadString();
            break;
          }
          case 226: {
            WR7SCOMMODITYID1 = input.ReadString();
            break;
          }
          case 234: {
            WR7SSETTLEMENTMONTH1 = input.ReadString();
            break;
          }
          case 242: {
            WR7SSTRIKEPRICE1 = input.ReadString();
            break;
          }
          case 250: {
            WR7SBUYSELLKIND1 = input.ReadString();
            break;
          }
          case 258: {
            WR7SSTOCKCODE1 = input.ReadString();
            break;
          }
          case 266: {
            WR7STRID2 = input.ReadString();
            break;
          }
          case 274: {
            WR7SCOMMODITYNAME2 = input.ReadString();
            break;
          }
          case 282: {
            WR7SCOMMODITYID2 = input.ReadString();
            break;
          }
          case 290: {
            WR7SSETTLEMENTMONTH2 = input.ReadString();
            break;
          }
          case 298: {
            WR7SSTRIKEPRICE2 = input.ReadString();
            break;
          }
          case 306: {
            WR7SBUYSELLKIND2 = input.ReadString();
            break;
          }
          case 314: {
            WR7SSTOCKCODE2 = input.ReadString();
            break;
          }
          case 322: {
            WR7SUBNOS = input.ReadString();
            break;
          }
          case 330: {
            WR7MARGIN1 = input.ReadString();
            break;
          }
          case 338: {
            WR7MARGIN2 = input.ReadString();
            break;
          }
          case 346: {
            WR7TMARGIN = input.ReadString();
            break;
          }
          case 354: {
            WR7MARGINCURRENCY = input.ReadString();
            break;
          }
          case 362: {
            FILLER3 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// => 8 各幣查詢 (WR_READ_DATA) 明細格式如下 : (400 bytes)
  /// </summary>
  public sealed partial class TandemResult_CURRENCY : pb::IMessage<TandemResult_CURRENCY> {
    private static readonly pb::MessageParser<TandemResult_CURRENCY> _parser = new pb::MessageParser<TandemResult_CURRENCY>(() => new TandemResult_CURRENCY());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemResult_CURRENCY> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_CURRENCY() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_CURRENCY(TandemResult_CURRENCY other) : this() {
      wR8DATAFLAG1_ = other.wR8DATAFLAG1_;
      wR8DATAFLAG2_ = other.wR8DATAFLAG2_;
      wR8TRANRATE_ = other.wR8TRANRATE_;
      wR8CURRENCY_ = other.wR8CURRENCY_;
      wR8MAINTAINRATE_ = other.wR8MAINTAINRATE_;
      wR8ACCOUNTEQUITY_ = other.wR8ACCOUNTEQUITY_;
      wR8INOUTAMT_ = other.wR8INOUTAMT_;
      wR8USABLEMARGIN_ = other.wR8USABLEMARGIN_;
      wR8COVERINCOME_ = other.wR8COVERINCOME_;
      wR8INITIALMARGIN_ = other.wR8INITIALMARGIN_;
      wR8MAINTAINMARGIN_ = other.wR8MAINTAINMARGIN_;
      wR8VARINCOME_ = other.wR8VARINCOME_;
      wR8ACCOUNTBALANCE_ = other.wR8ACCOUNTBALANCE_;
      wR8REALIZEPREMIUM_ = other.wR8REALIZEPREMIUM_;
      wR8UNREALIZEPREMIUM_ = other.wR8UNREALIZEPREMIUM_;
      wR8BOPTIONVALUE_ = other.wR8BOPTIONVALUE_;
      wR8SOPTIONVALUE_ = other.wR8SOPTIONVALUE_;
      wR8YESEQU_ = other.wR8YESEQU_;
      wR8YESACCOUNTBALANCE_ = other.wR8YESACCOUNTBALANCE_;
      wR8TODAYFEE_ = other.wR8TODAYFEE_;
      wR8TODAYTAX_ = other.wR8TODAYTAX_;
      wR8EQUITY_ = other.wR8EQUITY_;
      wR8RISKRATE_ = other.wR8RISKRATE_;
      wR8COVERRATE_ = other.wR8COVERRATE_;
      wR8FULLMARGIN_ = other.wR8FULLMARGIN_;
      wR8FULLMAINTAINMARGIN_ = other.wR8FULLMAINTAINMARGIN_;
      wR8FULLUSABLEMARGIN_ = other.wR8FULLUSABLEMARGIN_;
      wR8FULLRATE_ = other.wR8FULLRATE_;
      wR8FULLRISKRATE_ = other.wR8FULLRISKRATE_;
      wR8TRANRATE6_ = other.wR8TRANRATE6_;
      wR8COVEREDAMT_ = other.wR8COVEREDAMT_;
      wR8AADDCOVEREDUSABLE_ = other.wR8AADDCOVEREDUSABLE_;
      wR8ACASHUSABLE_ = other.wR8ACASHUSABLE_;
      wR8YESTOTEQUITY_ = other.wR8YESTOTEQUITY_;
      wR8UNREALIZEDINCOME_ = other.wR8UNREALIZEDINCOME_;
      wR8OOLDUSEDMARGIN_ = other.wR8OOLDUSEDMARGIN_;
      wR8OMAINTAINMARGIN_ = other.wR8OMAINTAINMARGIN_;
      wR8OFULLMARGIN_ = other.wR8OFULLMARGIN_;
      wR8OFULLMAINTAIN_ = other.wR8OFULLMAINTAIN_;
      wR8ADDITIONMARGIN_ = other.wR8ADDITIONMARGIN_;
      wR8NOMARGIN_ = other.wR8NOMARGIN_;
      wR8PROMPTAMT_ = other.wR8PROMPTAMT_;
      fILLER_ = other.fILLER_;
      fILLER2_ = other.fILLER2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_CURRENCY Clone() {
      return new TandemResult_CURRENCY(this);
    }

    /// <summary>Field number for the "WR8_DATA_FLAG_1" field.</summary>
    public const int WR8DATAFLAG1FieldNumber = 1;
    private string wR8DATAFLAG1_ = "";
    /// <summary>
    ///             PIC X(1).	1	X	1	0	8:各幣查詢	資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8DATAFLAG1 {
      get { return wR8DATAFLAG1_; }
      set {
        wR8DATAFLAG1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_DATA_FLAG_2" field.</summary>
    public const int WR8DATAFLAG2FieldNumber = 2;
    private string wR8DATAFLAG2_ = "";
    /// <summary>
    ///           PIC X(1).	1	X	1	0	     1:首筆 	子資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8DATAFLAG2 {
      get { return wR8DATAFLAG2_; }
      set {
        wR8DATAFLAG2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_TRAN_RATE" field.</summary>
    public const int WR8TRANRATEFieldNumber = 3;
    private string wR8TRANRATE_ = "";
    /// <summary>
    ///              PIC S9(6)V9(4) COMP.	8	C	6	4	本欄位即將作廢(預計為下次改版),且沿用此欄位將會少顯示兩位小數點,請各單位擇期放棄WR8_TRAN_RATE,改用WR8_TRAN_RATE_6才不會讓匯率有顯示上的誤差	轉換匯率(本版仍可使用,但是即將作廢)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8TRANRATE {
      get { return wR8TRANRATE_; }
      set {
        wR8TRANRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_CURRENCY" field.</summary>
    public const int WR8CURRENCYFieldNumber = 4;
    private string wR8CURRENCY_ = "";
    /// <summary>
    ///              PIC X(3).	3	X	3	0	"幣別:ZZZ表約當美金      ZZY表不含人民幣之基幣    ""A"":澳幣 ""E"":毆元 ""G"":英鎊 ""H"":港幣 ""J"":日圓 ""N"":新台幣 ""U"":美元 R:人民幣"	幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8CURRENCY {
      get { return wR8CURRENCY_; }
      set {
        wR8CURRENCY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_MAINTAIN_RATE" field.</summary>
    public const int WR8MAINTAINRATEFieldNumber = 5;
    private string wR8MAINTAINRATE_ = "";
    /// <summary>
    ///        PIC X(9).	9	X	9	0		維持率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8MAINTAINRATE {
      get { return wR8MAINTAINRATE_; }
      set {
        wR8MAINTAINRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_ACCOUNT_EQUITY" field.</summary>
    public const int WR8ACCOUNTEQUITYFieldNumber = 6;
    private string wR8ACCOUNTEQUITY_ = "";
    /// <summary>
    ///        PIC S9(14)V9(2) COMP.	8	C	14	2		權益數(帳戶權益)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8ACCOUNTEQUITY {
      get { return wR8ACCOUNTEQUITY_; }
      set {
        wR8ACCOUNTEQUITY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_IN_OUT_AMT" field.</summary>
    public const int WR8INOUTAMTFieldNumber = 7;
    private string wR8INOUTAMT_ = "";
    /// <summary>
    ///             PIC S9(14)V9(2) COMP.	8	C	14	2		今日存提款
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8INOUTAMT {
      get { return wR8INOUTAMT_; }
      set {
        wR8INOUTAMT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_USABLE_MARGIN" field.</summary>
    public const int WR8USABLEMARGINFieldNumber = 8;
    private string wR8USABLEMARGIN_ = "";
    /// <summary>
    ///            PIC S9(14)V9(2) COMP.	8	C	14	2		可動用保證金(可用餘額)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8USABLEMARGIN {
      get { return wR8USABLEMARGIN_; }
      set {
        wR8USABLEMARGIN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_COVER_INCOME" field.</summary>
    public const int WR8COVERINCOMEFieldNumber = 9;
    private string wR8COVERINCOME_ = "";
    /// <summary>
    ///             PIC S9(14)V9(2) COMP.	8	C	14	2		平倉損益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8COVERINCOME {
      get { return wR8COVERINCOME_; }
      set {
        wR8COVERINCOME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_INITIAL_MARGIN" field.</summary>
    public const int WR8INITIALMARGINFieldNumber = 10;
    private string wR8INITIALMARGIN_ = "";
    /// <summary>
    ///           PIC S9(14)V9(2) COMP.	8	C	14	2		原始保証金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8INITIALMARGIN {
      get { return wR8INITIALMARGIN_; }
      set {
        wR8INITIALMARGIN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_MAINTAIN_MARGIN" field.</summary>
    public const int WR8MAINTAINMARGINFieldNumber = 11;
    private string wR8MAINTAINMARGIN_ = "";
    /// <summary>
    ///           PIC S9(14)V9(2) COMP.	8	C	14	2		維持保証金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8MAINTAINMARGIN {
      get { return wR8MAINTAINMARGIN_; }
      set {
        wR8MAINTAINMARGIN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_VAR_INCOME" field.</summary>
    public const int WR8VARINCOMEFieldNumber = 12;
    private string wR8VARINCOME_ = "";
    /// <summary>
    ///            PIC S9(14)V9(2) COMP.	8	C	14	2		期貨浮動損益(浮動損益)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8VARINCOME {
      get { return wR8VARINCOME_; }
      set {
        wR8VARINCOME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_ACCOUNT_BALANCE" field.</summary>
    public const int WR8ACCOUNTBALANCEFieldNumber = 13;
    private string wR8ACCOUNTBALANCE_ = "";
    /// <summary>
    ///          PIC S9(14)V9(2) COMP.	8	C	14	2		本日餘額(帳戶餘額)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8ACCOUNTBALANCE {
      get { return wR8ACCOUNTBALANCE_; }
      set {
        wR8ACCOUNTBALANCE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_REALIZE_PREMIUM" field.</summary>
    public const int WR8REALIZEPREMIUMFieldNumber = 14;
    private string wR8REALIZEPREMIUM_ = "";
    /// <summary>
    ///         PIC S9(14)V9(2) COMP.	8	C	14	2		權利金收入與支出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8REALIZEPREMIUM {
      get { return wR8REALIZEPREMIUM_; }
      set {
        wR8REALIZEPREMIUM_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_UNREALIZE_PREMIUM" field.</summary>
    public const int WR8UNREALIZEPREMIUMFieldNumber = 15;
    private string wR8UNREALIZEPREMIUM_ = "";
    /// <summary>
    ///         PIC S9(14)V9(2) COMP.	8	C	14	2		委託權利金(預扣權利金)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8UNREALIZEPREMIUM {
      get { return wR8UNREALIZEPREMIUM_; }
      set {
        wR8UNREALIZEPREMIUM_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_B_OPTION_VALUE" field.</summary>
    public const int WR8BOPTIONVALUEFieldNumber = 16;
    private string wR8BOPTIONVALUE_ = "";
    /// <summary>
    ///          PIC S9(14)V9(2) COMP.	8	C	14	2		買方市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8BOPTIONVALUE {
      get { return wR8BOPTIONVALUE_; }
      set {
        wR8BOPTIONVALUE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_S_OPTION_VALUE" field.</summary>
    public const int WR8SOPTIONVALUEFieldNumber = 17;
    private string wR8SOPTIONVALUE_ = "";
    /// <summary>
    ///          PIC S9(14)V9(2) COMP.	8	C	14	2		賣方市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8SOPTIONVALUE {
      get { return wR8SOPTIONVALUE_; }
      set {
        wR8SOPTIONVALUE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_YES_EQU" field.</summary>
    public const int WR8YESEQUFieldNumber = 18;
    private string wR8YESEQU_ = "";
    /// <summary>
    ///             PIC S9(14)V9(2) COMP.	8	C	14	2		前日權益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8YESEQU {
      get { return wR8YESEQU_; }
      set {
        wR8YESEQU_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_YES_ACCOUNT_BALANCE" field.</summary>
    public const int WR8YESACCOUNTBALANCEFieldNumber = 19;
    private string wR8YESACCOUNTBALANCE_ = "";
    /// <summary>
    ///      PIC S9(14)V9(2) COMP.  8	C	14	2		前日帳戶餘額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8YESACCOUNTBALANCE {
      get { return wR8YESACCOUNTBALANCE_; }
      set {
        wR8YESACCOUNTBALANCE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_TODAY_FEE" field.</summary>
    public const int WR8TODAYFEEFieldNumber = 20;
    private string wR8TODAYFEE_ = "";
    /// <summary>
    ///              PIC S9(14)V9(2) COMP.	8	C	14	2		今日已實現費用(今日總手續費)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8TODAYFEE {
      get { return wR8TODAYFEE_; }
      set {
        wR8TODAYFEE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_TODAY_TAX" field.</summary>
    public const int WR8TODAYTAXFieldNumber = 21;
    private string wR8TODAYTAX_ = "";
    /// <summary>
    ///              PIC S9(14)V9(2) COMP.	8	C	14	2		今日總交易稅
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8TODAYTAX {
      get { return wR8TODAYTAX_; }
      set {
        wR8TODAYTAX_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_EQUITY" field.</summary>
    public const int WR8EQUITYFieldNumber = 22;
    private string wR8EQUITY_ = "";
    /// <summary>
    ///                  PIC S9(14)V9(2) COMP.  8	C	14	2		權益總值(客戶權益總市值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8EQUITY {
      get { return wR8EQUITY_; }
      set {
        wR8EQUITY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_RISK_RATE" field.</summary>
    public const int WR8RISKRATEFieldNumber = 23;
    private string wR8RISKRATE_ = "";
    /// <summary>
    ///              PIC X(9). 9	X	9	0		風險指標(總權益維持率)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8RISKRATE {
      get { return wR8RISKRATE_; }
      set {
        wR8RISKRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_COVER_RATE" field.</summary>
    public const int WR8COVERRATEFieldNumber = 24;
    private string wR8COVERRATE_ = "";
    /// <summary>
    ///             PIC S9(3)V9(2).	5	9	3	2		浮動報酬率(FILLER)	FILLER	浮動報酬率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8COVERRATE {
      get { return wR8COVERRATE_; }
      set {
        wR8COVERRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_FULL_MARGIN" field.</summary>
    public const int WR8FULLMARGINFieldNumber = 25;
    private string wR8FULLMARGIN_ = "";
    /// <summary>
    ///             PIC S9(14)V9(2) COMP.	8	C	14	2		足額原始保証金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8FULLMARGIN {
      get { return wR8FULLMARGIN_; }
      set {
        wR8FULLMARGIN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_FULL_MAINTAIN_MARGIN" field.</summary>
    public const int WR8FULLMAINTAINMARGINFieldNumber = 26;
    private string wR8FULLMAINTAINMARGIN_ = "";
    /// <summary>
    ///      PIC S9(14)V9(2) COMP.	8	C	14	2		足額維持保証金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8FULLMAINTAINMARGIN {
      get { return wR8FULLMAINTAINMARGIN_; }
      set {
        wR8FULLMAINTAINMARGIN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_FULL_USABLE_MARGIN" field.</summary>
    public const int WR8FULLUSABLEMARGINFieldNumber = 27;
    private string wR8FULLUSABLEMARGIN_ = "";
    /// <summary>
    ///        PIC S9(14)V9(2) COMP.	8	C	14	2		足額可用餘額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8FULLUSABLEMARGIN {
      get { return wR8FULLUSABLEMARGIN_; }
      set {
        wR8FULLUSABLEMARGIN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_FULL_RATE" field.</summary>
    public const int WR8FULLRATEFieldNumber = 28;
    private string wR8FULLRATE_ = "";
    /// <summary>
    ///              PIC X(9).	9	X	9	0		足額維持率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8FULLRATE {
      get { return wR8FULLRATE_; }
      set {
        wR8FULLRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_FULL_RISK_RATE" field.</summary>
    public const int WR8FULLRISKRATEFieldNumber = 29;
    private string wR8FULLRISKRATE_ = "";
    /// <summary>
    ///            PIC X(9). 9	X	9	0		足額風險指標(足額總權益維持率)	足額總權益維持率	FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8FULLRISKRATE {
      get { return wR8FULLRISKRATE_; }
      set {
        wR8FULLRISKRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_TRAN_RATE_6" field.</summary>
    public const int WR8TRANRATE6FieldNumber = 30;
    private string wR8TRANRATE6_ = "";
    /// <summary>
    ///          PIC S9(4)V9(6) COMP.	8	C	4	6	美金匯率是對台幣其他幣匯率是對美金	轉換匯率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8TRANRATE6 {
      get { return wR8TRANRATE6_; }
      set {
        wR8TRANRATE6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_COVERED_AMT" field.</summary>
    public const int WR8COVEREDAMTFieldNumber = 31;
    private string wR8COVEREDAMT_ = "";
    /// <summary>
    ///          PIC S9(12) COMP.	8	C	12	0		有價抵繳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8COVEREDAMT {
      get { return wR8COVEREDAMT_; }
      set {
        wR8COVEREDAMT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_A_ADD_COVERED_USABLE" field.</summary>
    public const int WR8AADDCOVEREDUSABLEFieldNumber = 32;
    private string wR8AADDCOVEREDUSABLE_ = "";
    /// <summary>
    ///   PIC S9(12)V9(2) COMP.	8	C	12	2		有價可用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8AADDCOVEREDUSABLE {
      get { return wR8AADDCOVEREDUSABLE_; }
      set {
        wR8AADDCOVEREDUSABLE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_A_CASH_USABLE" field.</summary>
    public const int WR8ACASHUSABLEFieldNumber = 33;
    private string wR8ACASHUSABLE_ = "";
    /// <summary>
    ///     PIC S9(12)V9(2) COMP.	8	C	12	2		現金可用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8ACASHUSABLE {
      get { return wR8ACASHUSABLE_; }
      set {
        wR8ACASHUSABLE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_YES_TOT_EQUITY" field.</summary>
    public const int WR8YESTOTEQUITYFieldNumber = 34;
    private string wR8YESTOTEQUITY_ = "";
    /// <summary>
    ///      PIC S9(14)V9(2) COMP.	8	C	14	2		昨日客戶權益總市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8YESTOTEQUITY {
      get { return wR8YESTOTEQUITY_; }
      set {
        wR8YESTOTEQUITY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_UNREALIZED_INCOME" field.</summary>
    public const int WR8UNREALIZEDINCOMEFieldNumber = 35;
    private string wR8UNREALIZEDINCOME_ = "";
    /// <summary>
    ///     PIC S9(14)V9(2) COMP.	8	C	14	2		未實現利得
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8UNREALIZEDINCOME {
      get { return wR8UNREALIZEDINCOME_; }
      set {
        wR8UNREALIZEDINCOME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_O_OLD_USED_MARGIN" field.</summary>
    public const int WR8OOLDUSEDMARGINFieldNumber = 36;
    private string wR8OOLDUSEDMARGIN_ = "";
    /// <summary>
    ///      PIC S9(14)V9(2) COMP.	8	C	14	2		委託原始保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8OOLDUSEDMARGIN {
      get { return wR8OOLDUSEDMARGIN_; }
      set {
        wR8OOLDUSEDMARGIN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_O_MAINTAIN_MARGIN" field.</summary>
    public const int WR8OMAINTAINMARGINFieldNumber = 37;
    private string wR8OMAINTAINMARGIN_ = "";
    /// <summary>
    ///      PIC S9(14)V9(2) COMP.	8	C	14	2		委託維持保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8OMAINTAINMARGIN {
      get { return wR8OMAINTAINMARGIN_; }
      set {
        wR8OMAINTAINMARGIN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_O_FULL_MARGIN" field.</summary>
    public const int WR8OFULLMARGINFieldNumber = 38;
    private string wR8OFULLMARGIN_ = "";
    /// <summary>
    ///       PIC S9(14)V9(2) COMP.	8	C	14	2		足額委託原始保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8OFULLMARGIN {
      get { return wR8OFULLMARGIN_; }
      set {
        wR8OFULLMARGIN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_O_FULL_MAINTAIN" field.</summary>
    public const int WR8OFULLMAINTAINFieldNumber = 39;
    private string wR8OFULLMAINTAIN_ = "";
    /// <summary>
    ///       PIC S9(14)V9(2) COMP.	8	C	14	2		足額委託維持保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8OFULLMAINTAIN {
      get { return wR8OFULLMAINTAIN_; }
      set {
        wR8OFULLMAINTAIN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_ADDITION_MARGIN" field.</summary>
    public const int WR8ADDITIONMARGINFieldNumber = 40;
    private string wR8ADDITIONMARGIN_ = "";
    /// <summary>
    ///       PIC S9(14)V9(2) COMP.	8	C	14	2		加收保證金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8ADDITIONMARGIN {
      get { return wR8ADDITIONMARGIN_; }
      set {
        wR8ADDITIONMARGIN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_NO_MARGIN" field.</summary>
    public const int WR8NOMARGINFieldNumber = 41;
    private string wR8NOMARGIN_ = "";
    /// <summary>
    ///           PIC S9(14)V9(2) COMP.	8	C	14	2		超額/追繳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8NOMARGIN {
      get { return wR8NOMARGIN_; }
      set {
        wR8NOMARGIN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR8_PROMPT_AMT" field.</summary>
    public const int WR8PROMPTAMTFieldNumber = 42;
    private string wR8PROMPTAMT_ = "";
    /// <summary>
    ///           PIC S9(14)V9(2) COMP.	8	C	14	2		履約損益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR8PROMPTAMT {
      get { return wR8PROMPTAMT_; }
      set {
        wR8PROMPTAMT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER" field.</summary>
    public const int FILLERFieldNumber = 43;
    private string fILLER_ = "";
    /// <summary>
    ///           PIC X(4).	4	X	4	0	SPACE	FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER {
      get { return fILLER_; }
      set {
        fILLER_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER2" field.</summary>
    public const int FILLER2FieldNumber = 44;
    private string fILLER2_ = "";
    /// <summary>
    ///           PIC X(78).	78	X	78	0	SPACE	FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER2 {
      get { return fILLER2_; }
      set {
        fILLER2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemResult_CURRENCY);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemResult_CURRENCY other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WR8DATAFLAG1 != other.WR8DATAFLAG1) return false;
      if (WR8DATAFLAG2 != other.WR8DATAFLAG2) return false;
      if (WR8TRANRATE != other.WR8TRANRATE) return false;
      if (WR8CURRENCY != other.WR8CURRENCY) return false;
      if (WR8MAINTAINRATE != other.WR8MAINTAINRATE) return false;
      if (WR8ACCOUNTEQUITY != other.WR8ACCOUNTEQUITY) return false;
      if (WR8INOUTAMT != other.WR8INOUTAMT) return false;
      if (WR8USABLEMARGIN != other.WR8USABLEMARGIN) return false;
      if (WR8COVERINCOME != other.WR8COVERINCOME) return false;
      if (WR8INITIALMARGIN != other.WR8INITIALMARGIN) return false;
      if (WR8MAINTAINMARGIN != other.WR8MAINTAINMARGIN) return false;
      if (WR8VARINCOME != other.WR8VARINCOME) return false;
      if (WR8ACCOUNTBALANCE != other.WR8ACCOUNTBALANCE) return false;
      if (WR8REALIZEPREMIUM != other.WR8REALIZEPREMIUM) return false;
      if (WR8UNREALIZEPREMIUM != other.WR8UNREALIZEPREMIUM) return false;
      if (WR8BOPTIONVALUE != other.WR8BOPTIONVALUE) return false;
      if (WR8SOPTIONVALUE != other.WR8SOPTIONVALUE) return false;
      if (WR8YESEQU != other.WR8YESEQU) return false;
      if (WR8YESACCOUNTBALANCE != other.WR8YESACCOUNTBALANCE) return false;
      if (WR8TODAYFEE != other.WR8TODAYFEE) return false;
      if (WR8TODAYTAX != other.WR8TODAYTAX) return false;
      if (WR8EQUITY != other.WR8EQUITY) return false;
      if (WR8RISKRATE != other.WR8RISKRATE) return false;
      if (WR8COVERRATE != other.WR8COVERRATE) return false;
      if (WR8FULLMARGIN != other.WR8FULLMARGIN) return false;
      if (WR8FULLMAINTAINMARGIN != other.WR8FULLMAINTAINMARGIN) return false;
      if (WR8FULLUSABLEMARGIN != other.WR8FULLUSABLEMARGIN) return false;
      if (WR8FULLRATE != other.WR8FULLRATE) return false;
      if (WR8FULLRISKRATE != other.WR8FULLRISKRATE) return false;
      if (WR8TRANRATE6 != other.WR8TRANRATE6) return false;
      if (WR8COVEREDAMT != other.WR8COVEREDAMT) return false;
      if (WR8AADDCOVEREDUSABLE != other.WR8AADDCOVEREDUSABLE) return false;
      if (WR8ACASHUSABLE != other.WR8ACASHUSABLE) return false;
      if (WR8YESTOTEQUITY != other.WR8YESTOTEQUITY) return false;
      if (WR8UNREALIZEDINCOME != other.WR8UNREALIZEDINCOME) return false;
      if (WR8OOLDUSEDMARGIN != other.WR8OOLDUSEDMARGIN) return false;
      if (WR8OMAINTAINMARGIN != other.WR8OMAINTAINMARGIN) return false;
      if (WR8OFULLMARGIN != other.WR8OFULLMARGIN) return false;
      if (WR8OFULLMAINTAIN != other.WR8OFULLMAINTAIN) return false;
      if (WR8ADDITIONMARGIN != other.WR8ADDITIONMARGIN) return false;
      if (WR8NOMARGIN != other.WR8NOMARGIN) return false;
      if (WR8PROMPTAMT != other.WR8PROMPTAMT) return false;
      if (FILLER != other.FILLER) return false;
      if (FILLER2 != other.FILLER2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WR8DATAFLAG1.Length != 0) hash ^= WR8DATAFLAG1.GetHashCode();
      if (WR8DATAFLAG2.Length != 0) hash ^= WR8DATAFLAG2.GetHashCode();
      if (WR8TRANRATE.Length != 0) hash ^= WR8TRANRATE.GetHashCode();
      if (WR8CURRENCY.Length != 0) hash ^= WR8CURRENCY.GetHashCode();
      if (WR8MAINTAINRATE.Length != 0) hash ^= WR8MAINTAINRATE.GetHashCode();
      if (WR8ACCOUNTEQUITY.Length != 0) hash ^= WR8ACCOUNTEQUITY.GetHashCode();
      if (WR8INOUTAMT.Length != 0) hash ^= WR8INOUTAMT.GetHashCode();
      if (WR8USABLEMARGIN.Length != 0) hash ^= WR8USABLEMARGIN.GetHashCode();
      if (WR8COVERINCOME.Length != 0) hash ^= WR8COVERINCOME.GetHashCode();
      if (WR8INITIALMARGIN.Length != 0) hash ^= WR8INITIALMARGIN.GetHashCode();
      if (WR8MAINTAINMARGIN.Length != 0) hash ^= WR8MAINTAINMARGIN.GetHashCode();
      if (WR8VARINCOME.Length != 0) hash ^= WR8VARINCOME.GetHashCode();
      if (WR8ACCOUNTBALANCE.Length != 0) hash ^= WR8ACCOUNTBALANCE.GetHashCode();
      if (WR8REALIZEPREMIUM.Length != 0) hash ^= WR8REALIZEPREMIUM.GetHashCode();
      if (WR8UNREALIZEPREMIUM.Length != 0) hash ^= WR8UNREALIZEPREMIUM.GetHashCode();
      if (WR8BOPTIONVALUE.Length != 0) hash ^= WR8BOPTIONVALUE.GetHashCode();
      if (WR8SOPTIONVALUE.Length != 0) hash ^= WR8SOPTIONVALUE.GetHashCode();
      if (WR8YESEQU.Length != 0) hash ^= WR8YESEQU.GetHashCode();
      if (WR8YESACCOUNTBALANCE.Length != 0) hash ^= WR8YESACCOUNTBALANCE.GetHashCode();
      if (WR8TODAYFEE.Length != 0) hash ^= WR8TODAYFEE.GetHashCode();
      if (WR8TODAYTAX.Length != 0) hash ^= WR8TODAYTAX.GetHashCode();
      if (WR8EQUITY.Length != 0) hash ^= WR8EQUITY.GetHashCode();
      if (WR8RISKRATE.Length != 0) hash ^= WR8RISKRATE.GetHashCode();
      if (WR8COVERRATE.Length != 0) hash ^= WR8COVERRATE.GetHashCode();
      if (WR8FULLMARGIN.Length != 0) hash ^= WR8FULLMARGIN.GetHashCode();
      if (WR8FULLMAINTAINMARGIN.Length != 0) hash ^= WR8FULLMAINTAINMARGIN.GetHashCode();
      if (WR8FULLUSABLEMARGIN.Length != 0) hash ^= WR8FULLUSABLEMARGIN.GetHashCode();
      if (WR8FULLRATE.Length != 0) hash ^= WR8FULLRATE.GetHashCode();
      if (WR8FULLRISKRATE.Length != 0) hash ^= WR8FULLRISKRATE.GetHashCode();
      if (WR8TRANRATE6.Length != 0) hash ^= WR8TRANRATE6.GetHashCode();
      if (WR8COVEREDAMT.Length != 0) hash ^= WR8COVEREDAMT.GetHashCode();
      if (WR8AADDCOVEREDUSABLE.Length != 0) hash ^= WR8AADDCOVEREDUSABLE.GetHashCode();
      if (WR8ACASHUSABLE.Length != 0) hash ^= WR8ACASHUSABLE.GetHashCode();
      if (WR8YESTOTEQUITY.Length != 0) hash ^= WR8YESTOTEQUITY.GetHashCode();
      if (WR8UNREALIZEDINCOME.Length != 0) hash ^= WR8UNREALIZEDINCOME.GetHashCode();
      if (WR8OOLDUSEDMARGIN.Length != 0) hash ^= WR8OOLDUSEDMARGIN.GetHashCode();
      if (WR8OMAINTAINMARGIN.Length != 0) hash ^= WR8OMAINTAINMARGIN.GetHashCode();
      if (WR8OFULLMARGIN.Length != 0) hash ^= WR8OFULLMARGIN.GetHashCode();
      if (WR8OFULLMAINTAIN.Length != 0) hash ^= WR8OFULLMAINTAIN.GetHashCode();
      if (WR8ADDITIONMARGIN.Length != 0) hash ^= WR8ADDITIONMARGIN.GetHashCode();
      if (WR8NOMARGIN.Length != 0) hash ^= WR8NOMARGIN.GetHashCode();
      if (WR8PROMPTAMT.Length != 0) hash ^= WR8PROMPTAMT.GetHashCode();
      if (FILLER.Length != 0) hash ^= FILLER.GetHashCode();
      if (FILLER2.Length != 0) hash ^= FILLER2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WR8DATAFLAG1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WR8DATAFLAG1);
      }
      if (WR8DATAFLAG2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WR8DATAFLAG2);
      }
      if (WR8TRANRATE.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WR8TRANRATE);
      }
      if (WR8CURRENCY.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WR8CURRENCY);
      }
      if (WR8MAINTAINRATE.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WR8MAINTAINRATE);
      }
      if (WR8ACCOUNTEQUITY.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WR8ACCOUNTEQUITY);
      }
      if (WR8INOUTAMT.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WR8INOUTAMT);
      }
      if (WR8USABLEMARGIN.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WR8USABLEMARGIN);
      }
      if (WR8COVERINCOME.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WR8COVERINCOME);
      }
      if (WR8INITIALMARGIN.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WR8INITIALMARGIN);
      }
      if (WR8MAINTAINMARGIN.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(WR8MAINTAINMARGIN);
      }
      if (WR8VARINCOME.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WR8VARINCOME);
      }
      if (WR8ACCOUNTBALANCE.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WR8ACCOUNTBALANCE);
      }
      if (WR8REALIZEPREMIUM.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(WR8REALIZEPREMIUM);
      }
      if (WR8UNREALIZEPREMIUM.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(WR8UNREALIZEPREMIUM);
      }
      if (WR8BOPTIONVALUE.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WR8BOPTIONVALUE);
      }
      if (WR8SOPTIONVALUE.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(WR8SOPTIONVALUE);
      }
      if (WR8YESEQU.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(WR8YESEQU);
      }
      if (WR8YESACCOUNTBALANCE.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(WR8YESACCOUNTBALANCE);
      }
      if (WR8TODAYFEE.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WR8TODAYFEE);
      }
      if (WR8TODAYTAX.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(WR8TODAYTAX);
      }
      if (WR8EQUITY.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(WR8EQUITY);
      }
      if (WR8RISKRATE.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(WR8RISKRATE);
      }
      if (WR8COVERRATE.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(WR8COVERRATE);
      }
      if (WR8FULLMARGIN.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(WR8FULLMARGIN);
      }
      if (WR8FULLMAINTAINMARGIN.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(WR8FULLMAINTAINMARGIN);
      }
      if (WR8FULLUSABLEMARGIN.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(WR8FULLUSABLEMARGIN);
      }
      if (WR8FULLRATE.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(WR8FULLRATE);
      }
      if (WR8FULLRISKRATE.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(WR8FULLRISKRATE);
      }
      if (WR8TRANRATE6.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(WR8TRANRATE6);
      }
      if (WR8COVEREDAMT.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(WR8COVEREDAMT);
      }
      if (WR8AADDCOVEREDUSABLE.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(WR8AADDCOVEREDUSABLE);
      }
      if (WR8ACASHUSABLE.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(WR8ACASHUSABLE);
      }
      if (WR8YESTOTEQUITY.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(WR8YESTOTEQUITY);
      }
      if (WR8UNREALIZEDINCOME.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(WR8UNREALIZEDINCOME);
      }
      if (WR8OOLDUSEDMARGIN.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(WR8OOLDUSEDMARGIN);
      }
      if (WR8OMAINTAINMARGIN.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(WR8OMAINTAINMARGIN);
      }
      if (WR8OFULLMARGIN.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(WR8OFULLMARGIN);
      }
      if (WR8OFULLMAINTAIN.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(WR8OFULLMAINTAIN);
      }
      if (WR8ADDITIONMARGIN.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(WR8ADDITIONMARGIN);
      }
      if (WR8NOMARGIN.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(WR8NOMARGIN);
      }
      if (WR8PROMPTAMT.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(WR8PROMPTAMT);
      }
      if (FILLER.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(FILLER);
      }
      if (FILLER2.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(FILLER2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WR8DATAFLAG1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8DATAFLAG1);
      }
      if (WR8DATAFLAG2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8DATAFLAG2);
      }
      if (WR8TRANRATE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8TRANRATE);
      }
      if (WR8CURRENCY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8CURRENCY);
      }
      if (WR8MAINTAINRATE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8MAINTAINRATE);
      }
      if (WR8ACCOUNTEQUITY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8ACCOUNTEQUITY);
      }
      if (WR8INOUTAMT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8INOUTAMT);
      }
      if (WR8USABLEMARGIN.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8USABLEMARGIN);
      }
      if (WR8COVERINCOME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8COVERINCOME);
      }
      if (WR8INITIALMARGIN.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8INITIALMARGIN);
      }
      if (WR8MAINTAINMARGIN.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8MAINTAINMARGIN);
      }
      if (WR8VARINCOME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8VARINCOME);
      }
      if (WR8ACCOUNTBALANCE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8ACCOUNTBALANCE);
      }
      if (WR8REALIZEPREMIUM.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8REALIZEPREMIUM);
      }
      if (WR8UNREALIZEPREMIUM.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR8UNREALIZEPREMIUM);
      }
      if (WR8BOPTIONVALUE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8BOPTIONVALUE);
      }
      if (WR8SOPTIONVALUE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8SOPTIONVALUE);
      }
      if (WR8YESEQU.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8YESEQU);
      }
      if (WR8YESACCOUNTBALANCE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8YESACCOUNTBALANCE);
      }
      if (WR8TODAYFEE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8TODAYFEE);
      }
      if (WR8TODAYTAX.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8TODAYTAX);
      }
      if (WR8EQUITY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8EQUITY);
      }
      if (WR8RISKRATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8RISKRATE);
      }
      if (WR8COVERRATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8COVERRATE);
      }
      if (WR8FULLMARGIN.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8FULLMARGIN);
      }
      if (WR8FULLMAINTAINMARGIN.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8FULLMAINTAINMARGIN);
      }
      if (WR8FULLUSABLEMARGIN.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8FULLUSABLEMARGIN);
      }
      if (WR8FULLRATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8FULLRATE);
      }
      if (WR8FULLRISKRATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8FULLRISKRATE);
      }
      if (WR8TRANRATE6.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8TRANRATE6);
      }
      if (WR8COVEREDAMT.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8COVEREDAMT);
      }
      if (WR8AADDCOVEREDUSABLE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8AADDCOVEREDUSABLE);
      }
      if (WR8ACASHUSABLE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8ACASHUSABLE);
      }
      if (WR8YESTOTEQUITY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8YESTOTEQUITY);
      }
      if (WR8UNREALIZEDINCOME.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8UNREALIZEDINCOME);
      }
      if (WR8OOLDUSEDMARGIN.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8OOLDUSEDMARGIN);
      }
      if (WR8OMAINTAINMARGIN.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8OMAINTAINMARGIN);
      }
      if (WR8OFULLMARGIN.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8OFULLMARGIN);
      }
      if (WR8OFULLMAINTAIN.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8OFULLMAINTAIN);
      }
      if (WR8ADDITIONMARGIN.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8ADDITIONMARGIN);
      }
      if (WR8NOMARGIN.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8NOMARGIN);
      }
      if (WR8PROMPTAMT.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR8PROMPTAMT);
      }
      if (FILLER.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER);
      }
      if (FILLER2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemResult_CURRENCY other) {
      if (other == null) {
        return;
      }
      if (other.WR8DATAFLAG1.Length != 0) {
        WR8DATAFLAG1 = other.WR8DATAFLAG1;
      }
      if (other.WR8DATAFLAG2.Length != 0) {
        WR8DATAFLAG2 = other.WR8DATAFLAG2;
      }
      if (other.WR8TRANRATE.Length != 0) {
        WR8TRANRATE = other.WR8TRANRATE;
      }
      if (other.WR8CURRENCY.Length != 0) {
        WR8CURRENCY = other.WR8CURRENCY;
      }
      if (other.WR8MAINTAINRATE.Length != 0) {
        WR8MAINTAINRATE = other.WR8MAINTAINRATE;
      }
      if (other.WR8ACCOUNTEQUITY.Length != 0) {
        WR8ACCOUNTEQUITY = other.WR8ACCOUNTEQUITY;
      }
      if (other.WR8INOUTAMT.Length != 0) {
        WR8INOUTAMT = other.WR8INOUTAMT;
      }
      if (other.WR8USABLEMARGIN.Length != 0) {
        WR8USABLEMARGIN = other.WR8USABLEMARGIN;
      }
      if (other.WR8COVERINCOME.Length != 0) {
        WR8COVERINCOME = other.WR8COVERINCOME;
      }
      if (other.WR8INITIALMARGIN.Length != 0) {
        WR8INITIALMARGIN = other.WR8INITIALMARGIN;
      }
      if (other.WR8MAINTAINMARGIN.Length != 0) {
        WR8MAINTAINMARGIN = other.WR8MAINTAINMARGIN;
      }
      if (other.WR8VARINCOME.Length != 0) {
        WR8VARINCOME = other.WR8VARINCOME;
      }
      if (other.WR8ACCOUNTBALANCE.Length != 0) {
        WR8ACCOUNTBALANCE = other.WR8ACCOUNTBALANCE;
      }
      if (other.WR8REALIZEPREMIUM.Length != 0) {
        WR8REALIZEPREMIUM = other.WR8REALIZEPREMIUM;
      }
      if (other.WR8UNREALIZEPREMIUM.Length != 0) {
        WR8UNREALIZEPREMIUM = other.WR8UNREALIZEPREMIUM;
      }
      if (other.WR8BOPTIONVALUE.Length != 0) {
        WR8BOPTIONVALUE = other.WR8BOPTIONVALUE;
      }
      if (other.WR8SOPTIONVALUE.Length != 0) {
        WR8SOPTIONVALUE = other.WR8SOPTIONVALUE;
      }
      if (other.WR8YESEQU.Length != 0) {
        WR8YESEQU = other.WR8YESEQU;
      }
      if (other.WR8YESACCOUNTBALANCE.Length != 0) {
        WR8YESACCOUNTBALANCE = other.WR8YESACCOUNTBALANCE;
      }
      if (other.WR8TODAYFEE.Length != 0) {
        WR8TODAYFEE = other.WR8TODAYFEE;
      }
      if (other.WR8TODAYTAX.Length != 0) {
        WR8TODAYTAX = other.WR8TODAYTAX;
      }
      if (other.WR8EQUITY.Length != 0) {
        WR8EQUITY = other.WR8EQUITY;
      }
      if (other.WR8RISKRATE.Length != 0) {
        WR8RISKRATE = other.WR8RISKRATE;
      }
      if (other.WR8COVERRATE.Length != 0) {
        WR8COVERRATE = other.WR8COVERRATE;
      }
      if (other.WR8FULLMARGIN.Length != 0) {
        WR8FULLMARGIN = other.WR8FULLMARGIN;
      }
      if (other.WR8FULLMAINTAINMARGIN.Length != 0) {
        WR8FULLMAINTAINMARGIN = other.WR8FULLMAINTAINMARGIN;
      }
      if (other.WR8FULLUSABLEMARGIN.Length != 0) {
        WR8FULLUSABLEMARGIN = other.WR8FULLUSABLEMARGIN;
      }
      if (other.WR8FULLRATE.Length != 0) {
        WR8FULLRATE = other.WR8FULLRATE;
      }
      if (other.WR8FULLRISKRATE.Length != 0) {
        WR8FULLRISKRATE = other.WR8FULLRISKRATE;
      }
      if (other.WR8TRANRATE6.Length != 0) {
        WR8TRANRATE6 = other.WR8TRANRATE6;
      }
      if (other.WR8COVEREDAMT.Length != 0) {
        WR8COVEREDAMT = other.WR8COVEREDAMT;
      }
      if (other.WR8AADDCOVEREDUSABLE.Length != 0) {
        WR8AADDCOVEREDUSABLE = other.WR8AADDCOVEREDUSABLE;
      }
      if (other.WR8ACASHUSABLE.Length != 0) {
        WR8ACASHUSABLE = other.WR8ACASHUSABLE;
      }
      if (other.WR8YESTOTEQUITY.Length != 0) {
        WR8YESTOTEQUITY = other.WR8YESTOTEQUITY;
      }
      if (other.WR8UNREALIZEDINCOME.Length != 0) {
        WR8UNREALIZEDINCOME = other.WR8UNREALIZEDINCOME;
      }
      if (other.WR8OOLDUSEDMARGIN.Length != 0) {
        WR8OOLDUSEDMARGIN = other.WR8OOLDUSEDMARGIN;
      }
      if (other.WR8OMAINTAINMARGIN.Length != 0) {
        WR8OMAINTAINMARGIN = other.WR8OMAINTAINMARGIN;
      }
      if (other.WR8OFULLMARGIN.Length != 0) {
        WR8OFULLMARGIN = other.WR8OFULLMARGIN;
      }
      if (other.WR8OFULLMAINTAIN.Length != 0) {
        WR8OFULLMAINTAIN = other.WR8OFULLMAINTAIN;
      }
      if (other.WR8ADDITIONMARGIN.Length != 0) {
        WR8ADDITIONMARGIN = other.WR8ADDITIONMARGIN;
      }
      if (other.WR8NOMARGIN.Length != 0) {
        WR8NOMARGIN = other.WR8NOMARGIN;
      }
      if (other.WR8PROMPTAMT.Length != 0) {
        WR8PROMPTAMT = other.WR8PROMPTAMT;
      }
      if (other.FILLER.Length != 0) {
        FILLER = other.FILLER;
      }
      if (other.FILLER2.Length != 0) {
        FILLER2 = other.FILLER2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WR8DATAFLAG1 = input.ReadString();
            break;
          }
          case 18: {
            WR8DATAFLAG2 = input.ReadString();
            break;
          }
          case 26: {
            WR8TRANRATE = input.ReadString();
            break;
          }
          case 34: {
            WR8CURRENCY = input.ReadString();
            break;
          }
          case 42: {
            WR8MAINTAINRATE = input.ReadString();
            break;
          }
          case 50: {
            WR8ACCOUNTEQUITY = input.ReadString();
            break;
          }
          case 58: {
            WR8INOUTAMT = input.ReadString();
            break;
          }
          case 66: {
            WR8USABLEMARGIN = input.ReadString();
            break;
          }
          case 74: {
            WR8COVERINCOME = input.ReadString();
            break;
          }
          case 82: {
            WR8INITIALMARGIN = input.ReadString();
            break;
          }
          case 90: {
            WR8MAINTAINMARGIN = input.ReadString();
            break;
          }
          case 98: {
            WR8VARINCOME = input.ReadString();
            break;
          }
          case 106: {
            WR8ACCOUNTBALANCE = input.ReadString();
            break;
          }
          case 114: {
            WR8REALIZEPREMIUM = input.ReadString();
            break;
          }
          case 122: {
            WR8UNREALIZEPREMIUM = input.ReadString();
            break;
          }
          case 130: {
            WR8BOPTIONVALUE = input.ReadString();
            break;
          }
          case 138: {
            WR8SOPTIONVALUE = input.ReadString();
            break;
          }
          case 146: {
            WR8YESEQU = input.ReadString();
            break;
          }
          case 154: {
            WR8YESACCOUNTBALANCE = input.ReadString();
            break;
          }
          case 162: {
            WR8TODAYFEE = input.ReadString();
            break;
          }
          case 170: {
            WR8TODAYTAX = input.ReadString();
            break;
          }
          case 178: {
            WR8EQUITY = input.ReadString();
            break;
          }
          case 186: {
            WR8RISKRATE = input.ReadString();
            break;
          }
          case 194: {
            WR8COVERRATE = input.ReadString();
            break;
          }
          case 202: {
            WR8FULLMARGIN = input.ReadString();
            break;
          }
          case 210: {
            WR8FULLMAINTAINMARGIN = input.ReadString();
            break;
          }
          case 218: {
            WR8FULLUSABLEMARGIN = input.ReadString();
            break;
          }
          case 226: {
            WR8FULLRATE = input.ReadString();
            break;
          }
          case 234: {
            WR8FULLRISKRATE = input.ReadString();
            break;
          }
          case 242: {
            WR8TRANRATE6 = input.ReadString();
            break;
          }
          case 250: {
            WR8COVEREDAMT = input.ReadString();
            break;
          }
          case 258: {
            WR8AADDCOVEREDUSABLE = input.ReadString();
            break;
          }
          case 266: {
            WR8ACASHUSABLE = input.ReadString();
            break;
          }
          case 274: {
            WR8YESTOTEQUITY = input.ReadString();
            break;
          }
          case 282: {
            WR8UNREALIZEDINCOME = input.ReadString();
            break;
          }
          case 290: {
            WR8OOLDUSEDMARGIN = input.ReadString();
            break;
          }
          case 298: {
            WR8OMAINTAINMARGIN = input.ReadString();
            break;
          }
          case 306: {
            WR8OFULLMARGIN = input.ReadString();
            break;
          }
          case 314: {
            WR8OFULLMAINTAIN = input.ReadString();
            break;
          }
          case 322: {
            WR8ADDITIONMARGIN = input.ReadString();
            break;
          }
          case 330: {
            WR8NOMARGIN = input.ReadString();
            break;
          }
          case 338: {
            WR8PROMPTAMT = input.ReadString();
            break;
          }
          case 346: {
            FILLER = input.ReadString();
            break;
          }
          case 354: {
            FILLER2 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///    => 9 當沖維持率&amp;當沖未平倉資料彙總查詢 (WR_READ_DATA) 明細格式如下 : (400bytes)
  /// </summary>
  public sealed partial class TandemResult_DAYTRADE_AGGREGATE : pb::IMessage<TandemResult_DAYTRADE_AGGREGATE> {
    private static readonly pb::MessageParser<TandemResult_DAYTRADE_AGGREGATE> _parser = new pb::MessageParser<TandemResult_DAYTRADE_AGGREGATE>(() => new TandemResult_DAYTRADE_AGGREGATE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemResult_DAYTRADE_AGGREGATE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_DAYTRADE_AGGREGATE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_DAYTRADE_AGGREGATE(TandemResult_DAYTRADE_AGGREGATE other) : this() {
      wR9DATAFLAG1_ = other.wR9DATAFLAG1_;
      wR9DATAFLAG2_ = other.wR9DATAFLAG2_;
      wR9TRID_ = other.wR9TRID_;
      wR9COMMODITYNAME1_ = other.wR9COMMODITYNAME1_;
      wR9COMMODITYID1_ = other.wR9COMMODITYID1_;
      wR9SETTLEMENTMONTH1_ = other.wR9SETTLEMENTMONTH1_;
      wR9STRIKEPRICE1_ = other.wR9STRIKEPRICE1_;
      wR9BUYSELLKIND1_ = other.wR9BUYSELLKIND1_;
      wR9STOCKCODE1_ = other.wR9STOCKCODE1_;
      wR9TRABQTY_ = other.wR9TRABQTY_;
      wR9TRABPRICE_ = other.wR9TRABPRICE_;
      wR9TRASQTY_ = other.wR9TRASQTY_;
      wR9TRASPRICE_ = other.wR9TRASPRICE_;
      wR9TRAVARINCOME_ = other.wR9TRAVARINCOME_;
      wR9TRAOBQTY_ = other.wR9TRAOBQTY_;
      wR9TRAOSQTY_ = other.wR9TRAOSQTY_;
      wR9TRARATE_ = other.wR9TRARATE_;
      fILLER_ = other.fILLER_;
      wR9TRABPRICE4_ = other.wR9TRABPRICE4_;
      wR9TRASPRICE4_ = other.wR9TRASPRICE4_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_DAYTRADE_AGGREGATE Clone() {
      return new TandemResult_DAYTRADE_AGGREGATE(this);
    }

    /// <summary>Field number for the "WR9_DATA_FLAG_1" field.</summary>
    public const int WR9DATAFLAG1FieldNumber = 1;
    private string wR9DATAFLAG1_ = "";
    /// <summary>
    ///             PIC X(1).	1	X	1	0	9: 當沖維持率	資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9DATAFLAG1 {
      get { return wR9DATAFLAG1_; }
      set {
        wR9DATAFLAG1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_DATA_FLAG_2" field.</summary>
    public const int WR9DATAFLAG2FieldNumber = 2;
    private string wR9DATAFLAG2_ = "";
    /// <summary>
    ///             PIC X(1).	1	X	1	0	1:首筆 	子資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9DATAFLAG2 {
      get { return wR9DATAFLAG2_; }
      set {
        wR9DATAFLAG2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_TR_ID" field.</summary>
    public const int WR9TRIDFieldNumber = 3;
    private string wR9TRID_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9TRID {
      get { return wR9TRID_; }
      set {
        wR9TRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_COMMODITY_NAME_1" field.</summary>
    public const int WR9COMMODITYNAME1FieldNumber = 4;
    private string wR9COMMODITYNAME1_ = "";
    /// <summary>
    ///   PIC X(10).	10	X	10	0		簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9COMMODITYNAME1 {
      get { return wR9COMMODITYNAME1_; }
      set {
        wR9COMMODITYNAME1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_COMMODITY_ID_1" field.</summary>
    public const int WR9COMMODITYID1FieldNumber = 5;
    private string wR9COMMODITYID1_ = "";
    /// <summary>
    ///   PIC X(7).	7	X	7	0		代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9COMMODITYID1 {
      get { return wR9COMMODITYID1_; }
      set {
        wR9COMMODITYID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_SETTLEMENT_MONTH_1" field.</summary>
    public const int WR9SETTLEMENTMONTH1FieldNumber = 6;
    private string wR9SETTLEMENTMONTH1_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9SETTLEMENTMONTH1 {
      get { return wR9SETTLEMENTMONTH1_; }
      set {
        wR9SETTLEMENTMONTH1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_STRIKE_PRICE_1" field.</summary>
    public const int WR9STRIKEPRICE1FieldNumber = 7;
    private string wR9STRIKEPRICE1_ = "";
    /// <summary>
    ///   PIC 9(6)V9(3).	9	9	6	3		履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9STRIKEPRICE1 {
      get { return wR9STRIKEPRICE1_; }
      set {
        wR9STRIKEPRICE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_BUY_SELL_KIND_1" field.</summary>
    public const int WR9BUYSELLKIND1FieldNumber = 8;
    private string wR9BUYSELLKIND1_ = "";
    /// <summary>
    ///   PIC X(1).	1	X	1	0		買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9BUYSELLKIND1 {
      get { return wR9BUYSELLKIND1_; }
      set {
        wR9BUYSELLKIND1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_STOCK_CODE_1" field.</summary>
    public const int WR9STOCKCODE1FieldNumber = 9;
    private string wR9STOCKCODE1_ = "";
    /// <summary>
    ///     PIC X(07).	7	X	7	0		個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9STOCKCODE1 {
      get { return wR9STOCKCODE1_; }
      set {
        wR9STOCKCODE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_TRA_B_QTY" field.</summary>
    public const int WR9TRABQTYFieldNumber = 10;
    private string wR9TRABQTY_ = "";
    /// <summary>
    ///       PIC 9(08) COMP.	4	C	8	0		今日  買方  當沖  未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9TRABQTY {
      get { return wR9TRABQTY_; }
      set {
        wR9TRABQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_TRA_B_PRICE" field.</summary>
    public const int WR9TRABPRICEFieldNumber = 11;
    private string wR9TRABPRICE_ = "";
    /// <summary>
    ///        PIC S9(06)V9(03) COMP	4	C	6	3		"今日  買方  當沖  未平倉均價(擬作廢日期未定,請改用底下小數9位的對應欄位)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9TRABPRICE {
      get { return wR9TRABPRICE_; }
      set {
        wR9TRABPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_TRA_S_QTY" field.</summary>
    public const int WR9TRASQTYFieldNumber = 12;
    private string wR9TRASQTY_ = "";
    /// <summary>
    ///        PIC 9(08) COMP.	4	C	8	0		今日  賣方  當沖  未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9TRASQTY {
      get { return wR9TRASQTY_; }
      set {
        wR9TRASQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_TRA_S_PRICE" field.</summary>
    public const int WR9TRASPRICEFieldNumber = 13;
    private string wR9TRASPRICE_ = "";
    /// <summary>
    ///        PIC S9(06)V9(03) COMP	4	C	6	3		"今日  賣方  當沖  未平倉均價(擬作廢日期未定,請改用底下小數9位的對應欄位)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9TRASPRICE {
      get { return wR9TRASPRICE_; }
      set {
        wR9TRASPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_TRA_VAR_INCOME" field.</summary>
    public const int WR9TRAVARINCOMEFieldNumber = 14;
    private string wR9TRAVARINCOME_ = "";
    /// <summary>
    ///     PIC PIC S9(14)V9(2) COMP.	8	C	14	2		當沖未平倉損益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9TRAVARINCOME {
      get { return wR9TRAVARINCOME_; }
      set {
        wR9TRAVARINCOME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_TRA_O_B_QTY" field.</summary>
    public const int WR9TRAOBQTYFieldNumber = 15;
    private string wR9TRAOBQTY_ = "";
    /// <summary>
    ///       PIC 9(08) COMP.	4	C	8	0		今日  買方  當沖  委託未成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9TRAOBQTY {
      get { return wR9TRAOBQTY_; }
      set {
        wR9TRAOBQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_TRA_O_S_QTY" field.</summary>
    public const int WR9TRAOSQTYFieldNumber = 16;
    private string wR9TRAOSQTY_ = "";
    /// <summary>
    ///      PIC 9(08) COMP.	4	C	8	0		今日  賣方  當沖  委託未成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9TRAOSQTY {
      get { return wR9TRAOSQTY_; }
      set {
        wR9TRAOSQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_TRA_RATE" field.</summary>
    public const int WR9TRARATEFieldNumber = 17;
    private string wR9TRARATE_ = "";
    /// <summary>
    ///        PIC X(9).	9	X	9	0		當沖維持率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9TRARATE {
      get { return wR9TRARATE_; }
      set {
        wR9TRARATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER" field.</summary>
    public const int FILLERFieldNumber = 18;
    private string fILLER_ = "";
    /// <summary>
    ///        PIC X(1).	1	X	1	0	SPACE	FILLSER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER {
      get { return fILLER_; }
      set {
        fILLER_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_TRA_B_PRICE_4" field.</summary>
    public const int WR9TRABPRICE4FieldNumber = 19;
    private string wR9TRABPRICE4_ = "";
    /// <summary>
    ///        PIC S9(06)V9(string ) COMP	8	C	6	4	小數四位(後台為小數三位)	今日  買方  當沖  未平倉均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9TRABPRICE4 {
      get { return wR9TRABPRICE4_; }
      set {
        wR9TRABPRICE4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR9_TRA_S_PRICE_4" field.</summary>
    public const int WR9TRASPRICE4FieldNumber = 20;
    private string wR9TRASPRICE4_ = "";
    /// <summary>
    ///       PIC S9(06)V9(string ) COMP	8	C	6	4	小數四位(後台為小數三位)	今日  賣方  當沖  未平倉均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR9TRASPRICE4 {
      get { return wR9TRASPRICE4_; }
      set {
        wR9TRASPRICE4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemResult_DAYTRADE_AGGREGATE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemResult_DAYTRADE_AGGREGATE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WR9DATAFLAG1 != other.WR9DATAFLAG1) return false;
      if (WR9DATAFLAG2 != other.WR9DATAFLAG2) return false;
      if (WR9TRID != other.WR9TRID) return false;
      if (WR9COMMODITYNAME1 != other.WR9COMMODITYNAME1) return false;
      if (WR9COMMODITYID1 != other.WR9COMMODITYID1) return false;
      if (WR9SETTLEMENTMONTH1 != other.WR9SETTLEMENTMONTH1) return false;
      if (WR9STRIKEPRICE1 != other.WR9STRIKEPRICE1) return false;
      if (WR9BUYSELLKIND1 != other.WR9BUYSELLKIND1) return false;
      if (WR9STOCKCODE1 != other.WR9STOCKCODE1) return false;
      if (WR9TRABQTY != other.WR9TRABQTY) return false;
      if (WR9TRABPRICE != other.WR9TRABPRICE) return false;
      if (WR9TRASQTY != other.WR9TRASQTY) return false;
      if (WR9TRASPRICE != other.WR9TRASPRICE) return false;
      if (WR9TRAVARINCOME != other.WR9TRAVARINCOME) return false;
      if (WR9TRAOBQTY != other.WR9TRAOBQTY) return false;
      if (WR9TRAOSQTY != other.WR9TRAOSQTY) return false;
      if (WR9TRARATE != other.WR9TRARATE) return false;
      if (FILLER != other.FILLER) return false;
      if (WR9TRABPRICE4 != other.WR9TRABPRICE4) return false;
      if (WR9TRASPRICE4 != other.WR9TRASPRICE4) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WR9DATAFLAG1.Length != 0) hash ^= WR9DATAFLAG1.GetHashCode();
      if (WR9DATAFLAG2.Length != 0) hash ^= WR9DATAFLAG2.GetHashCode();
      if (WR9TRID.Length != 0) hash ^= WR9TRID.GetHashCode();
      if (WR9COMMODITYNAME1.Length != 0) hash ^= WR9COMMODITYNAME1.GetHashCode();
      if (WR9COMMODITYID1.Length != 0) hash ^= WR9COMMODITYID1.GetHashCode();
      if (WR9SETTLEMENTMONTH1.Length != 0) hash ^= WR9SETTLEMENTMONTH1.GetHashCode();
      if (WR9STRIKEPRICE1.Length != 0) hash ^= WR9STRIKEPRICE1.GetHashCode();
      if (WR9BUYSELLKIND1.Length != 0) hash ^= WR9BUYSELLKIND1.GetHashCode();
      if (WR9STOCKCODE1.Length != 0) hash ^= WR9STOCKCODE1.GetHashCode();
      if (WR9TRABQTY.Length != 0) hash ^= WR9TRABQTY.GetHashCode();
      if (WR9TRABPRICE.Length != 0) hash ^= WR9TRABPRICE.GetHashCode();
      if (WR9TRASQTY.Length != 0) hash ^= WR9TRASQTY.GetHashCode();
      if (WR9TRASPRICE.Length != 0) hash ^= WR9TRASPRICE.GetHashCode();
      if (WR9TRAVARINCOME.Length != 0) hash ^= WR9TRAVARINCOME.GetHashCode();
      if (WR9TRAOBQTY.Length != 0) hash ^= WR9TRAOBQTY.GetHashCode();
      if (WR9TRAOSQTY.Length != 0) hash ^= WR9TRAOSQTY.GetHashCode();
      if (WR9TRARATE.Length != 0) hash ^= WR9TRARATE.GetHashCode();
      if (FILLER.Length != 0) hash ^= FILLER.GetHashCode();
      if (WR9TRABPRICE4.Length != 0) hash ^= WR9TRABPRICE4.GetHashCode();
      if (WR9TRASPRICE4.Length != 0) hash ^= WR9TRASPRICE4.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WR9DATAFLAG1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WR9DATAFLAG1);
      }
      if (WR9DATAFLAG2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WR9DATAFLAG2);
      }
      if (WR9TRID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WR9TRID);
      }
      if (WR9COMMODITYNAME1.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WR9COMMODITYNAME1);
      }
      if (WR9COMMODITYID1.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WR9COMMODITYID1);
      }
      if (WR9SETTLEMENTMONTH1.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WR9SETTLEMENTMONTH1);
      }
      if (WR9STRIKEPRICE1.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WR9STRIKEPRICE1);
      }
      if (WR9BUYSELLKIND1.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WR9BUYSELLKIND1);
      }
      if (WR9STOCKCODE1.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WR9STOCKCODE1);
      }
      if (WR9TRABQTY.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WR9TRABQTY);
      }
      if (WR9TRABPRICE.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(WR9TRABPRICE);
      }
      if (WR9TRASQTY.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WR9TRASQTY);
      }
      if (WR9TRASPRICE.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WR9TRASPRICE);
      }
      if (WR9TRAVARINCOME.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(WR9TRAVARINCOME);
      }
      if (WR9TRAOBQTY.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(WR9TRAOBQTY);
      }
      if (WR9TRAOSQTY.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WR9TRAOSQTY);
      }
      if (WR9TRARATE.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(WR9TRARATE);
      }
      if (FILLER.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(FILLER);
      }
      if (WR9TRABPRICE4.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(WR9TRABPRICE4);
      }
      if (WR9TRASPRICE4.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WR9TRASPRICE4);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WR9DATAFLAG1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9DATAFLAG1);
      }
      if (WR9DATAFLAG2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9DATAFLAG2);
      }
      if (WR9TRID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9TRID);
      }
      if (WR9COMMODITYNAME1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9COMMODITYNAME1);
      }
      if (WR9COMMODITYID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9COMMODITYID1);
      }
      if (WR9SETTLEMENTMONTH1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9SETTLEMENTMONTH1);
      }
      if (WR9STRIKEPRICE1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9STRIKEPRICE1);
      }
      if (WR9BUYSELLKIND1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9BUYSELLKIND1);
      }
      if (WR9STOCKCODE1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9STOCKCODE1);
      }
      if (WR9TRABQTY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9TRABQTY);
      }
      if (WR9TRABPRICE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9TRABPRICE);
      }
      if (WR9TRASQTY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9TRASQTY);
      }
      if (WR9TRASPRICE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9TRASPRICE);
      }
      if (WR9TRAVARINCOME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9TRAVARINCOME);
      }
      if (WR9TRAOBQTY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR9TRAOBQTY);
      }
      if (WR9TRAOSQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR9TRAOSQTY);
      }
      if (WR9TRARATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR9TRARATE);
      }
      if (FILLER.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER);
      }
      if (WR9TRABPRICE4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR9TRABPRICE4);
      }
      if (WR9TRASPRICE4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR9TRASPRICE4);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemResult_DAYTRADE_AGGREGATE other) {
      if (other == null) {
        return;
      }
      if (other.WR9DATAFLAG1.Length != 0) {
        WR9DATAFLAG1 = other.WR9DATAFLAG1;
      }
      if (other.WR9DATAFLAG2.Length != 0) {
        WR9DATAFLAG2 = other.WR9DATAFLAG2;
      }
      if (other.WR9TRID.Length != 0) {
        WR9TRID = other.WR9TRID;
      }
      if (other.WR9COMMODITYNAME1.Length != 0) {
        WR9COMMODITYNAME1 = other.WR9COMMODITYNAME1;
      }
      if (other.WR9COMMODITYID1.Length != 0) {
        WR9COMMODITYID1 = other.WR9COMMODITYID1;
      }
      if (other.WR9SETTLEMENTMONTH1.Length != 0) {
        WR9SETTLEMENTMONTH1 = other.WR9SETTLEMENTMONTH1;
      }
      if (other.WR9STRIKEPRICE1.Length != 0) {
        WR9STRIKEPRICE1 = other.WR9STRIKEPRICE1;
      }
      if (other.WR9BUYSELLKIND1.Length != 0) {
        WR9BUYSELLKIND1 = other.WR9BUYSELLKIND1;
      }
      if (other.WR9STOCKCODE1.Length != 0) {
        WR9STOCKCODE1 = other.WR9STOCKCODE1;
      }
      if (other.WR9TRABQTY.Length != 0) {
        WR9TRABQTY = other.WR9TRABQTY;
      }
      if (other.WR9TRABPRICE.Length != 0) {
        WR9TRABPRICE = other.WR9TRABPRICE;
      }
      if (other.WR9TRASQTY.Length != 0) {
        WR9TRASQTY = other.WR9TRASQTY;
      }
      if (other.WR9TRASPRICE.Length != 0) {
        WR9TRASPRICE = other.WR9TRASPRICE;
      }
      if (other.WR9TRAVARINCOME.Length != 0) {
        WR9TRAVARINCOME = other.WR9TRAVARINCOME;
      }
      if (other.WR9TRAOBQTY.Length != 0) {
        WR9TRAOBQTY = other.WR9TRAOBQTY;
      }
      if (other.WR9TRAOSQTY.Length != 0) {
        WR9TRAOSQTY = other.WR9TRAOSQTY;
      }
      if (other.WR9TRARATE.Length != 0) {
        WR9TRARATE = other.WR9TRARATE;
      }
      if (other.FILLER.Length != 0) {
        FILLER = other.FILLER;
      }
      if (other.WR9TRABPRICE4.Length != 0) {
        WR9TRABPRICE4 = other.WR9TRABPRICE4;
      }
      if (other.WR9TRASPRICE4.Length != 0) {
        WR9TRASPRICE4 = other.WR9TRASPRICE4;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WR9DATAFLAG1 = input.ReadString();
            break;
          }
          case 18: {
            WR9DATAFLAG2 = input.ReadString();
            break;
          }
          case 26: {
            WR9TRID = input.ReadString();
            break;
          }
          case 34: {
            WR9COMMODITYNAME1 = input.ReadString();
            break;
          }
          case 42: {
            WR9COMMODITYID1 = input.ReadString();
            break;
          }
          case 50: {
            WR9SETTLEMENTMONTH1 = input.ReadString();
            break;
          }
          case 58: {
            WR9STRIKEPRICE1 = input.ReadString();
            break;
          }
          case 66: {
            WR9BUYSELLKIND1 = input.ReadString();
            break;
          }
          case 74: {
            WR9STOCKCODE1 = input.ReadString();
            break;
          }
          case 82: {
            WR9TRABQTY = input.ReadString();
            break;
          }
          case 90: {
            WR9TRABPRICE = input.ReadString();
            break;
          }
          case 98: {
            WR9TRASQTY = input.ReadString();
            break;
          }
          case 106: {
            WR9TRASPRICE = input.ReadString();
            break;
          }
          case 114: {
            WR9TRAVARINCOME = input.ReadString();
            break;
          }
          case 122: {
            WR9TRAOBQTY = input.ReadString();
            break;
          }
          case 130: {
            WR9TRAOSQTY = input.ReadString();
            break;
          }
          case 138: {
            WR9TRARATE = input.ReadString();
            break;
          }
          case 146: {
            FILLER = input.ReadString();
            break;
          }
          case 154: {
            WR9TRABPRICE4 = input.ReadString();
            break;
          }
          case 162: {
            WR9TRASPRICE4 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TandemResult_BEST_POSITION : pb::IMessage<TandemResult_BEST_POSITION> {
    private static readonly pb::MessageParser<TandemResult_BEST_POSITION> _parser = new pb::MessageParser<TandemResult_BEST_POSITION>(() => new TandemResult_BEST_POSITION());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemResult_BEST_POSITION> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_BEST_POSITION() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_BEST_POSITION(TandemResult_BEST_POSITION other) : this() {
      wR0DATAFLAG1_ = other.wR0DATAFLAG1_;
      wR0DATAFLAG2_ = other.wR0DATAFLAG2_;
      wR0TRID_ = other.wR0TRID_;
      wR0BQTY_ = other.wR0BQTY_;
      wR0BOQTY_ = other.wR0BOQTY_;
      wR0SQTY_ = other.wR0SQTY_;
      wR0SOQTY_ = other.wR0SOQTY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_BEST_POSITION Clone() {
      return new TandemResult_BEST_POSITION(this);
    }

    /// <summary>Field number for the "WR0_DATA_FLAG_1" field.</summary>
    public const int WR0DATAFLAG1FieldNumber = 1;
    private string wR0DATAFLAG1_ = "";
    /// <summary>
    ///           PIC X(1).	1	X	1	0	0: 虛擬最佳化	資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR0DATAFLAG1 {
      get { return wR0DATAFLAG1_; }
      set {
        wR0DATAFLAG1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR0_DATA_FLAG_2" field.</summary>
    public const int WR0DATAFLAG2FieldNumber = 2;
    private string wR0DATAFLAG2_ = "";
    /// <summary>
    ///           PIC X(1).	1	X	1	0	     1:首筆 	子資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR0DATAFLAG2 {
      get { return wR0DATAFLAG2_; }
      set {
        wR0DATAFLAG2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR0_TR_ID" field.</summary>
    public const int WR0TRIDFieldNumber = 3;
    private string wR0TRID_ = "";
    /// <summary>
    ///                 PIC X(20).	20	X	20	0		期交所商品代號option:期交所編碼 (TXO + 05400履約價 + A_L:CALL,M_X:PUT...月 + 1年(2001) )fu: FITX,FITE,FITF,FIMTX (前七位名稱,後六位商品年月YYYYMM,後五位SPACES)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR0TRID {
      get { return wR0TRID_; }
      set {
        wR0TRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR0_B_QTY" field.</summary>
    public const int WR0BQTYFieldNumber = 4;
    private string wR0BQTY_ = "";
    /// <summary>
    ///                PIC 9(14) COMP.	8	C	14	0		買方    未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR0BQTY {
      get { return wR0BQTY_; }
      set {
        wR0BQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR0_B_O_QTY" field.</summary>
    public const int WR0BOQTYFieldNumber = 5;
    private string wR0BOQTY_ = "";
    /// <summary>
    ///              PIC 9(14) COMP.	8	C	14	0		買方      委託口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR0BOQTY {
      get { return wR0BOQTY_; }
      set {
        wR0BOQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR0_S_QTY" field.</summary>
    public const int WR0SQTYFieldNumber = 6;
    private string wR0SQTY_ = "";
    /// <summary>
    ///                PIC 9(14) COMP.	8	C	14	0		賣方    未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR0SQTY {
      get { return wR0SQTY_; }
      set {
        wR0SQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR0_S_O_QTY" field.</summary>
    public const int WR0SOQTYFieldNumber = 7;
    private string wR0SOQTY_ = "";
    /// <summary>
    ///              PIC 9(14) COMP.	8	C	14	0		賣方      委託口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR0SOQTY {
      get { return wR0SOQTY_; }
      set {
        wR0SOQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemResult_BEST_POSITION);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemResult_BEST_POSITION other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WR0DATAFLAG1 != other.WR0DATAFLAG1) return false;
      if (WR0DATAFLAG2 != other.WR0DATAFLAG2) return false;
      if (WR0TRID != other.WR0TRID) return false;
      if (WR0BQTY != other.WR0BQTY) return false;
      if (WR0BOQTY != other.WR0BOQTY) return false;
      if (WR0SQTY != other.WR0SQTY) return false;
      if (WR0SOQTY != other.WR0SOQTY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WR0DATAFLAG1.Length != 0) hash ^= WR0DATAFLAG1.GetHashCode();
      if (WR0DATAFLAG2.Length != 0) hash ^= WR0DATAFLAG2.GetHashCode();
      if (WR0TRID.Length != 0) hash ^= WR0TRID.GetHashCode();
      if (WR0BQTY.Length != 0) hash ^= WR0BQTY.GetHashCode();
      if (WR0BOQTY.Length != 0) hash ^= WR0BOQTY.GetHashCode();
      if (WR0SQTY.Length != 0) hash ^= WR0SQTY.GetHashCode();
      if (WR0SOQTY.Length != 0) hash ^= WR0SOQTY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WR0DATAFLAG1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WR0DATAFLAG1);
      }
      if (WR0DATAFLAG2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WR0DATAFLAG2);
      }
      if (WR0TRID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WR0TRID);
      }
      if (WR0BQTY.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WR0BQTY);
      }
      if (WR0BOQTY.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WR0BOQTY);
      }
      if (WR0SQTY.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WR0SQTY);
      }
      if (WR0SOQTY.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WR0SOQTY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WR0DATAFLAG1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR0DATAFLAG1);
      }
      if (WR0DATAFLAG2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR0DATAFLAG2);
      }
      if (WR0TRID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR0TRID);
      }
      if (WR0BQTY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR0BQTY);
      }
      if (WR0BOQTY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR0BOQTY);
      }
      if (WR0SQTY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR0SQTY);
      }
      if (WR0SOQTY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR0SOQTY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemResult_BEST_POSITION other) {
      if (other == null) {
        return;
      }
      if (other.WR0DATAFLAG1.Length != 0) {
        WR0DATAFLAG1 = other.WR0DATAFLAG1;
      }
      if (other.WR0DATAFLAG2.Length != 0) {
        WR0DATAFLAG2 = other.WR0DATAFLAG2;
      }
      if (other.WR0TRID.Length != 0) {
        WR0TRID = other.WR0TRID;
      }
      if (other.WR0BQTY.Length != 0) {
        WR0BQTY = other.WR0BQTY;
      }
      if (other.WR0BOQTY.Length != 0) {
        WR0BOQTY = other.WR0BOQTY;
      }
      if (other.WR0SQTY.Length != 0) {
        WR0SQTY = other.WR0SQTY;
      }
      if (other.WR0SOQTY.Length != 0) {
        WR0SOQTY = other.WR0SOQTY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WR0DATAFLAG1 = input.ReadString();
            break;
          }
          case 18: {
            WR0DATAFLAG2 = input.ReadString();
            break;
          }
          case 26: {
            WR0TRID = input.ReadString();
            break;
          }
          case 34: {
            WR0BQTY = input.ReadString();
            break;
          }
          case 42: {
            WR0BOQTY = input.ReadString();
            break;
          }
          case 50: {
            WR0SQTY = input.ReadString();
            break;
          }
          case 58: {
            WR0SOQTY = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// => TRANS_CODE = 51/52/53/54 之 1 未平倉彙總(新) (WR_READ_DATA) 明細格式如下 : (500 bytes)
  /// </summary>
  public sealed partial class TandemResult_AGGREGATE_NEW : pb::IMessage<TandemResult_AGGREGATE_NEW> {
    private static readonly pb::MessageParser<TandemResult_AGGREGATE_NEW> _parser = new pb::MessageParser<TandemResult_AGGREGATE_NEW>(() => new TandemResult_AGGREGATE_NEW());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemResult_AGGREGATE_NEW> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_AGGREGATE_NEW() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_AGGREGATE_NEW(TandemResult_AGGREGATE_NEW other) : this() {
      wR51DATAFLAG1_ = other.wR51DATAFLAG1_;
      wR51DATAFLAG2_ = other.wR51DATAFLAG2_;
      wR51TRID_ = other.wR51TRID_;
      wR51BTRID1_ = other.wR51BTRID1_;
      wR51BCOMMODITYNAME1_ = other.wR51BCOMMODITYNAME1_;
      wR51BCOMMODITYID1_ = other.wR51BCOMMODITYID1_;
      wR51BSETTLEMENTMONTH1_ = other.wR51BSETTLEMENTMONTH1_;
      wR51BSTRIKEPRICE1_ = other.wR51BSTRIKEPRICE1_;
      wR51BBUYSELLKIND1_ = other.wR51BBUYSELLKIND1_;
      wR51BSTOCKCODE1_ = other.wR51BSTOCKCODE1_;
      wR51BTRID2_ = other.wR51BTRID2_;
      wR51BCOMMODITYNAME2_ = other.wR51BCOMMODITYNAME2_;
      wR51BCOMMODITYID2_ = other.wR51BCOMMODITYID2_;
      wR51BSETTLEMENTMONTH2_ = other.wR51BSETTLEMENTMONTH2_;
      wR51BSTRIKEPRICE2_ = other.wR51BSTRIKEPRICE2_;
      wR51BBUYSELLKIND2_ = other.wR51BBUYSELLKIND2_;
      wR51BSTOCKCODE2_ = other.wR51BSTOCKCODE2_;
      wR51STRID1_ = other.wR51STRID1_;
      wR51SCOMMODITYNAME1_ = other.wR51SCOMMODITYNAME1_;
      wR51SCOMMODITYID1_ = other.wR51SCOMMODITYID1_;
      wR51SSETTLEMENTMONTH1_ = other.wR51SSETTLEMENTMONTH1_;
      wR51SSTRIKEPRICE1_ = other.wR51SSTRIKEPRICE1_;
      wR51SBUYSELLKIND1_ = other.wR51SBUYSELLKIND1_;
      wR51SSTOCKCODE1_ = other.wR51SSTOCKCODE1_;
      wR51STRID2_ = other.wR51STRID2_;
      wR51SCOMMODITYNAME2_ = other.wR51SCOMMODITYNAME2_;
      wR51SCOMMODITYID2_ = other.wR51SCOMMODITYID2_;
      wR51SSETTLEMENTMONTH2_ = other.wR51SSETTLEMENTMONTH2_;
      wR51SSTRIKEPRICE2_ = other.wR51SSTRIKEPRICE2_;
      wR51SBUYSELLKIND2_ = other.wR51SBUYSELLKIND2_;
      wR51SSTOCKCODE2_ = other.wR51SSTOCKCODE2_;
      wR51NCBQTY_ = other.wR51NCBQTY_;
      wR51NCBAVGPRICE_ = other.wR51NCBAVGPRICE_;
      wR51NCSQTY_ = other.wR51NCSQTY_;
      wR51NCSAVGPRICE_ = other.wR51NCSAVGPRICE_;
      wR51NOWPRICE_ = other.wR51NOWPRICE_;
      wR51CORKIND_ = other.wR51CORKIND_;
      wR51VARINCOME_ = other.wR51VARINCOME_;
      wR51ORDERBQTY_ = other.wR51ORDERBQTY_;
      wR51ORDERSQTY_ = other.wR51ORDERSQTY_;
      wR51TDSNEWOQTY_ = other.wR51TDSNEWOQTY_;
      wR51YESTERDAYPRICE_ = other.wR51YESTERDAYPRICE_;
      wR51STRATEGYCODE_ = other.wR51STRATEGYCODE_;
      wR51VARINCOMECURRENCY_ = other.wR51VARINCOMECURRENCY_;
      wR51FNCBQTY_ = other.wR51FNCBQTY_;
      wR51FNCSQTY_ = other.wR51FNCSQTY_;
      wR51TRADENCBQTY_ = other.wR51TRADENCBQTY_;
      wR51TRADENCSQTY_ = other.wR51TRADENCSQTY_;
      wR51SUBVARINCOME_ = other.wR51SUBVARINCOME_;
      wR51YESTERDAYPRICE2_ = other.wR51YESTERDAYPRICE2_;
      wR51NCBAVGPRICE4_ = other.wR51NCBAVGPRICE4_;
      wR51NCSAVGPRICE4_ = other.wR51NCSAVGPRICE4_;
      wR51SOURCEFLAG_ = other.wR51SOURCEFLAG_;
      fILLER_ = other.fILLER_;
      wR51BVARINCOME1_ = other.wR51BVARINCOME1_;
      wR51BVARINCOME2_ = other.wR51BVARINCOME2_;
      wR51BAVGPRICE1_ = other.wR51BAVGPRICE1_;
      wR51BAVGPRICE2_ = other.wR51BAVGPRICE2_;
      wR51BNOWPRICE1_ = other.wR51BNOWPRICE1_;
      wR51BNOWPRICE2_ = other.wR51BNOWPRICE2_;
      wR51SVARINCOME1_ = other.wR51SVARINCOME1_;
      wR51SVARINCOME2_ = other.wR51SVARINCOME2_;
      wR51SAVGPRICE1_ = other.wR51SAVGPRICE1_;
      wR51SAVGPRICE2_ = other.wR51SAVGPRICE2_;
      wR51SNOWPRICE1_ = other.wR51SNOWPRICE1_;
      wR51SNOWPRICE2_ = other.wR51SNOWPRICE2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemResult_AGGREGATE_NEW Clone() {
      return new TandemResult_AGGREGATE_NEW(this);
    }

    /// <summary>Field number for the "WR51_DATA_FLAG_1" field.</summary>
    public const int WR51DATAFLAG1FieldNumber = 1;
    private string wR51DATAFLAG1_ = "";
    /// <summary>
    ///             PIC X(1).	1	X	1	0	51:未平倉彙總(新)	資料類別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51DATAFLAG1 {
      get { return wR51DATAFLAG1_; }
      set {
        wR51DATAFLAG1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_DATA_FLAG_2" field.</summary>
    public const int WR51DATAFLAG2FieldNumber = 2;
    private string wR51DATAFLAG2_ = "";
    /// <summary>
    ///             PIC X(1).	1	X	1	0	     1:首筆 	子資料類別		2:同一商品或委託的第二筆(包含)及其以後的資料資料內容.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51DATAFLAG2 {
      get { return wR51DATAFLAG2_; }
      set {
        wR51DATAFLAG2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_TR_ID" field.</summary>
    public const int WR51TRIDFieldNumber = 3;
    private string wR51TRID_ = "";
    /// <summary>
    ///                   PIC X(20).	20	X	20	0		期交所商品代號		option:期交所編碼 (TXO + 05400履約價 + A_L:CALL,M_X:PUT...月 + 1年(2001) )fu: FITX,FITE,FITF,FIMTX (前七位名稱,後六位商品年月YYYYMM,後五位SPACES)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51TRID {
      get { return wR51TRID_; }
      set {
        wR51TRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_TR_ID_1" field.</summary>
    public const int WR51BTRID1FieldNumber = 4;
    private string wR51BTRID1_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BTRID1 {
      get { return wR51BTRID1_; }
      set {
        wR51BTRID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_COMMODITY_NAME_1" field.</summary>
    public const int WR51BCOMMODITYNAME1FieldNumber = 5;
    private string wR51BCOMMODITYNAME1_ = "";
    /// <summary>
    ///   PIC X(10).	10	X	10	0		買方  商品１                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BCOMMODITYNAME1 {
      get { return wR51BCOMMODITYNAME1_; }
      set {
        wR51BCOMMODITYNAME1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_COMMODITY_ID_1" field.</summary>
    public const int WR51BCOMMODITYID1FieldNumber = 6;
    private string wR51BCOMMODITYID1_ = "";
    /// <summary>
    ///     PIC X(7).	7	X	7	0		買方  商品１                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BCOMMODITYID1 {
      get { return wR51BCOMMODITYID1_; }
      set {
        wR51BCOMMODITYID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_SETTLEMENT_MONTH_1" field.</summary>
    public const int WR51BSETTLEMENTMONTH1FieldNumber = 7;
    private string wR51BSETTLEMENTMONTH1_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		買方  商品１           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BSETTLEMENTMONTH1 {
      get { return wR51BSETTLEMENTMONTH1_; }
      set {
        wR51BSETTLEMENTMONTH1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_STRIKE_PRICE_1" field.</summary>
    public const int WR51BSTRIKEPRICE1FieldNumber = 8;
    private string wR51BSTRIKEPRICE1_ = "";
    /// <summary>
    ///     PIC 9(6)V9(3).	9	9	6	3		買方  商品１               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BSTRIKEPRICE1 {
      get { return wR51BSTRIKEPRICE1_; }
      set {
        wR51BSTRIKEPRICE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_BUY_SELL_KIND_1" field.</summary>
    public const int WR51BBUYSELLKIND1FieldNumber = 9;
    private string wR51BBUYSELLKIND1_ = "";
    /// <summary>
    ///    PIC X(1).	1	X	1	0		買方  商品１               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BBUYSELLKIND1 {
      get { return wR51BBUYSELLKIND1_; }
      set {
        wR51BBUYSELLKIND1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_STOCK_CODE_1" field.</summary>
    public const int WR51BSTOCKCODE1FieldNumber = 10;
    private string wR51BSTOCKCODE1_ = "";
    /// <summary>
    ///       PIC X(07).	7	X	7	0		買方  商品１   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BSTOCKCODE1 {
      get { return wR51BSTOCKCODE1_; }
      set {
        wR51BSTOCKCODE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_TR_ID_2" field.</summary>
    public const int WR51BTRID2FieldNumber = 11;
    private string wR51BTRID2_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BTRID2 {
      get { return wR51BTRID2_; }
      set {
        wR51BTRID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_COMMODITY_NAME_2" field.</summary>
    public const int WR51BCOMMODITYNAME2FieldNumber = 12;
    private string wR51BCOMMODITYNAME2_ = "";
    /// <summary>
    ///   PIC X(10).	10	X	10	0		買方  商品２                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BCOMMODITYNAME2 {
      get { return wR51BCOMMODITYNAME2_; }
      set {
        wR51BCOMMODITYNAME2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_COMMODITY_ID_2" field.</summary>
    public const int WR51BCOMMODITYID2FieldNumber = 13;
    private string wR51BCOMMODITYID2_ = "";
    /// <summary>
    ///     PIC X(7).	7	X	7	0		買方  商品２                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BCOMMODITYID2 {
      get { return wR51BCOMMODITYID2_; }
      set {
        wR51BCOMMODITYID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_SETTLEMENT_MONTH_2" field.</summary>
    public const int WR51BSETTLEMENTMONTH2FieldNumber = 14;
    private string wR51BSETTLEMENTMONTH2_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		買方  商品２           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BSETTLEMENTMONTH2 {
      get { return wR51BSETTLEMENTMONTH2_; }
      set {
        wR51BSETTLEMENTMONTH2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_STRIKE_PRICE_2" field.</summary>
    public const int WR51BSTRIKEPRICE2FieldNumber = 15;
    private string wR51BSTRIKEPRICE2_ = "";
    /// <summary>
    ///     PIC 9(6)V9(3).	9	9	6	3		買方  商品２               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BSTRIKEPRICE2 {
      get { return wR51BSTRIKEPRICE2_; }
      set {
        wR51BSTRIKEPRICE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_BUY_SELL_KIND_2" field.</summary>
    public const int WR51BBUYSELLKIND2FieldNumber = 16;
    private string wR51BBUYSELLKIND2_ = "";
    /// <summary>
    ///    PIC X(1).	1	X	1	0		買方  商品２               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BBUYSELLKIND2 {
      get { return wR51BBUYSELLKIND2_; }
      set {
        wR51BBUYSELLKIND2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_STOCK_CODE_2" field.</summary>
    public const int WR51BSTOCKCODE2FieldNumber = 17;
    private string wR51BSTOCKCODE2_ = "";
    /// <summary>
    ///       PIC X(07).	7	X	7	0		買方  商品２   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BSTOCKCODE2 {
      get { return wR51BSTOCKCODE2_; }
      set {
        wR51BSTOCKCODE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_TR_ID_1" field.</summary>
    public const int WR51STRID1FieldNumber = 18;
    private string wR51STRID1_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51STRID1 {
      get { return wR51STRID1_; }
      set {
        wR51STRID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_COMMODITY_NAME_1" field.</summary>
    public const int WR51SCOMMODITYNAME1FieldNumber = 19;
    private string wR51SCOMMODITYNAME1_ = "";
    /// <summary>
    ///   PIC X(10).	10	X	10	0		賣方  商品１                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SCOMMODITYNAME1 {
      get { return wR51SCOMMODITYNAME1_; }
      set {
        wR51SCOMMODITYNAME1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_COMMODITY_ID_1" field.</summary>
    public const int WR51SCOMMODITYID1FieldNumber = 20;
    private string wR51SCOMMODITYID1_ = "";
    /// <summary>
    ///     PIC X(7).	7	X	7	0		賣方  商品１                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SCOMMODITYID1 {
      get { return wR51SCOMMODITYID1_; }
      set {
        wR51SCOMMODITYID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_SETTLEMENT_MONTH_1" field.</summary>
    public const int WR51SSETTLEMENTMONTH1FieldNumber = 21;
    private string wR51SSETTLEMENTMONTH1_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		賣方  商品１           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SSETTLEMENTMONTH1 {
      get { return wR51SSETTLEMENTMONTH1_; }
      set {
        wR51SSETTLEMENTMONTH1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_STRIKE_PRICE_1" field.</summary>
    public const int WR51SSTRIKEPRICE1FieldNumber = 22;
    private string wR51SSTRIKEPRICE1_ = "";
    /// <summary>
    ///     PIC 9(6)V9(3).	9	9	6	3		賣方  商品１               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SSTRIKEPRICE1 {
      get { return wR51SSTRIKEPRICE1_; }
      set {
        wR51SSTRIKEPRICE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_BUY_SELL_KIND_1" field.</summary>
    public const int WR51SBUYSELLKIND1FieldNumber = 23;
    private string wR51SBUYSELLKIND1_ = "";
    /// <summary>
    ///    PIC X(1).	1	X	1	0		賣方  商品１               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SBUYSELLKIND1 {
      get { return wR51SBUYSELLKIND1_; }
      set {
        wR51SBUYSELLKIND1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_STOCK_CODE_1" field.</summary>
    public const int WR51SSTOCKCODE1FieldNumber = 24;
    private string wR51SSTOCKCODE1_ = "";
    /// <summary>
    ///       PIC X(07).	7	X	7	0		賣方  商品１   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SSTOCKCODE1 {
      get { return wR51SSTOCKCODE1_; }
      set {
        wR51SSTOCKCODE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_TR_ID_2" field.</summary>
    public const int WR51STRID2FieldNumber = 25;
    private string wR51STRID2_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51STRID2 {
      get { return wR51STRID2_; }
      set {
        wR51STRID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_COMMODITY_NAME_2" field.</summary>
    public const int WR51SCOMMODITYNAME2FieldNumber = 26;
    private string wR51SCOMMODITYNAME2_ = "";
    /// <summary>
    ///   PIC X(10).	10	X	10	0		賣方  商品２                 簡稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SCOMMODITYNAME2 {
      get { return wR51SCOMMODITYNAME2_; }
      set {
        wR51SCOMMODITYNAME2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_COMMODITY_ID_2" field.</summary>
    public const int WR51SCOMMODITYID2FieldNumber = 27;
    private string wR51SCOMMODITYID2_ = "";
    /// <summary>
    ///     PIC X(7).	7	X	7	0		賣方  商品２                 代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SCOMMODITYID2 {
      get { return wR51SCOMMODITYID2_; }
      set {
        wR51SCOMMODITYID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_SETTLEMENT_MONTH_2" field.</summary>
    public const int WR51SSETTLEMENTMONTH2FieldNumber = 28;
    private string wR51SSETTLEMENTMONTH2_ = "";
    /// <summary>
    /// PIC 9(6).	6	9	6	0		賣方  商品２           年月YYYYMM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SSETTLEMENTMONTH2 {
      get { return wR51SSETTLEMENTMONTH2_; }
      set {
        wR51SSETTLEMENTMONTH2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_STRIKE_PRICE_2" field.</summary>
    public const int WR51SSTRIKEPRICE2FieldNumber = 29;
    private string wR51SSTRIKEPRICE2_ = "";
    /// <summary>
    ///     PIC 9(6)V9(3).	9	9	6	3		賣方  商品２               履約價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SSTRIKEPRICE2 {
      get { return wR51SSTRIKEPRICE2_; }
      set {
        wR51SSTRIKEPRICE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_BUY_SELL_KIND_2" field.</summary>
    public const int WR51SBUYSELLKIND2FieldNumber = 30;
    private string wR51SBUYSELLKIND2_ = "";
    /// <summary>
    ///    PIC X(1).	1	X	1	0		賣方  商品２               買賣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SBUYSELLKIND2 {
      get { return wR51SBUYSELLKIND2_; }
      set {
        wR51SBUYSELLKIND2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_STOCK_CODE_2" field.</summary>
    public const int WR51SSTOCKCODE2FieldNumber = 31;
    private string wR51SSTOCKCODE2_ = "";
    /// <summary>
    ///       PIC X(07).	7	X	7	0		賣方  商品２   個股選擇權股票代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SSTOCKCODE2 {
      get { return wR51SSTOCKCODE2_; }
      set {
        wR51SSTOCKCODE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_NC_B_QTY" field.</summary>
    public const int WR51NCBQTYFieldNumber = 32;
    private string wR51NCBQTY_ = "";
    /// <summary>
    ///         PIC 9(14) COMP.	8	C	14	0		買方     未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51NCBQTY {
      get { return wR51NCBQTY_; }
      set {
        wR51NCBQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_NC_B_AVG_PRICE" field.</summary>
    public const int WR51NCBAVGPRICEFieldNumber = 33;
    private string wR51NCBAVGPRICE_ = "";
    /// <summary>
    ///   PIC S9(9)V9(9) COMP.	8	C	9	9	小數9位	買方   未平倉平均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51NCBAVGPRICE {
      get { return wR51NCBAVGPRICE_; }
      set {
        wR51NCBAVGPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_NC_S_QTY" field.</summary>
    public const int WR51NCSQTYFieldNumber = 34;
    private string wR51NCSQTY_ = "";
    /// <summary>
    ///         PIC 9(14) COMP.	8	C	14	0		賣方     未平倉口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51NCSQTY {
      get { return wR51NCSQTY_; }
      set {
        wR51NCSQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_NC_S_AVG_PRICE" field.</summary>
    public const int WR51NCSAVGPRICEFieldNumber = 35;
    private string wR51NCSAVGPRICE_ = "";
    /// <summary>
    ///   PIC S9(9)V9(9) COMP.	8	C	9	9	小數9位	賣方   未平倉平均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51NCSAVGPRICE {
      get { return wR51NCSAVGPRICE_; }
      set {
        wR51NCSAVGPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_NOW_PRICE" field.</summary>
    public const int WR51NOWPRICEFieldNumber = 36;
    private string wR51NOWPRICE_ = "";
    /// <summary>
    ///        PIC S9(9)V9(9) COMP.	8	C	9	9	fu: 現價	現(理)價	option:理論價格option組合單:價差或價和
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51NOWPRICE {
      get { return wR51NOWPRICE_; }
      set {
        wR51NOWPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_COR_KIND" field.</summary>
    public const int WR51CORKINDFieldNumber = 37;
    private string wR51CORKIND_ = "";
    /// <summary>
    ///         PIC X(02). 	2	X	2	0	差:價差 "和":價和	 option組合單價差或價和記號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51CORKIND {
      get { return wR51CORKIND_; }
      set {
        wR51CORKIND_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_VAR_INCOME" field.</summary>
    public const int WR51VARINCOMEFieldNumber = 38;
    private string wR51VARINCOME_ = "";
    /// <summary>
    ///       PIC S9(14)V9(2) COMP.	8	C	14	2		期貨:未平倉損益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51VARINCOME {
      get { return wR51VARINCOME_; }
      set {
        wR51VARINCOME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_ORDER_B_QTY" field.</summary>
    public const int WR51ORDERBQTYFieldNumber = 39;
    private string wR51ORDERBQTY_ = "";
    /// <summary>
    ///      PIC 9(14) COMP.	8	C	14	0		買方   委託未成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51ORDERBQTY {
      get { return wR51ORDERBQTY_; }
      set {
        wR51ORDERBQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_ORDER_S_QTY" field.</summary>
    public const int WR51ORDERSQTYFieldNumber = 40;
    private string wR51ORDERSQTY_ = "";
    /// <summary>
    ///      PIC 9(14) COMP.	8	C	14	0		賣方   委託未成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51ORDERSQTY {
      get { return wR51ORDERSQTY_; }
      set {
        wR51ORDERSQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_TD_S_NEW_O_QTY" field.</summary>
    public const int WR51TDSNEWOQTYFieldNumber = 41;
    private string wR51TDSNEWOQTY_ = "";
    /// <summary>
    ///   PIC 9(14) COMP.	8	C	14	0		今日期權賣出新倉委託未成交口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51TDSNEWOQTY {
      get { return wR51TDSNEWOQTY_; }
      set {
        wR51TDSNEWOQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_YESTERDAY_PRICE" field.</summary>
    public const int WR51YESTERDAYPRICEFieldNumber = 42;
    private string wR51YESTERDAYPRICE_ = "";
    /// <summary>
    ///  PIC S9(9)V9(9) COMP.	8	C	9	9		昨日結算價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51YESTERDAYPRICE {
      get { return wR51YESTERDAYPRICE_; }
      set {
        wR51YESTERDAYPRICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_STRATEGY_CODE" field.</summary>
    public const int WR51STRATEGYCODEFieldNumber = 43;
    private string wR51STRATEGYCODE_ = "";
    /// <summary>
    ///    PIC X(5).	5	X	5	0	(本欄位為TPMS專用,沒用到的會回SPACE)	策略代號(TMPS)	FILLER	策略代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51STRATEGYCODE {
      get { return wR51STRATEGYCODE_; }
      set {
        wR51STRATEGYCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_VAR_INCOME_CURRENCY" field.</summary>
    public const int WR51VARINCOMECURRENCYFieldNumber = 44;
    private string wR51VARINCOMECURRENCY_ = "";
    /// <summary>
    /// PIC X(1).	1	X	1	0	請注意,不同幣別之金額需分開計算.	"N":台幣 "U"美金 "R":人民幣	浮動損益幣別	FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51VARINCOMECURRENCY {
      get { return wR51VARINCOMECURRENCY_; }
      set {
        wR51VARINCOMECURRENCY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_F_NC_B_QTY" field.</summary>
    public const int WR51FNCBQTYFieldNumber = 45;
    private string wR51FNCBQTY_ = "";
    /// <summary>
    ///       PIC 9(14) COMP.	8	C	14	0	買期貨口數	期加權商品之 期貨商品 買方 未平倉口數		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51FNCBQTY {
      get { return wR51FNCBQTY_; }
      set {
        wR51FNCBQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_F_NC_S_QTY" field.</summary>
    public const int WR51FNCSQTYFieldNumber = 46;
    private string wR51FNCSQTY_ = "";
    /// <summary>
    ///       PIC 9(14) COMP.	8	C	14	0	賣期貨口數	期加權商品之 期貨商品 賣方 未平倉口數		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51FNCSQTY {
      get { return wR51FNCSQTY_; }
      set {
        wR51FNCSQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_TRADE_NC_B_QTY" field.</summary>
    public const int WR51TRADENCBQTYFieldNumber = 47;
    private string wR51TRADENCBQTY_ = "";
    /// <summary>
    ///   PIC 9(08) COMP.	4	C	8	0	當沖口數	買方新倉 當沖口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51TRADENCBQTY {
      get { return wR51TRADENCBQTY_; }
      set {
        wR51TRADENCBQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_TRADE_NC_S_QTY" field.</summary>
    public const int WR51TRADENCSQTYFieldNumber = 48;
    private string wR51TRADENCSQTY_ = "";
    /// <summary>
    ///   PIC 9(08) COMP.	4	C	8	0	當沖口數	賣方新倉 當沖口數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51TRADENCSQTY {
      get { return wR51TRADENCSQTY_; }
      set {
        wR51TRADENCSQTY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_SUB_VAR_INCOME" field.</summary>
    public const int WR51SUBVARINCOMEFieldNumber = 49;
    private string wR51SUBVARINCOME_ = "";
    /// <summary>
    ///   PIC S9(14)V9(2) COMP.	8	C	14	2	計算 盤中可用餘額 損益賺不算金額	賺不算金額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SUBVARINCOME {
      get { return wR51SUBVARINCOME_; }
      set {
        wR51SUBVARINCOME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_YESTERDAY_PRICE_2" field.</summary>
    public const int WR51YESTERDAYPRICE2FieldNumber = 50;
    private string wR51YESTERDAYPRICE2_ = "";
    /// <summary>
    ///  PIC 9(9)V9(9) COMP.	8	C	9	9	昨日結算價	期貨價差 商品二昨日結算價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51YESTERDAYPRICE2 {
      get { return wR51YESTERDAYPRICE2_; }
      set {
        wR51YESTERDAYPRICE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_NC_B_AVG_PRICE_4" field.</summary>
    public const int WR51NCBAVGPRICE4FieldNumber = 51;
    private string wR51NCBAVGPRICE4_ = "";
    /// <summary>
    /// PIC S9(6)V9(4) COMP.					小數四位(後台為小數三位)	買方   未平倉平均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51NCBAVGPRICE4 {
      get { return wR51NCBAVGPRICE4_; }
      set {
        wR51NCBAVGPRICE4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_NC_S_AVG_PRICE_4" field.</summary>
    public const int WR51NCSAVGPRICE4FieldNumber = 52;
    private string wR51NCSAVGPRICE4_ = "";
    /// <summary>
    /// PIC S9(6)V9(4) COMP.					小數四位(後台為小數三位)	賣方   未平倉平均價
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51NCSAVGPRICE4 {
      get { return wR51NCSAVGPRICE4_; }
      set {
        wR51NCSAVGPRICE4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_SOURCE_FLAG" field.</summary>
    public const int WR51SOURCEFLAGFieldNumber = 53;
    private string wR51SOURCEFLAG_ = "";
    /// <summary>
    ///      PIC X(1).	1	X	1	0	Y':可委託之選擇權組合單 OR SPACE:期交所無此組合商品(COR_SOURCE_FLAG)	可委託選擇權組合單註記('Y' OR SPACE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SOURCEFLAG {
      get { return wR51SOURCEFLAG_; }
      set {
        wR51SOURCEFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER" field.</summary>
    public const int FILLERFieldNumber = 54;
    private string fILLER_ = "";
    /// <summary>
    ///                PIC X(93).	93	X	93	0	X(29)=>X(93) SPACE	FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER {
      get { return fILLER_; }
      set {
        fILLER_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_VAR_INCOME_1" field.</summary>
    public const int WR51BVARINCOME1FieldNumber = 55;
    private string wR51BVARINCOME1_ = "";
    /// <summary>
    ///   PIC S9(14)V9(2) COMP.	8	C	14	2	如果只顯示買方損益則請直接將商品１商品２兩個數字加起來即可,無須任何判斷.	買方  商品１   未平倉損益預估		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BVARINCOME1 {
      get { return wR51BVARINCOME1_; }
      set {
        wR51BVARINCOME1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_VAR_INCOME_2" field.</summary>
    public const int WR51BVARINCOME2FieldNumber = 56;
    private string wR51BVARINCOME2_ = "";
    /// <summary>
    ///   PIC S9(14)V9(2) COMP.	8	C	14	2		買方  商品２   未平倉損益預估		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BVARINCOME2 {
      get { return wR51BVARINCOME2_; }
      set {
        wR51BVARINCOME2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_AVG_PRICE_1" field.</summary>
    public const int WR51BAVGPRICE1FieldNumber = 57;
    private string wR51BAVGPRICE1_ = "";
    /// <summary>
    ///    PIC 9(9)V9(9) COMP.	8	C	9	9	資料驗證使用請可以FIDDEN方式顯示.	買方  商品１            均價		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BAVGPRICE1 {
      get { return wR51BAVGPRICE1_; }
      set {
        wR51BAVGPRICE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_AVG_PRICE_2" field.</summary>
    public const int WR51BAVGPRICE2FieldNumber = 58;
    private string wR51BAVGPRICE2_ = "";
    /// <summary>
    ///    PIC 9(9)V9(9) COMP.	8	C	9	9	資料驗證使用請可以FIDDEN方式顯示.	買方  商品２            均價		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BAVGPRICE2 {
      get { return wR51BAVGPRICE2_; }
      set {
        wR51BAVGPRICE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_NOW_PRICE_1" field.</summary>
    public const int WR51BNOWPRICE1FieldNumber = 59;
    private string wR51BNOWPRICE1_ = "";
    /// <summary>
    ///    PIC 9(9)V9(9) COMP.	8	C	9	9	資料驗證使用請可以FIDDEN方式顯示.	買方  商品１         現(理)價		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BNOWPRICE1 {
      get { return wR51BNOWPRICE1_; }
      set {
        wR51BNOWPRICE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_B_NOW_PRICE_2" field.</summary>
    public const int WR51BNOWPRICE2FieldNumber = 60;
    private string wR51BNOWPRICE2_ = "";
    /// <summary>
    ///    PIC 9(9)V9(9) COMP.	8	C	9	9	資料驗證使用請可以FIDDEN方式顯示.	買方  商品２         現(理)價		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51BNOWPRICE2 {
      get { return wR51BNOWPRICE2_; }
      set {
        wR51BNOWPRICE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_VAR_INCOME_1" field.</summary>
    public const int WR51SVARINCOME1FieldNumber = 61;
    private string wR51SVARINCOME1_ = "";
    /// <summary>
    ///   PIC S9(14)V9(2) COMP.	8	C	14	2	如果只顯示賣方損益則請直接將商品１商品２兩個數字加起來即可,無須任何判斷.	賣方  商品１   未平倉損益預估		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SVARINCOME1 {
      get { return wR51SVARINCOME1_; }
      set {
        wR51SVARINCOME1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_VAR_INCOME_2" field.</summary>
    public const int WR51SVARINCOME2FieldNumber = 62;
    private string wR51SVARINCOME2_ = "";
    /// <summary>
    ///   PIC S9(14)V9(2) COMP.	8	C	14	2		賣方  商品２   未平倉損益預估		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SVARINCOME2 {
      get { return wR51SVARINCOME2_; }
      set {
        wR51SVARINCOME2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_AVG_PRICE_1" field.</summary>
    public const int WR51SAVGPRICE1FieldNumber = 63;
    private string wR51SAVGPRICE1_ = "";
    /// <summary>
    ///    PIC 9(9)V9(9) COMP.	8	C	9	9	資料驗證使用請可以FIDDEN方式顯示.	賣方  商品１            均價		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SAVGPRICE1 {
      get { return wR51SAVGPRICE1_; }
      set {
        wR51SAVGPRICE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_AVG_PRICE_2" field.</summary>
    public const int WR51SAVGPRICE2FieldNumber = 64;
    private string wR51SAVGPRICE2_ = "";
    /// <summary>
    ///    PIC 9(9)V9(9) COMP.	8	C	9	9	資料驗證使用請可以FIDDEN方式顯示.	賣方  商品２            均價		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SAVGPRICE2 {
      get { return wR51SAVGPRICE2_; }
      set {
        wR51SAVGPRICE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_NOW_PRICE_1" field.</summary>
    public const int WR51SNOWPRICE1FieldNumber = 65;
    private string wR51SNOWPRICE1_ = "";
    /// <summary>
    ///    PIC 9(9)V9(9) COMP.	8	C	9	9	資料驗證使用請可以FIDDEN方式顯示.	賣方  商品１         現(理)價		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SNOWPRICE1 {
      get { return wR51SNOWPRICE1_; }
      set {
        wR51SNOWPRICE1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR51_S_NOW_PRICE_2" field.</summary>
    public const int WR51SNOWPRICE2FieldNumber = 66;
    private string wR51SNOWPRICE2_ = "";
    /// <summary>
    ///    PIC 9(9)V9(9) COMP.	8	C	9	9	資料驗證使用請可以FIDDEN方式顯示.	賣方  商品２         現(理)價		FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WR51SNOWPRICE2 {
      get { return wR51SNOWPRICE2_; }
      set {
        wR51SNOWPRICE2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemResult_AGGREGATE_NEW);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemResult_AGGREGATE_NEW other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WR51DATAFLAG1 != other.WR51DATAFLAG1) return false;
      if (WR51DATAFLAG2 != other.WR51DATAFLAG2) return false;
      if (WR51TRID != other.WR51TRID) return false;
      if (WR51BTRID1 != other.WR51BTRID1) return false;
      if (WR51BCOMMODITYNAME1 != other.WR51BCOMMODITYNAME1) return false;
      if (WR51BCOMMODITYID1 != other.WR51BCOMMODITYID1) return false;
      if (WR51BSETTLEMENTMONTH1 != other.WR51BSETTLEMENTMONTH1) return false;
      if (WR51BSTRIKEPRICE1 != other.WR51BSTRIKEPRICE1) return false;
      if (WR51BBUYSELLKIND1 != other.WR51BBUYSELLKIND1) return false;
      if (WR51BSTOCKCODE1 != other.WR51BSTOCKCODE1) return false;
      if (WR51BTRID2 != other.WR51BTRID2) return false;
      if (WR51BCOMMODITYNAME2 != other.WR51BCOMMODITYNAME2) return false;
      if (WR51BCOMMODITYID2 != other.WR51BCOMMODITYID2) return false;
      if (WR51BSETTLEMENTMONTH2 != other.WR51BSETTLEMENTMONTH2) return false;
      if (WR51BSTRIKEPRICE2 != other.WR51BSTRIKEPRICE2) return false;
      if (WR51BBUYSELLKIND2 != other.WR51BBUYSELLKIND2) return false;
      if (WR51BSTOCKCODE2 != other.WR51BSTOCKCODE2) return false;
      if (WR51STRID1 != other.WR51STRID1) return false;
      if (WR51SCOMMODITYNAME1 != other.WR51SCOMMODITYNAME1) return false;
      if (WR51SCOMMODITYID1 != other.WR51SCOMMODITYID1) return false;
      if (WR51SSETTLEMENTMONTH1 != other.WR51SSETTLEMENTMONTH1) return false;
      if (WR51SSTRIKEPRICE1 != other.WR51SSTRIKEPRICE1) return false;
      if (WR51SBUYSELLKIND1 != other.WR51SBUYSELLKIND1) return false;
      if (WR51SSTOCKCODE1 != other.WR51SSTOCKCODE1) return false;
      if (WR51STRID2 != other.WR51STRID2) return false;
      if (WR51SCOMMODITYNAME2 != other.WR51SCOMMODITYNAME2) return false;
      if (WR51SCOMMODITYID2 != other.WR51SCOMMODITYID2) return false;
      if (WR51SSETTLEMENTMONTH2 != other.WR51SSETTLEMENTMONTH2) return false;
      if (WR51SSTRIKEPRICE2 != other.WR51SSTRIKEPRICE2) return false;
      if (WR51SBUYSELLKIND2 != other.WR51SBUYSELLKIND2) return false;
      if (WR51SSTOCKCODE2 != other.WR51SSTOCKCODE2) return false;
      if (WR51NCBQTY != other.WR51NCBQTY) return false;
      if (WR51NCBAVGPRICE != other.WR51NCBAVGPRICE) return false;
      if (WR51NCSQTY != other.WR51NCSQTY) return false;
      if (WR51NCSAVGPRICE != other.WR51NCSAVGPRICE) return false;
      if (WR51NOWPRICE != other.WR51NOWPRICE) return false;
      if (WR51CORKIND != other.WR51CORKIND) return false;
      if (WR51VARINCOME != other.WR51VARINCOME) return false;
      if (WR51ORDERBQTY != other.WR51ORDERBQTY) return false;
      if (WR51ORDERSQTY != other.WR51ORDERSQTY) return false;
      if (WR51TDSNEWOQTY != other.WR51TDSNEWOQTY) return false;
      if (WR51YESTERDAYPRICE != other.WR51YESTERDAYPRICE) return false;
      if (WR51STRATEGYCODE != other.WR51STRATEGYCODE) return false;
      if (WR51VARINCOMECURRENCY != other.WR51VARINCOMECURRENCY) return false;
      if (WR51FNCBQTY != other.WR51FNCBQTY) return false;
      if (WR51FNCSQTY != other.WR51FNCSQTY) return false;
      if (WR51TRADENCBQTY != other.WR51TRADENCBQTY) return false;
      if (WR51TRADENCSQTY != other.WR51TRADENCSQTY) return false;
      if (WR51SUBVARINCOME != other.WR51SUBVARINCOME) return false;
      if (WR51YESTERDAYPRICE2 != other.WR51YESTERDAYPRICE2) return false;
      if (WR51NCBAVGPRICE4 != other.WR51NCBAVGPRICE4) return false;
      if (WR51NCSAVGPRICE4 != other.WR51NCSAVGPRICE4) return false;
      if (WR51SOURCEFLAG != other.WR51SOURCEFLAG) return false;
      if (FILLER != other.FILLER) return false;
      if (WR51BVARINCOME1 != other.WR51BVARINCOME1) return false;
      if (WR51BVARINCOME2 != other.WR51BVARINCOME2) return false;
      if (WR51BAVGPRICE1 != other.WR51BAVGPRICE1) return false;
      if (WR51BAVGPRICE2 != other.WR51BAVGPRICE2) return false;
      if (WR51BNOWPRICE1 != other.WR51BNOWPRICE1) return false;
      if (WR51BNOWPRICE2 != other.WR51BNOWPRICE2) return false;
      if (WR51SVARINCOME1 != other.WR51SVARINCOME1) return false;
      if (WR51SVARINCOME2 != other.WR51SVARINCOME2) return false;
      if (WR51SAVGPRICE1 != other.WR51SAVGPRICE1) return false;
      if (WR51SAVGPRICE2 != other.WR51SAVGPRICE2) return false;
      if (WR51SNOWPRICE1 != other.WR51SNOWPRICE1) return false;
      if (WR51SNOWPRICE2 != other.WR51SNOWPRICE2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WR51DATAFLAG1.Length != 0) hash ^= WR51DATAFLAG1.GetHashCode();
      if (WR51DATAFLAG2.Length != 0) hash ^= WR51DATAFLAG2.GetHashCode();
      if (WR51TRID.Length != 0) hash ^= WR51TRID.GetHashCode();
      if (WR51BTRID1.Length != 0) hash ^= WR51BTRID1.GetHashCode();
      if (WR51BCOMMODITYNAME1.Length != 0) hash ^= WR51BCOMMODITYNAME1.GetHashCode();
      if (WR51BCOMMODITYID1.Length != 0) hash ^= WR51BCOMMODITYID1.GetHashCode();
      if (WR51BSETTLEMENTMONTH1.Length != 0) hash ^= WR51BSETTLEMENTMONTH1.GetHashCode();
      if (WR51BSTRIKEPRICE1.Length != 0) hash ^= WR51BSTRIKEPRICE1.GetHashCode();
      if (WR51BBUYSELLKIND1.Length != 0) hash ^= WR51BBUYSELLKIND1.GetHashCode();
      if (WR51BSTOCKCODE1.Length != 0) hash ^= WR51BSTOCKCODE1.GetHashCode();
      if (WR51BTRID2.Length != 0) hash ^= WR51BTRID2.GetHashCode();
      if (WR51BCOMMODITYNAME2.Length != 0) hash ^= WR51BCOMMODITYNAME2.GetHashCode();
      if (WR51BCOMMODITYID2.Length != 0) hash ^= WR51BCOMMODITYID2.GetHashCode();
      if (WR51BSETTLEMENTMONTH2.Length != 0) hash ^= WR51BSETTLEMENTMONTH2.GetHashCode();
      if (WR51BSTRIKEPRICE2.Length != 0) hash ^= WR51BSTRIKEPRICE2.GetHashCode();
      if (WR51BBUYSELLKIND2.Length != 0) hash ^= WR51BBUYSELLKIND2.GetHashCode();
      if (WR51BSTOCKCODE2.Length != 0) hash ^= WR51BSTOCKCODE2.GetHashCode();
      if (WR51STRID1.Length != 0) hash ^= WR51STRID1.GetHashCode();
      if (WR51SCOMMODITYNAME1.Length != 0) hash ^= WR51SCOMMODITYNAME1.GetHashCode();
      if (WR51SCOMMODITYID1.Length != 0) hash ^= WR51SCOMMODITYID1.GetHashCode();
      if (WR51SSETTLEMENTMONTH1.Length != 0) hash ^= WR51SSETTLEMENTMONTH1.GetHashCode();
      if (WR51SSTRIKEPRICE1.Length != 0) hash ^= WR51SSTRIKEPRICE1.GetHashCode();
      if (WR51SBUYSELLKIND1.Length != 0) hash ^= WR51SBUYSELLKIND1.GetHashCode();
      if (WR51SSTOCKCODE1.Length != 0) hash ^= WR51SSTOCKCODE1.GetHashCode();
      if (WR51STRID2.Length != 0) hash ^= WR51STRID2.GetHashCode();
      if (WR51SCOMMODITYNAME2.Length != 0) hash ^= WR51SCOMMODITYNAME2.GetHashCode();
      if (WR51SCOMMODITYID2.Length != 0) hash ^= WR51SCOMMODITYID2.GetHashCode();
      if (WR51SSETTLEMENTMONTH2.Length != 0) hash ^= WR51SSETTLEMENTMONTH2.GetHashCode();
      if (WR51SSTRIKEPRICE2.Length != 0) hash ^= WR51SSTRIKEPRICE2.GetHashCode();
      if (WR51SBUYSELLKIND2.Length != 0) hash ^= WR51SBUYSELLKIND2.GetHashCode();
      if (WR51SSTOCKCODE2.Length != 0) hash ^= WR51SSTOCKCODE2.GetHashCode();
      if (WR51NCBQTY.Length != 0) hash ^= WR51NCBQTY.GetHashCode();
      if (WR51NCBAVGPRICE.Length != 0) hash ^= WR51NCBAVGPRICE.GetHashCode();
      if (WR51NCSQTY.Length != 0) hash ^= WR51NCSQTY.GetHashCode();
      if (WR51NCSAVGPRICE.Length != 0) hash ^= WR51NCSAVGPRICE.GetHashCode();
      if (WR51NOWPRICE.Length != 0) hash ^= WR51NOWPRICE.GetHashCode();
      if (WR51CORKIND.Length != 0) hash ^= WR51CORKIND.GetHashCode();
      if (WR51VARINCOME.Length != 0) hash ^= WR51VARINCOME.GetHashCode();
      if (WR51ORDERBQTY.Length != 0) hash ^= WR51ORDERBQTY.GetHashCode();
      if (WR51ORDERSQTY.Length != 0) hash ^= WR51ORDERSQTY.GetHashCode();
      if (WR51TDSNEWOQTY.Length != 0) hash ^= WR51TDSNEWOQTY.GetHashCode();
      if (WR51YESTERDAYPRICE.Length != 0) hash ^= WR51YESTERDAYPRICE.GetHashCode();
      if (WR51STRATEGYCODE.Length != 0) hash ^= WR51STRATEGYCODE.GetHashCode();
      if (WR51VARINCOMECURRENCY.Length != 0) hash ^= WR51VARINCOMECURRENCY.GetHashCode();
      if (WR51FNCBQTY.Length != 0) hash ^= WR51FNCBQTY.GetHashCode();
      if (WR51FNCSQTY.Length != 0) hash ^= WR51FNCSQTY.GetHashCode();
      if (WR51TRADENCBQTY.Length != 0) hash ^= WR51TRADENCBQTY.GetHashCode();
      if (WR51TRADENCSQTY.Length != 0) hash ^= WR51TRADENCSQTY.GetHashCode();
      if (WR51SUBVARINCOME.Length != 0) hash ^= WR51SUBVARINCOME.GetHashCode();
      if (WR51YESTERDAYPRICE2.Length != 0) hash ^= WR51YESTERDAYPRICE2.GetHashCode();
      if (WR51NCBAVGPRICE4.Length != 0) hash ^= WR51NCBAVGPRICE4.GetHashCode();
      if (WR51NCSAVGPRICE4.Length != 0) hash ^= WR51NCSAVGPRICE4.GetHashCode();
      if (WR51SOURCEFLAG.Length != 0) hash ^= WR51SOURCEFLAG.GetHashCode();
      if (FILLER.Length != 0) hash ^= FILLER.GetHashCode();
      if (WR51BVARINCOME1.Length != 0) hash ^= WR51BVARINCOME1.GetHashCode();
      if (WR51BVARINCOME2.Length != 0) hash ^= WR51BVARINCOME2.GetHashCode();
      if (WR51BAVGPRICE1.Length != 0) hash ^= WR51BAVGPRICE1.GetHashCode();
      if (WR51BAVGPRICE2.Length != 0) hash ^= WR51BAVGPRICE2.GetHashCode();
      if (WR51BNOWPRICE1.Length != 0) hash ^= WR51BNOWPRICE1.GetHashCode();
      if (WR51BNOWPRICE2.Length != 0) hash ^= WR51BNOWPRICE2.GetHashCode();
      if (WR51SVARINCOME1.Length != 0) hash ^= WR51SVARINCOME1.GetHashCode();
      if (WR51SVARINCOME2.Length != 0) hash ^= WR51SVARINCOME2.GetHashCode();
      if (WR51SAVGPRICE1.Length != 0) hash ^= WR51SAVGPRICE1.GetHashCode();
      if (WR51SAVGPRICE2.Length != 0) hash ^= WR51SAVGPRICE2.GetHashCode();
      if (WR51SNOWPRICE1.Length != 0) hash ^= WR51SNOWPRICE1.GetHashCode();
      if (WR51SNOWPRICE2.Length != 0) hash ^= WR51SNOWPRICE2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WR51DATAFLAG1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WR51DATAFLAG1);
      }
      if (WR51DATAFLAG2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WR51DATAFLAG2);
      }
      if (WR51TRID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WR51TRID);
      }
      if (WR51BTRID1.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WR51BTRID1);
      }
      if (WR51BCOMMODITYNAME1.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WR51BCOMMODITYNAME1);
      }
      if (WR51BCOMMODITYID1.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WR51BCOMMODITYID1);
      }
      if (WR51BSETTLEMENTMONTH1.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WR51BSETTLEMENTMONTH1);
      }
      if (WR51BSTRIKEPRICE1.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WR51BSTRIKEPRICE1);
      }
      if (WR51BBUYSELLKIND1.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WR51BBUYSELLKIND1);
      }
      if (WR51BSTOCKCODE1.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WR51BSTOCKCODE1);
      }
      if (WR51BTRID2.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(WR51BTRID2);
      }
      if (WR51BCOMMODITYNAME2.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WR51BCOMMODITYNAME2);
      }
      if (WR51BCOMMODITYID2.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WR51BCOMMODITYID2);
      }
      if (WR51BSETTLEMENTMONTH2.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(WR51BSETTLEMENTMONTH2);
      }
      if (WR51BSTRIKEPRICE2.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(WR51BSTRIKEPRICE2);
      }
      if (WR51BBUYSELLKIND2.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WR51BBUYSELLKIND2);
      }
      if (WR51BSTOCKCODE2.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(WR51BSTOCKCODE2);
      }
      if (WR51STRID1.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(WR51STRID1);
      }
      if (WR51SCOMMODITYNAME1.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(WR51SCOMMODITYNAME1);
      }
      if (WR51SCOMMODITYID1.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WR51SCOMMODITYID1);
      }
      if (WR51SSETTLEMENTMONTH1.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(WR51SSETTLEMENTMONTH1);
      }
      if (WR51SSTRIKEPRICE1.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(WR51SSTRIKEPRICE1);
      }
      if (WR51SBUYSELLKIND1.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(WR51SBUYSELLKIND1);
      }
      if (WR51SSTOCKCODE1.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(WR51SSTOCKCODE1);
      }
      if (WR51STRID2.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(WR51STRID2);
      }
      if (WR51SCOMMODITYNAME2.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(WR51SCOMMODITYNAME2);
      }
      if (WR51SCOMMODITYID2.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(WR51SCOMMODITYID2);
      }
      if (WR51SSETTLEMENTMONTH2.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(WR51SSETTLEMENTMONTH2);
      }
      if (WR51SSTRIKEPRICE2.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(WR51SSTRIKEPRICE2);
      }
      if (WR51SBUYSELLKIND2.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(WR51SBUYSELLKIND2);
      }
      if (WR51SSTOCKCODE2.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(WR51SSTOCKCODE2);
      }
      if (WR51NCBQTY.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(WR51NCBQTY);
      }
      if (WR51NCBAVGPRICE.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(WR51NCBAVGPRICE);
      }
      if (WR51NCSQTY.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(WR51NCSQTY);
      }
      if (WR51NCSAVGPRICE.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(WR51NCSAVGPRICE);
      }
      if (WR51NOWPRICE.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(WR51NOWPRICE);
      }
      if (WR51CORKIND.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(WR51CORKIND);
      }
      if (WR51VARINCOME.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(WR51VARINCOME);
      }
      if (WR51ORDERBQTY.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(WR51ORDERBQTY);
      }
      if (WR51ORDERSQTY.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(WR51ORDERSQTY);
      }
      if (WR51TDSNEWOQTY.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(WR51TDSNEWOQTY);
      }
      if (WR51YESTERDAYPRICE.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(WR51YESTERDAYPRICE);
      }
      if (WR51STRATEGYCODE.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(WR51STRATEGYCODE);
      }
      if (WR51VARINCOMECURRENCY.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(WR51VARINCOMECURRENCY);
      }
      if (WR51FNCBQTY.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(WR51FNCBQTY);
      }
      if (WR51FNCSQTY.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(WR51FNCSQTY);
      }
      if (WR51TRADENCBQTY.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(WR51TRADENCBQTY);
      }
      if (WR51TRADENCSQTY.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(WR51TRADENCSQTY);
      }
      if (WR51SUBVARINCOME.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(WR51SUBVARINCOME);
      }
      if (WR51YESTERDAYPRICE2.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(WR51YESTERDAYPRICE2);
      }
      if (WR51NCBAVGPRICE4.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(WR51NCBAVGPRICE4);
      }
      if (WR51NCSAVGPRICE4.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(WR51NCSAVGPRICE4);
      }
      if (WR51SOURCEFLAG.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(WR51SOURCEFLAG);
      }
      if (FILLER.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(FILLER);
      }
      if (WR51BVARINCOME1.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(WR51BVARINCOME1);
      }
      if (WR51BVARINCOME2.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(WR51BVARINCOME2);
      }
      if (WR51BAVGPRICE1.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(WR51BAVGPRICE1);
      }
      if (WR51BAVGPRICE2.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(WR51BAVGPRICE2);
      }
      if (WR51BNOWPRICE1.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(WR51BNOWPRICE1);
      }
      if (WR51BNOWPRICE2.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(WR51BNOWPRICE2);
      }
      if (WR51SVARINCOME1.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(WR51SVARINCOME1);
      }
      if (WR51SVARINCOME2.Length != 0) {
        output.WriteRawTag(242, 3);
        output.WriteString(WR51SVARINCOME2);
      }
      if (WR51SAVGPRICE1.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteString(WR51SAVGPRICE1);
      }
      if (WR51SAVGPRICE2.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteString(WR51SAVGPRICE2);
      }
      if (WR51SNOWPRICE1.Length != 0) {
        output.WriteRawTag(138, 4);
        output.WriteString(WR51SNOWPRICE1);
      }
      if (WR51SNOWPRICE2.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteString(WR51SNOWPRICE2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WR51DATAFLAG1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51DATAFLAG1);
      }
      if (WR51DATAFLAG2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51DATAFLAG2);
      }
      if (WR51TRID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51TRID);
      }
      if (WR51BTRID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51BTRID1);
      }
      if (WR51BCOMMODITYNAME1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51BCOMMODITYNAME1);
      }
      if (WR51BCOMMODITYID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51BCOMMODITYID1);
      }
      if (WR51BSETTLEMENTMONTH1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51BSETTLEMENTMONTH1);
      }
      if (WR51BSTRIKEPRICE1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51BSTRIKEPRICE1);
      }
      if (WR51BBUYSELLKIND1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51BBUYSELLKIND1);
      }
      if (WR51BSTOCKCODE1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51BSTOCKCODE1);
      }
      if (WR51BTRID2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51BTRID2);
      }
      if (WR51BCOMMODITYNAME2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51BCOMMODITYNAME2);
      }
      if (WR51BCOMMODITYID2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51BCOMMODITYID2);
      }
      if (WR51BSETTLEMENTMONTH2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51BSETTLEMENTMONTH2);
      }
      if (WR51BSTRIKEPRICE2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WR51BSTRIKEPRICE2);
      }
      if (WR51BBUYSELLKIND2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51BBUYSELLKIND2);
      }
      if (WR51BSTOCKCODE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51BSTOCKCODE2);
      }
      if (WR51STRID1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51STRID1);
      }
      if (WR51SCOMMODITYNAME1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SCOMMODITYNAME1);
      }
      if (WR51SCOMMODITYID1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SCOMMODITYID1);
      }
      if (WR51SSETTLEMENTMONTH1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SSETTLEMENTMONTH1);
      }
      if (WR51SSTRIKEPRICE1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SSTRIKEPRICE1);
      }
      if (WR51SBUYSELLKIND1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SBUYSELLKIND1);
      }
      if (WR51SSTOCKCODE1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SSTOCKCODE1);
      }
      if (WR51STRID2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51STRID2);
      }
      if (WR51SCOMMODITYNAME2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SCOMMODITYNAME2);
      }
      if (WR51SCOMMODITYID2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SCOMMODITYID2);
      }
      if (WR51SSETTLEMENTMONTH2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SSETTLEMENTMONTH2);
      }
      if (WR51SSTRIKEPRICE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SSTRIKEPRICE2);
      }
      if (WR51SBUYSELLKIND2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SBUYSELLKIND2);
      }
      if (WR51SSTOCKCODE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SSTOCKCODE2);
      }
      if (WR51NCBQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51NCBQTY);
      }
      if (WR51NCBAVGPRICE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51NCBAVGPRICE);
      }
      if (WR51NCSQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51NCSQTY);
      }
      if (WR51NCSAVGPRICE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51NCSAVGPRICE);
      }
      if (WR51NOWPRICE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51NOWPRICE);
      }
      if (WR51CORKIND.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51CORKIND);
      }
      if (WR51VARINCOME.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51VARINCOME);
      }
      if (WR51ORDERBQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51ORDERBQTY);
      }
      if (WR51ORDERSQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51ORDERSQTY);
      }
      if (WR51TDSNEWOQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51TDSNEWOQTY);
      }
      if (WR51YESTERDAYPRICE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51YESTERDAYPRICE);
      }
      if (WR51STRATEGYCODE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51STRATEGYCODE);
      }
      if (WR51VARINCOMECURRENCY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51VARINCOMECURRENCY);
      }
      if (WR51FNCBQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51FNCBQTY);
      }
      if (WR51FNCSQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51FNCSQTY);
      }
      if (WR51TRADENCBQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51TRADENCBQTY);
      }
      if (WR51TRADENCSQTY.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51TRADENCSQTY);
      }
      if (WR51SUBVARINCOME.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SUBVARINCOME);
      }
      if (WR51YESTERDAYPRICE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51YESTERDAYPRICE2);
      }
      if (WR51NCBAVGPRICE4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51NCBAVGPRICE4);
      }
      if (WR51NCSAVGPRICE4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51NCSAVGPRICE4);
      }
      if (WR51SOURCEFLAG.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SOURCEFLAG);
      }
      if (FILLER.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER);
      }
      if (WR51BVARINCOME1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51BVARINCOME1);
      }
      if (WR51BVARINCOME2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51BVARINCOME2);
      }
      if (WR51BAVGPRICE1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51BAVGPRICE1);
      }
      if (WR51BAVGPRICE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51BAVGPRICE2);
      }
      if (WR51BNOWPRICE1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51BNOWPRICE1);
      }
      if (WR51BNOWPRICE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51BNOWPRICE2);
      }
      if (WR51SVARINCOME1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SVARINCOME1);
      }
      if (WR51SVARINCOME2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SVARINCOME2);
      }
      if (WR51SAVGPRICE1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SAVGPRICE1);
      }
      if (WR51SAVGPRICE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SAVGPRICE2);
      }
      if (WR51SNOWPRICE1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SNOWPRICE1);
      }
      if (WR51SNOWPRICE2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WR51SNOWPRICE2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemResult_AGGREGATE_NEW other) {
      if (other == null) {
        return;
      }
      if (other.WR51DATAFLAG1.Length != 0) {
        WR51DATAFLAG1 = other.WR51DATAFLAG1;
      }
      if (other.WR51DATAFLAG2.Length != 0) {
        WR51DATAFLAG2 = other.WR51DATAFLAG2;
      }
      if (other.WR51TRID.Length != 0) {
        WR51TRID = other.WR51TRID;
      }
      if (other.WR51BTRID1.Length != 0) {
        WR51BTRID1 = other.WR51BTRID1;
      }
      if (other.WR51BCOMMODITYNAME1.Length != 0) {
        WR51BCOMMODITYNAME1 = other.WR51BCOMMODITYNAME1;
      }
      if (other.WR51BCOMMODITYID1.Length != 0) {
        WR51BCOMMODITYID1 = other.WR51BCOMMODITYID1;
      }
      if (other.WR51BSETTLEMENTMONTH1.Length != 0) {
        WR51BSETTLEMENTMONTH1 = other.WR51BSETTLEMENTMONTH1;
      }
      if (other.WR51BSTRIKEPRICE1.Length != 0) {
        WR51BSTRIKEPRICE1 = other.WR51BSTRIKEPRICE1;
      }
      if (other.WR51BBUYSELLKIND1.Length != 0) {
        WR51BBUYSELLKIND1 = other.WR51BBUYSELLKIND1;
      }
      if (other.WR51BSTOCKCODE1.Length != 0) {
        WR51BSTOCKCODE1 = other.WR51BSTOCKCODE1;
      }
      if (other.WR51BTRID2.Length != 0) {
        WR51BTRID2 = other.WR51BTRID2;
      }
      if (other.WR51BCOMMODITYNAME2.Length != 0) {
        WR51BCOMMODITYNAME2 = other.WR51BCOMMODITYNAME2;
      }
      if (other.WR51BCOMMODITYID2.Length != 0) {
        WR51BCOMMODITYID2 = other.WR51BCOMMODITYID2;
      }
      if (other.WR51BSETTLEMENTMONTH2.Length != 0) {
        WR51BSETTLEMENTMONTH2 = other.WR51BSETTLEMENTMONTH2;
      }
      if (other.WR51BSTRIKEPRICE2.Length != 0) {
        WR51BSTRIKEPRICE2 = other.WR51BSTRIKEPRICE2;
      }
      if (other.WR51BBUYSELLKIND2.Length != 0) {
        WR51BBUYSELLKIND2 = other.WR51BBUYSELLKIND2;
      }
      if (other.WR51BSTOCKCODE2.Length != 0) {
        WR51BSTOCKCODE2 = other.WR51BSTOCKCODE2;
      }
      if (other.WR51STRID1.Length != 0) {
        WR51STRID1 = other.WR51STRID1;
      }
      if (other.WR51SCOMMODITYNAME1.Length != 0) {
        WR51SCOMMODITYNAME1 = other.WR51SCOMMODITYNAME1;
      }
      if (other.WR51SCOMMODITYID1.Length != 0) {
        WR51SCOMMODITYID1 = other.WR51SCOMMODITYID1;
      }
      if (other.WR51SSETTLEMENTMONTH1.Length != 0) {
        WR51SSETTLEMENTMONTH1 = other.WR51SSETTLEMENTMONTH1;
      }
      if (other.WR51SSTRIKEPRICE1.Length != 0) {
        WR51SSTRIKEPRICE1 = other.WR51SSTRIKEPRICE1;
      }
      if (other.WR51SBUYSELLKIND1.Length != 0) {
        WR51SBUYSELLKIND1 = other.WR51SBUYSELLKIND1;
      }
      if (other.WR51SSTOCKCODE1.Length != 0) {
        WR51SSTOCKCODE1 = other.WR51SSTOCKCODE1;
      }
      if (other.WR51STRID2.Length != 0) {
        WR51STRID2 = other.WR51STRID2;
      }
      if (other.WR51SCOMMODITYNAME2.Length != 0) {
        WR51SCOMMODITYNAME2 = other.WR51SCOMMODITYNAME2;
      }
      if (other.WR51SCOMMODITYID2.Length != 0) {
        WR51SCOMMODITYID2 = other.WR51SCOMMODITYID2;
      }
      if (other.WR51SSETTLEMENTMONTH2.Length != 0) {
        WR51SSETTLEMENTMONTH2 = other.WR51SSETTLEMENTMONTH2;
      }
      if (other.WR51SSTRIKEPRICE2.Length != 0) {
        WR51SSTRIKEPRICE2 = other.WR51SSTRIKEPRICE2;
      }
      if (other.WR51SBUYSELLKIND2.Length != 0) {
        WR51SBUYSELLKIND2 = other.WR51SBUYSELLKIND2;
      }
      if (other.WR51SSTOCKCODE2.Length != 0) {
        WR51SSTOCKCODE2 = other.WR51SSTOCKCODE2;
      }
      if (other.WR51NCBQTY.Length != 0) {
        WR51NCBQTY = other.WR51NCBQTY;
      }
      if (other.WR51NCBAVGPRICE.Length != 0) {
        WR51NCBAVGPRICE = other.WR51NCBAVGPRICE;
      }
      if (other.WR51NCSQTY.Length != 0) {
        WR51NCSQTY = other.WR51NCSQTY;
      }
      if (other.WR51NCSAVGPRICE.Length != 0) {
        WR51NCSAVGPRICE = other.WR51NCSAVGPRICE;
      }
      if (other.WR51NOWPRICE.Length != 0) {
        WR51NOWPRICE = other.WR51NOWPRICE;
      }
      if (other.WR51CORKIND.Length != 0) {
        WR51CORKIND = other.WR51CORKIND;
      }
      if (other.WR51VARINCOME.Length != 0) {
        WR51VARINCOME = other.WR51VARINCOME;
      }
      if (other.WR51ORDERBQTY.Length != 0) {
        WR51ORDERBQTY = other.WR51ORDERBQTY;
      }
      if (other.WR51ORDERSQTY.Length != 0) {
        WR51ORDERSQTY = other.WR51ORDERSQTY;
      }
      if (other.WR51TDSNEWOQTY.Length != 0) {
        WR51TDSNEWOQTY = other.WR51TDSNEWOQTY;
      }
      if (other.WR51YESTERDAYPRICE.Length != 0) {
        WR51YESTERDAYPRICE = other.WR51YESTERDAYPRICE;
      }
      if (other.WR51STRATEGYCODE.Length != 0) {
        WR51STRATEGYCODE = other.WR51STRATEGYCODE;
      }
      if (other.WR51VARINCOMECURRENCY.Length != 0) {
        WR51VARINCOMECURRENCY = other.WR51VARINCOMECURRENCY;
      }
      if (other.WR51FNCBQTY.Length != 0) {
        WR51FNCBQTY = other.WR51FNCBQTY;
      }
      if (other.WR51FNCSQTY.Length != 0) {
        WR51FNCSQTY = other.WR51FNCSQTY;
      }
      if (other.WR51TRADENCBQTY.Length != 0) {
        WR51TRADENCBQTY = other.WR51TRADENCBQTY;
      }
      if (other.WR51TRADENCSQTY.Length != 0) {
        WR51TRADENCSQTY = other.WR51TRADENCSQTY;
      }
      if (other.WR51SUBVARINCOME.Length != 0) {
        WR51SUBVARINCOME = other.WR51SUBVARINCOME;
      }
      if (other.WR51YESTERDAYPRICE2.Length != 0) {
        WR51YESTERDAYPRICE2 = other.WR51YESTERDAYPRICE2;
      }
      if (other.WR51NCBAVGPRICE4.Length != 0) {
        WR51NCBAVGPRICE4 = other.WR51NCBAVGPRICE4;
      }
      if (other.WR51NCSAVGPRICE4.Length != 0) {
        WR51NCSAVGPRICE4 = other.WR51NCSAVGPRICE4;
      }
      if (other.WR51SOURCEFLAG.Length != 0) {
        WR51SOURCEFLAG = other.WR51SOURCEFLAG;
      }
      if (other.FILLER.Length != 0) {
        FILLER = other.FILLER;
      }
      if (other.WR51BVARINCOME1.Length != 0) {
        WR51BVARINCOME1 = other.WR51BVARINCOME1;
      }
      if (other.WR51BVARINCOME2.Length != 0) {
        WR51BVARINCOME2 = other.WR51BVARINCOME2;
      }
      if (other.WR51BAVGPRICE1.Length != 0) {
        WR51BAVGPRICE1 = other.WR51BAVGPRICE1;
      }
      if (other.WR51BAVGPRICE2.Length != 0) {
        WR51BAVGPRICE2 = other.WR51BAVGPRICE2;
      }
      if (other.WR51BNOWPRICE1.Length != 0) {
        WR51BNOWPRICE1 = other.WR51BNOWPRICE1;
      }
      if (other.WR51BNOWPRICE2.Length != 0) {
        WR51BNOWPRICE2 = other.WR51BNOWPRICE2;
      }
      if (other.WR51SVARINCOME1.Length != 0) {
        WR51SVARINCOME1 = other.WR51SVARINCOME1;
      }
      if (other.WR51SVARINCOME2.Length != 0) {
        WR51SVARINCOME2 = other.WR51SVARINCOME2;
      }
      if (other.WR51SAVGPRICE1.Length != 0) {
        WR51SAVGPRICE1 = other.WR51SAVGPRICE1;
      }
      if (other.WR51SAVGPRICE2.Length != 0) {
        WR51SAVGPRICE2 = other.WR51SAVGPRICE2;
      }
      if (other.WR51SNOWPRICE1.Length != 0) {
        WR51SNOWPRICE1 = other.WR51SNOWPRICE1;
      }
      if (other.WR51SNOWPRICE2.Length != 0) {
        WR51SNOWPRICE2 = other.WR51SNOWPRICE2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WR51DATAFLAG1 = input.ReadString();
            break;
          }
          case 18: {
            WR51DATAFLAG2 = input.ReadString();
            break;
          }
          case 26: {
            WR51TRID = input.ReadString();
            break;
          }
          case 34: {
            WR51BTRID1 = input.ReadString();
            break;
          }
          case 42: {
            WR51BCOMMODITYNAME1 = input.ReadString();
            break;
          }
          case 50: {
            WR51BCOMMODITYID1 = input.ReadString();
            break;
          }
          case 58: {
            WR51BSETTLEMENTMONTH1 = input.ReadString();
            break;
          }
          case 66: {
            WR51BSTRIKEPRICE1 = input.ReadString();
            break;
          }
          case 74: {
            WR51BBUYSELLKIND1 = input.ReadString();
            break;
          }
          case 82: {
            WR51BSTOCKCODE1 = input.ReadString();
            break;
          }
          case 90: {
            WR51BTRID2 = input.ReadString();
            break;
          }
          case 98: {
            WR51BCOMMODITYNAME2 = input.ReadString();
            break;
          }
          case 106: {
            WR51BCOMMODITYID2 = input.ReadString();
            break;
          }
          case 114: {
            WR51BSETTLEMENTMONTH2 = input.ReadString();
            break;
          }
          case 122: {
            WR51BSTRIKEPRICE2 = input.ReadString();
            break;
          }
          case 130: {
            WR51BBUYSELLKIND2 = input.ReadString();
            break;
          }
          case 138: {
            WR51BSTOCKCODE2 = input.ReadString();
            break;
          }
          case 146: {
            WR51STRID1 = input.ReadString();
            break;
          }
          case 154: {
            WR51SCOMMODITYNAME1 = input.ReadString();
            break;
          }
          case 162: {
            WR51SCOMMODITYID1 = input.ReadString();
            break;
          }
          case 170: {
            WR51SSETTLEMENTMONTH1 = input.ReadString();
            break;
          }
          case 178: {
            WR51SSTRIKEPRICE1 = input.ReadString();
            break;
          }
          case 186: {
            WR51SBUYSELLKIND1 = input.ReadString();
            break;
          }
          case 194: {
            WR51SSTOCKCODE1 = input.ReadString();
            break;
          }
          case 202: {
            WR51STRID2 = input.ReadString();
            break;
          }
          case 210: {
            WR51SCOMMODITYNAME2 = input.ReadString();
            break;
          }
          case 218: {
            WR51SCOMMODITYID2 = input.ReadString();
            break;
          }
          case 226: {
            WR51SSETTLEMENTMONTH2 = input.ReadString();
            break;
          }
          case 234: {
            WR51SSTRIKEPRICE2 = input.ReadString();
            break;
          }
          case 242: {
            WR51SBUYSELLKIND2 = input.ReadString();
            break;
          }
          case 250: {
            WR51SSTOCKCODE2 = input.ReadString();
            break;
          }
          case 258: {
            WR51NCBQTY = input.ReadString();
            break;
          }
          case 266: {
            WR51NCBAVGPRICE = input.ReadString();
            break;
          }
          case 274: {
            WR51NCSQTY = input.ReadString();
            break;
          }
          case 282: {
            WR51NCSAVGPRICE = input.ReadString();
            break;
          }
          case 290: {
            WR51NOWPRICE = input.ReadString();
            break;
          }
          case 298: {
            WR51CORKIND = input.ReadString();
            break;
          }
          case 306: {
            WR51VARINCOME = input.ReadString();
            break;
          }
          case 314: {
            WR51ORDERBQTY = input.ReadString();
            break;
          }
          case 322: {
            WR51ORDERSQTY = input.ReadString();
            break;
          }
          case 330: {
            WR51TDSNEWOQTY = input.ReadString();
            break;
          }
          case 338: {
            WR51YESTERDAYPRICE = input.ReadString();
            break;
          }
          case 346: {
            WR51STRATEGYCODE = input.ReadString();
            break;
          }
          case 354: {
            WR51VARINCOMECURRENCY = input.ReadString();
            break;
          }
          case 362: {
            WR51FNCBQTY = input.ReadString();
            break;
          }
          case 370: {
            WR51FNCSQTY = input.ReadString();
            break;
          }
          case 378: {
            WR51TRADENCBQTY = input.ReadString();
            break;
          }
          case 386: {
            WR51TRADENCSQTY = input.ReadString();
            break;
          }
          case 394: {
            WR51SUBVARINCOME = input.ReadString();
            break;
          }
          case 402: {
            WR51YESTERDAYPRICE2 = input.ReadString();
            break;
          }
          case 410: {
            WR51NCBAVGPRICE4 = input.ReadString();
            break;
          }
          case 418: {
            WR51NCSAVGPRICE4 = input.ReadString();
            break;
          }
          case 426: {
            WR51SOURCEFLAG = input.ReadString();
            break;
          }
          case 434: {
            FILLER = input.ReadString();
            break;
          }
          case 442: {
            WR51BVARINCOME1 = input.ReadString();
            break;
          }
          case 450: {
            WR51BVARINCOME2 = input.ReadString();
            break;
          }
          case 458: {
            WR51BAVGPRICE1 = input.ReadString();
            break;
          }
          case 466: {
            WR51BAVGPRICE2 = input.ReadString();
            break;
          }
          case 474: {
            WR51BNOWPRICE1 = input.ReadString();
            break;
          }
          case 482: {
            WR51BNOWPRICE2 = input.ReadString();
            break;
          }
          case 490: {
            WR51SVARINCOME1 = input.ReadString();
            break;
          }
          case 498: {
            WR51SVARINCOME2 = input.ReadString();
            break;
          }
          case 506: {
            WR51SAVGPRICE1 = input.ReadString();
            break;
          }
          case 514: {
            WR51SAVGPRICE2 = input.ReadString();
            break;
          }
          case 522: {
            WR51SNOWPRICE1 = input.ReadString();
            break;
          }
          case 530: {
            WR51SNOWPRICE2 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///對tandem查詢的 AccountMessage
  /// </summary>
  public sealed partial class TandemAccountQuery : pb::IMessage<TandemAccountQuery> {
    private static readonly pb::MessageParser<TandemAccountQuery> _parser = new pb::MessageParser<TandemAccountQuery>(() => new TandemAccountQuery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemAccountQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemAccountQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemAccountQuery(TandemAccountQuery other) : this() {
      tRANSCODE_ = other.tRANSCODE_;
      fUNCTIONCODE_ = other.fUNCTIONCODE_;
      tELNO_ = other.tELNO_;
      tODAY_ = other.tODAY_;
      uNITFILE_ = other.uNITFILE_;
      wSBROKERID_ = other.wSBROKERID_;
      wSIBNO_ = other.wSIBNO_;
      wSINVESTORACNO_ = other.wSINVESTORACNO_;
      wSSKACNO_ = other.wSSKACNO_;
      wSMODEKIND_ = other.wSMODEKIND_;
      wSPASSWD_ = other.wSPASSWD_;
      wSSECUREKIND_ = other.wSSECUREKIND_;
      wSLOGINIDNO_ = other.wSLOGINIDNO_;
      wSAUTOOFFSETFLAG_ = other.wSAUTOOFFSETFLAG_;
      wSPOSTFLAG_ = other.wSPOSTFLAG_;
      wSEMAILADDRESS_ = other.wSEMAILADDRESS_;
      wSAUTO429FLAG_ = other.wSAUTO429FLAG_;
      wSAPPLYYMD_ = other.wSAPPLYYMD_;
      wSAPPLYTIME_ = other.wSAPPLYTIME_;
      wSMITFLAG_ = other.wSMITFLAG_;
      wSAUTOMARGINFLAG_ = other.wSAUTOMARGINFLAG_;
      wSEUREXFFACNO_ = other.wSEUREXFFACNO_;
      fILLER1_ = other.fILLER1_;
      fILLER2_ = other.fILLER2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemAccountQuery Clone() {
      return new TandemAccountQuery(this);
    }

    /// <summary>Field number for the "TRANS_CODE" field.</summary>
    public const int TRANSCODEFieldNumber = 1;
    private string tRANSCODE_ = "";
    /// <summary>
    ///PIC S9(04)  COMP. 2  C      4      0      11:期貨網路 12:E_Agent 13:證券網路 14:"前台系統查詢(與個資相關之欄位不回覆)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TRANSCODE {
      get { return tRANSCODE_; }
      set {
        tRANSCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTION_CODE" field.</summary>
    public const int FUNCTIONCODEFieldNumber = 2;
    private string fUNCTIONCODE_ = "";
    /// <summary>
    ///PIC S9(04)  COMP. 2   C      4      0      1:選擇權自動平倉申請 2:電子對帳單網路申請 3:查詢投資人資料(如E_MAIL..等等) 4:更改E_MAIL 5:保證金自動最佳化申請 6:選擇權10TICK 限制申請/取消 7:投資人巿價單申請 8:投資人巿價單註記查詢 9:條件單市價下單檢核 10:虛擬保證金最佳化 11:EUREX外期交易帳號簽署 12:EUREX簽署狀態查詢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONCODE {
      get { return fUNCTIONCODE_; }
      set {
        fUNCTIONCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TEL_NO" field.</summary>
    public const int TELNOFieldNumber = 3;
    private string tELNO_ = "";
    /// <summary>
    ///PIC 9(04)  COMP.  2 C      4      0      營業員代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TELNO {
      get { return tELNO_; }
      set {
        tELNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TODAY" field.</summary>
    public const int TODAYFieldNumber = 4;
    private string tODAY_ = "";
    /// <summary>
    ///PIC 9(08)  COMP.  4     C      8      0      EX：20040226                                西元年月日(今日)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TODAY {
      get { return tODAY_; }
      set {
        tODAY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UNIT_FILE" field.</summary>
    public const int UNITFILEFieldNumber = 5;
    private string uNITFILE_ = "";
    /// <summary>
    ///PIC 9(4)   COMP.  2        C      4      0      1                                                    證券 UNIT_FILE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UNITFILE {
      get { return uNITFILE_; }
      set {
        uNITFILE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_BROKER_ID" field.</summary>
    public const int WSBROKERIDFieldNumber = 6;
    private string wSBROKERID_ = "";
    /// <summary>
    ///PIC X(07).                7      X      7      0      SPACE                                              期貨商代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSBROKERID {
      get { return wSBROKERID_; }
      set {
        wSBROKERID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_IB_NO" field.</summary>
    public const int WSIBNOFieldNumber = 7;
    private string wSIBNO_ = "";
    /// <summary>
    ///PIC X(03).                3      X      3      0      A+證券UNIT                                   IB 代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSIBNO {
      get { return wSIBNO_; }
      set {
        wSIBNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_INVESTOR_ACNO" field.</summary>
    public const int WSINVESTORACNOFieldNumber = 8;
    private string wSINVESTORACNO_ = "";
    /// <summary>
    ///PIC 9(07).               7      9      7      0      期貨帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSINVESTORACNO {
      get { return wSINVESTORACNO_; }
      set {
        wSINVESTORACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_SK_ACNO" field.</summary>
    public const int WSSKACNOFieldNumber = 9;
    private string wSSKACNO_ = "";
    /// <summary>
    ///PIC 9(07).              7      9      7      0      0 OR 證券帳號                              證券帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSSKACNO {
      get { return wSSKACNO_; }
      set {
        wSSKACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_MODE_KIND" field.</summary>
    public const int WSMODEKINDFieldNumber = 10;
    private string wSMODEKIND_ = "";
    /// <summary>
    ///PIC X(02).              2      X      2      0      C :網路    S:E_AGENT S:E_AGENT       (同下單 MODE_KIND)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSMODEKIND {
      get { return wSMODEKIND_; }
      set {
        wSMODEKIND_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_PASSWD" field.</summary>
    public const int WSPASSWDFieldNumber = 11;
    private string wSPASSWD_ = "";
    /// <summary>
    ///PIC X(20).               20    X      20    0      交易密碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSPASSWD {
      get { return wSPASSWD_; }
      set {
        wSPASSWD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_SECURE_KIND" field.</summary>
    public const int WSSECUREKINDFieldNumber = 12;
    private string wSSECUREKIND_ = "";
    /// <summary>
    ///PIC X(02).             2      X      2      0      空白:不check 01:check id 02:check帳號 (同下單之 SECURE_KIND)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSSECUREKIND {
      get { return wSSECUREKIND_; }
      set {
        wSSECUREKIND_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_LOGIN_ID_NO" field.</summary>
    public const int WSLOGINIDNOFieldNumber = 13;
    private string wSLOGINIDNO_ = "";
    /// <summary>
    ///PIC X(11).                11    X      11    0      l_NationalID                            身分證
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSLOGINIDNO {
      get { return wSLOGINIDNO_; }
      set {
        wSLOGINIDNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_AUTO_OFFSET_FLAG" field.</summary>
    public const int WSAUTOOFFSETFLAGFieldNumber = 14;
    private string wSAUTOOFFSETFLAG_ = "";
    /// <summary>
    ///PIC X(01).               1      X      1      0      "Y" OR "N"                                       選擇權自動平倉記號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSAUTOOFFSETFLAG {
      get { return wSAUTOOFFSETFLAG_; }
      set {
        wSAUTOOFFSETFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_POST_FLAG" field.</summary>
    public const int WSPOSTFLAGFieldNumber = 15;
    private string wSPOSTFLAG_ = "";
    /// <summary>
    ///PIC X(01).             1      X      1      0      1:同戶籍地址 2:同通訊地址 3:自取 4:寄送地址       5:寄送電子對帳單 (買賣報告書寄送處，申請寄送電子對帳單時請給"5"，取消寄送電子對帳單時請給，        選項"1"OR"2"OR"3"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSPOSTFLAG {
      get { return wSPOSTFLAG_; }
      set {
        wSPOSTFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_EMAIL_ADDRESS" field.</summary>
    public const int WSEMAILADDRESSFieldNumber = 16;
    private string wSEMAILADDRESS_ = "";
    /// <summary>
    ///PIC X(80).             80    X      80    0      EMAIL                                              E_MAIL ADDRESS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSEMAILADDRESS {
      get { return wSEMAILADDRESS_; }
      set {
        wSEMAILADDRESS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_AUTO_429_FLAG" field.</summary>
    public const int WSAUTO429FLAGFieldNumber = 17;
    private string wSAUTO429FLAG_ = "";
    /// <summary>
    ///PIC X(01).             1      X      1      0      ' '：取消保證金最佳化(取消智慧型及半智慧型保證金最佳化) Y：全部重拆組(智慧型保證金最佳化) B：僅組合成新成交部份(半智慧型保證金最佳化)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSAUTO429FLAG {
      get { return wSAUTO429FLAG_; }
      set {
        wSAUTO429FLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_APPLY_YMD" field.</summary>
    public const int WSAPPLYYMDFieldNumber = 18;
    private string wSAPPLYYMD_ = "";
    /// <summary>
    ///PIC 9(8) COMP.      4      9      8      0      人工申請電寄日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSAPPLYYMD {
      get { return wSAPPLYYMD_; }
      set {
        wSAPPLYYMD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_APPLY_TIME" field.</summary>
    public const int WSAPPLYTIMEFieldNumber = 19;
    private string wSAPPLYTIME_ = "";
    /// <summary>
    ///PIC 9(8) COMP.        4      9      8      0      人工申請電寄時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSAPPLYTIME {
      get { return wSAPPLYTIME_; }
      set {
        wSAPPLYTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_MIT_FLAG" field.</summary>
    public const int WSMITFLAGFieldNumber = 20;
    private string wSMITFLAG_ = "";
    /// <summary>
    ///PIC X(01).                1      X      1      0     "Y":同意(同意巿價單下單) "N":不同意(不同意巿價單下單) " ":系統預設(尚未簽署)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSMITFLAG {
      get { return wSMITFLAG_; }
      set {
        wSMITFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_AUTO_MARGIN_FLAG" field.</summary>
    public const int WSAUTOMARGINFLAGFieldNumber = 21;
    private string wSAUTOMARGINFLAG_ = "";
    /// <summary>
    ///PIC X(01).             1      X      1      0   " "：取消虛擬保證金最佳化 A：申請虛擬最佳化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSAUTOMARGINFLAG {
      get { return wSAUTOMARGINFLAG_; }
      set {
        wSAUTOMARGINFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_EUREX_FF_ACNO" field.</summary>
    public const int WSEUREXFFACNOFieldNumber = 22;
    private string wSEUREXFFACNO_ = "";
    /// <summary>
    ///PIC 9(7).                 7      9      7      0      EUREX外期對應帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSEUREXFFACNO {
      get { return wSEUREXFFACNO_; }
      set {
        wSEUREXFFACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER1" field.</summary>
    public const int FILLER1FieldNumber = 23;
    private string fILLER1_ = "";
    /// <summary>
    ///PIC X(29).          29    X      29    0      SPACE                                              原來為36 BYTES=>29 BYTES
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER1 {
      get { return fILLER1_; }
      set {
        fILLER1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER2" field.</summary>
    public const int FILLER2FieldNumber = 24;
    private string fILLER2_ = "";
    /// <summary>
    ///PIC X(200).                200  X      200  0      SPACE                                              FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER2 {
      get { return fILLER2_; }
      set {
        fILLER2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemAccountQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemAccountQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TRANSCODE != other.TRANSCODE) return false;
      if (FUNCTIONCODE != other.FUNCTIONCODE) return false;
      if (TELNO != other.TELNO) return false;
      if (TODAY != other.TODAY) return false;
      if (UNITFILE != other.UNITFILE) return false;
      if (WSBROKERID != other.WSBROKERID) return false;
      if (WSIBNO != other.WSIBNO) return false;
      if (WSINVESTORACNO != other.WSINVESTORACNO) return false;
      if (WSSKACNO != other.WSSKACNO) return false;
      if (WSMODEKIND != other.WSMODEKIND) return false;
      if (WSPASSWD != other.WSPASSWD) return false;
      if (WSSECUREKIND != other.WSSECUREKIND) return false;
      if (WSLOGINIDNO != other.WSLOGINIDNO) return false;
      if (WSAUTOOFFSETFLAG != other.WSAUTOOFFSETFLAG) return false;
      if (WSPOSTFLAG != other.WSPOSTFLAG) return false;
      if (WSEMAILADDRESS != other.WSEMAILADDRESS) return false;
      if (WSAUTO429FLAG != other.WSAUTO429FLAG) return false;
      if (WSAPPLYYMD != other.WSAPPLYYMD) return false;
      if (WSAPPLYTIME != other.WSAPPLYTIME) return false;
      if (WSMITFLAG != other.WSMITFLAG) return false;
      if (WSAUTOMARGINFLAG != other.WSAUTOMARGINFLAG) return false;
      if (WSEUREXFFACNO != other.WSEUREXFFACNO) return false;
      if (FILLER1 != other.FILLER1) return false;
      if (FILLER2 != other.FILLER2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TRANSCODE.Length != 0) hash ^= TRANSCODE.GetHashCode();
      if (FUNCTIONCODE.Length != 0) hash ^= FUNCTIONCODE.GetHashCode();
      if (TELNO.Length != 0) hash ^= TELNO.GetHashCode();
      if (TODAY.Length != 0) hash ^= TODAY.GetHashCode();
      if (UNITFILE.Length != 0) hash ^= UNITFILE.GetHashCode();
      if (WSBROKERID.Length != 0) hash ^= WSBROKERID.GetHashCode();
      if (WSIBNO.Length != 0) hash ^= WSIBNO.GetHashCode();
      if (WSINVESTORACNO.Length != 0) hash ^= WSINVESTORACNO.GetHashCode();
      if (WSSKACNO.Length != 0) hash ^= WSSKACNO.GetHashCode();
      if (WSMODEKIND.Length != 0) hash ^= WSMODEKIND.GetHashCode();
      if (WSPASSWD.Length != 0) hash ^= WSPASSWD.GetHashCode();
      if (WSSECUREKIND.Length != 0) hash ^= WSSECUREKIND.GetHashCode();
      if (WSLOGINIDNO.Length != 0) hash ^= WSLOGINIDNO.GetHashCode();
      if (WSAUTOOFFSETFLAG.Length != 0) hash ^= WSAUTOOFFSETFLAG.GetHashCode();
      if (WSPOSTFLAG.Length != 0) hash ^= WSPOSTFLAG.GetHashCode();
      if (WSEMAILADDRESS.Length != 0) hash ^= WSEMAILADDRESS.GetHashCode();
      if (WSAUTO429FLAG.Length != 0) hash ^= WSAUTO429FLAG.GetHashCode();
      if (WSAPPLYYMD.Length != 0) hash ^= WSAPPLYYMD.GetHashCode();
      if (WSAPPLYTIME.Length != 0) hash ^= WSAPPLYTIME.GetHashCode();
      if (WSMITFLAG.Length != 0) hash ^= WSMITFLAG.GetHashCode();
      if (WSAUTOMARGINFLAG.Length != 0) hash ^= WSAUTOMARGINFLAG.GetHashCode();
      if (WSEUREXFFACNO.Length != 0) hash ^= WSEUREXFFACNO.GetHashCode();
      if (FILLER1.Length != 0) hash ^= FILLER1.GetHashCode();
      if (FILLER2.Length != 0) hash ^= FILLER2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TRANSCODE.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TRANSCODE);
      }
      if (FUNCTIONCODE.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONCODE);
      }
      if (TELNO.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TELNO);
      }
      if (TODAY.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TODAY);
      }
      if (UNITFILE.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UNITFILE);
      }
      if (WSBROKERID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WSBROKERID);
      }
      if (WSIBNO.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WSIBNO);
      }
      if (WSINVESTORACNO.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WSINVESTORACNO);
      }
      if (WSSKACNO.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WSSKACNO);
      }
      if (WSMODEKIND.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WSMODEKIND);
      }
      if (WSPASSWD.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(WSPASSWD);
      }
      if (WSSECUREKIND.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WSSECUREKIND);
      }
      if (WSLOGINIDNO.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WSLOGINIDNO);
      }
      if (WSAUTOOFFSETFLAG.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(WSAUTOOFFSETFLAG);
      }
      if (WSPOSTFLAG.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(WSPOSTFLAG);
      }
      if (WSEMAILADDRESS.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WSEMAILADDRESS);
      }
      if (WSAUTO429FLAG.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(WSAUTO429FLAG);
      }
      if (WSAPPLYYMD.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(WSAPPLYYMD);
      }
      if (WSAPPLYTIME.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(WSAPPLYTIME);
      }
      if (WSMITFLAG.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WSMITFLAG);
      }
      if (WSAUTOMARGINFLAG.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(WSAUTOMARGINFLAG);
      }
      if (WSEUREXFFACNO.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(WSEUREXFFACNO);
      }
      if (FILLER1.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(FILLER1);
      }
      if (FILLER2.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(FILLER2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TRANSCODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TRANSCODE);
      }
      if (FUNCTIONCODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONCODE);
      }
      if (TELNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TELNO);
      }
      if (TODAY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TODAY);
      }
      if (UNITFILE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UNITFILE);
      }
      if (WSBROKERID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSBROKERID);
      }
      if (WSIBNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSIBNO);
      }
      if (WSINVESTORACNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSINVESTORACNO);
      }
      if (WSSKACNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSSKACNO);
      }
      if (WSMODEKIND.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSMODEKIND);
      }
      if (WSPASSWD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSPASSWD);
      }
      if (WSSECUREKIND.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSSECUREKIND);
      }
      if (WSLOGINIDNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSLOGINIDNO);
      }
      if (WSAUTOOFFSETFLAG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSAUTOOFFSETFLAG);
      }
      if (WSPOSTFLAG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSPOSTFLAG);
      }
      if (WSEMAILADDRESS.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSEMAILADDRESS);
      }
      if (WSAUTO429FLAG.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSAUTO429FLAG);
      }
      if (WSAPPLYYMD.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSAPPLYYMD);
      }
      if (WSAPPLYTIME.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSAPPLYTIME);
      }
      if (WSMITFLAG.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSMITFLAG);
      }
      if (WSAUTOMARGINFLAG.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSAUTOMARGINFLAG);
      }
      if (WSEUREXFFACNO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSEUREXFFACNO);
      }
      if (FILLER1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER1);
      }
      if (FILLER2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemAccountQuery other) {
      if (other == null) {
        return;
      }
      if (other.TRANSCODE.Length != 0) {
        TRANSCODE = other.TRANSCODE;
      }
      if (other.FUNCTIONCODE.Length != 0) {
        FUNCTIONCODE = other.FUNCTIONCODE;
      }
      if (other.TELNO.Length != 0) {
        TELNO = other.TELNO;
      }
      if (other.TODAY.Length != 0) {
        TODAY = other.TODAY;
      }
      if (other.UNITFILE.Length != 0) {
        UNITFILE = other.UNITFILE;
      }
      if (other.WSBROKERID.Length != 0) {
        WSBROKERID = other.WSBROKERID;
      }
      if (other.WSIBNO.Length != 0) {
        WSIBNO = other.WSIBNO;
      }
      if (other.WSINVESTORACNO.Length != 0) {
        WSINVESTORACNO = other.WSINVESTORACNO;
      }
      if (other.WSSKACNO.Length != 0) {
        WSSKACNO = other.WSSKACNO;
      }
      if (other.WSMODEKIND.Length != 0) {
        WSMODEKIND = other.WSMODEKIND;
      }
      if (other.WSPASSWD.Length != 0) {
        WSPASSWD = other.WSPASSWD;
      }
      if (other.WSSECUREKIND.Length != 0) {
        WSSECUREKIND = other.WSSECUREKIND;
      }
      if (other.WSLOGINIDNO.Length != 0) {
        WSLOGINIDNO = other.WSLOGINIDNO;
      }
      if (other.WSAUTOOFFSETFLAG.Length != 0) {
        WSAUTOOFFSETFLAG = other.WSAUTOOFFSETFLAG;
      }
      if (other.WSPOSTFLAG.Length != 0) {
        WSPOSTFLAG = other.WSPOSTFLAG;
      }
      if (other.WSEMAILADDRESS.Length != 0) {
        WSEMAILADDRESS = other.WSEMAILADDRESS;
      }
      if (other.WSAUTO429FLAG.Length != 0) {
        WSAUTO429FLAG = other.WSAUTO429FLAG;
      }
      if (other.WSAPPLYYMD.Length != 0) {
        WSAPPLYYMD = other.WSAPPLYYMD;
      }
      if (other.WSAPPLYTIME.Length != 0) {
        WSAPPLYTIME = other.WSAPPLYTIME;
      }
      if (other.WSMITFLAG.Length != 0) {
        WSMITFLAG = other.WSMITFLAG;
      }
      if (other.WSAUTOMARGINFLAG.Length != 0) {
        WSAUTOMARGINFLAG = other.WSAUTOMARGINFLAG;
      }
      if (other.WSEUREXFFACNO.Length != 0) {
        WSEUREXFFACNO = other.WSEUREXFFACNO;
      }
      if (other.FILLER1.Length != 0) {
        FILLER1 = other.FILLER1;
      }
      if (other.FILLER2.Length != 0) {
        FILLER2 = other.FILLER2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TRANSCODE = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONCODE = input.ReadString();
            break;
          }
          case 26: {
            TELNO = input.ReadString();
            break;
          }
          case 34: {
            TODAY = input.ReadString();
            break;
          }
          case 42: {
            UNITFILE = input.ReadString();
            break;
          }
          case 50: {
            WSBROKERID = input.ReadString();
            break;
          }
          case 58: {
            WSIBNO = input.ReadString();
            break;
          }
          case 66: {
            WSINVESTORACNO = input.ReadString();
            break;
          }
          case 74: {
            WSSKACNO = input.ReadString();
            break;
          }
          case 82: {
            WSMODEKIND = input.ReadString();
            break;
          }
          case 90: {
            WSPASSWD = input.ReadString();
            break;
          }
          case 98: {
            WSSECUREKIND = input.ReadString();
            break;
          }
          case 106: {
            WSLOGINIDNO = input.ReadString();
            break;
          }
          case 114: {
            WSAUTOOFFSETFLAG = input.ReadString();
            break;
          }
          case 122: {
            WSPOSTFLAG = input.ReadString();
            break;
          }
          case 130: {
            WSEMAILADDRESS = input.ReadString();
            break;
          }
          case 138: {
            WSAUTO429FLAG = input.ReadString();
            break;
          }
          case 146: {
            WSAPPLYYMD = input.ReadString();
            break;
          }
          case 154: {
            WSAPPLYTIME = input.ReadString();
            break;
          }
          case 162: {
            WSMITFLAG = input.ReadString();
            break;
          }
          case 170: {
            WSAUTOMARGINFLAG = input.ReadString();
            break;
          }
          case 178: {
            WSEUREXFFACNO = input.ReadString();
            break;
          }
          case 186: {
            FILLER1 = input.ReadString();
            break;
          }
          case 194: {
            FILLER2 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///對tandem查詢的 SubAccountMessage
  /// </summary>
  public sealed partial class TandemSubAccountQuery : pb::IMessage<TandemSubAccountQuery> {
    private static readonly pb::MessageParser<TandemSubAccountQuery> _parser = new pb::MessageParser<TandemSubAccountQuery>(() => new TandemSubAccountQuery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemSubAccountQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemSubAccountQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemSubAccountQuery(TandemSubAccountQuery other) : this() {
      tRANSCODE_ = other.tRANSCODE_;
      fUNCTIONCODE_ = other.fUNCTIONCODE_;
      tELNO_ = other.tELNO_;
      tODAY_ = other.tODAY_;
      uNITFILE_ = other.uNITFILE_;
      wSBROKERID_ = other.wSBROKERID_;
      wSIBNO_ = other.wSIBNO_;
      wSOPENDATES_ = other.wSOPENDATES_;
      wSOPENDATEE_ = other.wSOPENDATEE_;
      wSFUACNO_ = other.wSFUACNO_;
      wSFVACNO_ = other.wSFVACNO_;
      wSKEY_ = other.wSKEY_;
      wSKEYFILLER_ = other.wSKEYFILLER_;
      fILLER_ = other.fILLER_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemSubAccountQuery Clone() {
      return new TandemSubAccountQuery(this);
    }

    /// <summary>Field number for the "TRANS_CODE" field.</summary>
    public const int TRANSCODEFieldNumber = 1;
    private string tRANSCODE_ = "";
    /// <summary>
    ///PIC S9(04)  COMP.  2      C      4      0      11:期貨網路 12:E_Agent 13:證券網路 14:"前台系統查詢(與個資相關之欄位不回覆)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TRANSCODE {
      get { return tRANSCODE_; }
      set {
        tRANSCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTION_CODE" field.</summary>
    public const int FUNCTIONCODEFieldNumber = 2;
    private string fUNCTIONCODE_ = "";
    /// <summary>
    ///PIC S9(04)  COMP.  2      C      4      0      1:首次查詢 3:繼續查詢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONCODE {
      get { return fUNCTIONCODE_; }
      set {
        fUNCTIONCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TEL_NO" field.</summary>
    public const int TELNOFieldNumber = 3;
    private string tELNO_ = "";
    /// <summary>
    ///PIC 9(04)  COMP.     2      C      4      0      SELLER_ID                                                                                               櫃員代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TELNO {
      get { return tELNO_; }
      set {
        tELNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TODAY" field.</summary>
    public const int TODAYFieldNumber = 4;
    private string tODAY_ = "";
    /// <summary>
    ///PIC 9(08)  COMP.     4      C      8      0      EX：20040226                                                                                      西元年月日(今日)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TODAY {
      get { return tODAY_; }
      set {
        tODAY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UNIT_FILE" field.</summary>
    public const int UNITFILEFieldNumber = 5;
    private string uNITFILE_ = "";
    /// <summary>
    ///PIC 9(4)   COMP.        2      C      4      0      1                                                                                                            證券 UNIT_FILE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UNITFILE {
      get { return uNITFILE_; }
      set {
        uNITFILE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_BROKER_ID" field.</summary>
    public const int WSBROKERIDFieldNumber = 6;
    private string wSBROKERID_ = "";
    /// <summary>
    ///PIC X(7).                    7      X      7      0      SPACE                                                                                                      期貨商代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSBROKERID {
      get { return wSBROKERID_; }
      set {
        wSBROKERID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_IB_NO" field.</summary>
    public const int WSIBNOFieldNumber = 7;
    private string wSIBNO_ = "";
    /// <summary>
    ///PIC X(3).                    3      X      3      0      A+證券UNIT                                                                                           IB 代號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSIBNO {
      get { return wSIBNO_; }
      set {
        wSIBNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_OPEN_DATE_S" field.</summary>
    public const int WSOPENDATESFieldNumber = 8;
    private string wSOPENDATES_ = "";
    /// <summary>
    ///PIC 9(08).         8      9      8      0      EX：20040226(固定給0)                                                                       起始開戶日西元年月日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSOPENDATES {
      get { return wSOPENDATES_; }
      set {
        wSOPENDATES_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_OPEN_DATE_E" field.</summary>
    public const int WSOPENDATEEFieldNumber = 9;
    private string wSOPENDATEE_ = "";
    /// <summary>
    ///PIC 9(08).         8      9      8      0      EX：20040226(固定給99999999)                                                 截止開戶日西元年月日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSOPENDATEE {
      get { return wSOPENDATEE_; }
      set {
        wSOPENDATEE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_FU_ACNO" field.</summary>
    public const int WSFUACNOFieldNumber = 10;
    private string wSFUACNO_ = "";
    /// <summary>
    ///PIC 9(7) COMP.        4      C      7      0      以子帳查詢時單一子帳時母帳可以不用給                                        母帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSFUACNO {
      get { return wSFUACNO_; }
      set {
        wSFUACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_FV_ACNO" field.</summary>
    public const int WSFVACNOFieldNumber = 11;
    private string wSFVACNO_ = "";
    /// <summary>
    ///PIC 9(7) COMP.        4      C      7      0      "查詢全部子帳時請給0 查詢單一子帳時請給子帳帳號即可"   子帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSFVACNO {
      get { return wSFVACNO_; }
      set {
        wSFVACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_KEY" field.</summary>
    public const int WSKEYFieldNumber = 12;
    private string wSKEY_ = "";
    /// <summary>
    ///PIC X(58).           58    X      58    0      第一次:ALL SPACES.(for more data.)        MORE DATA :  MOVE WR_KEY TO WS_KEY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSKEY {
      get { return wSKEY_; }
      set {
        wSKEY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_KEY_FILLER" field.</summary>
    public const int WSKEYFILLERFieldNumber = 13;
    private string wSKEYFILLER_ = "";
    /// <summary>
    ///PIC X(42).            42    X              42            0      SPACES                                                                                                    KEY FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSKEYFILLER {
      get { return wSKEYFILLER_; }
      set {
        wSKEYFILLER_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER" field.</summary>
    public const int FILLERFieldNumber = 14;
    private string fILLER_ = "";
    /// <summary>
    ///PIC X(154).            154  X              154          0      SPACES                                                                                                    FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER {
      get { return fILLER_; }
      set {
        fILLER_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemSubAccountQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemSubAccountQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TRANSCODE != other.TRANSCODE) return false;
      if (FUNCTIONCODE != other.FUNCTIONCODE) return false;
      if (TELNO != other.TELNO) return false;
      if (TODAY != other.TODAY) return false;
      if (UNITFILE != other.UNITFILE) return false;
      if (WSBROKERID != other.WSBROKERID) return false;
      if (WSIBNO != other.WSIBNO) return false;
      if (WSOPENDATES != other.WSOPENDATES) return false;
      if (WSOPENDATEE != other.WSOPENDATEE) return false;
      if (WSFUACNO != other.WSFUACNO) return false;
      if (WSFVACNO != other.WSFVACNO) return false;
      if (WSKEY != other.WSKEY) return false;
      if (WSKEYFILLER != other.WSKEYFILLER) return false;
      if (FILLER != other.FILLER) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TRANSCODE.Length != 0) hash ^= TRANSCODE.GetHashCode();
      if (FUNCTIONCODE.Length != 0) hash ^= FUNCTIONCODE.GetHashCode();
      if (TELNO.Length != 0) hash ^= TELNO.GetHashCode();
      if (TODAY.Length != 0) hash ^= TODAY.GetHashCode();
      if (UNITFILE.Length != 0) hash ^= UNITFILE.GetHashCode();
      if (WSBROKERID.Length != 0) hash ^= WSBROKERID.GetHashCode();
      if (WSIBNO.Length != 0) hash ^= WSIBNO.GetHashCode();
      if (WSOPENDATES.Length != 0) hash ^= WSOPENDATES.GetHashCode();
      if (WSOPENDATEE.Length != 0) hash ^= WSOPENDATEE.GetHashCode();
      if (WSFUACNO.Length != 0) hash ^= WSFUACNO.GetHashCode();
      if (WSFVACNO.Length != 0) hash ^= WSFVACNO.GetHashCode();
      if (WSKEY.Length != 0) hash ^= WSKEY.GetHashCode();
      if (WSKEYFILLER.Length != 0) hash ^= WSKEYFILLER.GetHashCode();
      if (FILLER.Length != 0) hash ^= FILLER.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TRANSCODE.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TRANSCODE);
      }
      if (FUNCTIONCODE.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONCODE);
      }
      if (TELNO.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TELNO);
      }
      if (TODAY.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TODAY);
      }
      if (UNITFILE.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UNITFILE);
      }
      if (WSBROKERID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WSBROKERID);
      }
      if (WSIBNO.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WSIBNO);
      }
      if (WSOPENDATES.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WSOPENDATES);
      }
      if (WSOPENDATEE.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WSOPENDATEE);
      }
      if (WSFUACNO.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WSFUACNO);
      }
      if (WSFVACNO.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(WSFVACNO);
      }
      if (WSKEY.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WSKEY);
      }
      if (WSKEYFILLER.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WSKEYFILLER);
      }
      if (FILLER.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(FILLER);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TRANSCODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TRANSCODE);
      }
      if (FUNCTIONCODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONCODE);
      }
      if (TELNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TELNO);
      }
      if (TODAY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TODAY);
      }
      if (UNITFILE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UNITFILE);
      }
      if (WSBROKERID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSBROKERID);
      }
      if (WSIBNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSIBNO);
      }
      if (WSOPENDATES.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSOPENDATES);
      }
      if (WSOPENDATEE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSOPENDATEE);
      }
      if (WSFUACNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSFUACNO);
      }
      if (WSFVACNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSFVACNO);
      }
      if (WSKEY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSKEY);
      }
      if (WSKEYFILLER.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSKEYFILLER);
      }
      if (FILLER.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FILLER);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemSubAccountQuery other) {
      if (other == null) {
        return;
      }
      if (other.TRANSCODE.Length != 0) {
        TRANSCODE = other.TRANSCODE;
      }
      if (other.FUNCTIONCODE.Length != 0) {
        FUNCTIONCODE = other.FUNCTIONCODE;
      }
      if (other.TELNO.Length != 0) {
        TELNO = other.TELNO;
      }
      if (other.TODAY.Length != 0) {
        TODAY = other.TODAY;
      }
      if (other.UNITFILE.Length != 0) {
        UNITFILE = other.UNITFILE;
      }
      if (other.WSBROKERID.Length != 0) {
        WSBROKERID = other.WSBROKERID;
      }
      if (other.WSIBNO.Length != 0) {
        WSIBNO = other.WSIBNO;
      }
      if (other.WSOPENDATES.Length != 0) {
        WSOPENDATES = other.WSOPENDATES;
      }
      if (other.WSOPENDATEE.Length != 0) {
        WSOPENDATEE = other.WSOPENDATEE;
      }
      if (other.WSFUACNO.Length != 0) {
        WSFUACNO = other.WSFUACNO;
      }
      if (other.WSFVACNO.Length != 0) {
        WSFVACNO = other.WSFVACNO;
      }
      if (other.WSKEY.Length != 0) {
        WSKEY = other.WSKEY;
      }
      if (other.WSKEYFILLER.Length != 0) {
        WSKEYFILLER = other.WSKEYFILLER;
      }
      if (other.FILLER.Length != 0) {
        FILLER = other.FILLER;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TRANSCODE = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONCODE = input.ReadString();
            break;
          }
          case 26: {
            TELNO = input.ReadString();
            break;
          }
          case 34: {
            TODAY = input.ReadString();
            break;
          }
          case 42: {
            UNITFILE = input.ReadString();
            break;
          }
          case 50: {
            WSBROKERID = input.ReadString();
            break;
          }
          case 58: {
            WSIBNO = input.ReadString();
            break;
          }
          case 66: {
            WSOPENDATES = input.ReadString();
            break;
          }
          case 74: {
            WSOPENDATEE = input.ReadString();
            break;
          }
          case 82: {
            WSFUACNO = input.ReadString();
            break;
          }
          case 90: {
            WSFVACNO = input.ReadString();
            break;
          }
          case 98: {
            WSKEY = input.ReadString();
            break;
          }
          case 106: {
            WSKEYFILLER = input.ReadString();
            break;
          }
          case 114: {
            FILLER = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TandemAccountResult : pb::IMessage<TandemAccountResult> {
    private static readonly pb::MessageParser<TandemAccountResult> _parser = new pb::MessageParser<TandemAccountResult>(() => new TandemAccountResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemAccountResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemAccountResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemAccountResult(TandemAccountResult other) : this() {
      wRREPLYCODE_ = other.wRREPLYCODE_;
      wRADVISORY_ = other.wRADVISORY_;
      wREMAILADDRESS_ = other.wREMAILADDRESS_;
      wRPOSTFLAG_ = other.wRPOSTFLAG_;
      wRAUTO429FLAG_ = other.wRAUTO429FLAG_;
      wRTICKFLAG_ = other.wRTICKFLAG_;
      wRAUTOMARGINFLAG_ = other.wRAUTOMARGINFLAG_;
      wREUREXSIGNFLAG_ = other.wREUREXSIGNFLAG_;
      wREUREXFFACNO_ = other.wREUREXFFACNO_;
      wRBROKERID_ = other.wRBROKERID_;
      wRKIND_ = other.wRKIND_;
      wRDMAFLAG_ = other.wRDMAFLAG_;
      wRVIPFLAG_ = other.wRVIPFLAG_;
      wRTPVIPFLAG_ = other.wRTPVIPFLAG_;
      wRAPIFLAG_ = other.wRAPIFLAG_;
      fILLER_ = other.fILLER_;
      wRSTATUSFLAG_ = other.wRSTATUSFLAG_;
      wRAEID_ = other.wRAEID_;
      wRNAEID_ = other.wRNAEID_;
      wRTRADEDATE_ = other.wRTRADEDATE_;
      wRTRAINVESTAMTLIMIT_ = other.wRTRAINVESTAMTLIMIT_;
      fILLER1_ = other.fILLER1_;
      fILLER2_ = other.fILLER2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemAccountResult Clone() {
      return new TandemAccountResult(this);
    }

    /// <summary>Field number for the "WR_REPLY_CODE" field.</summary>
    public const int WRREPLYCODEFieldNumber = 1;
    private string wRREPLYCODE_ = "";
    /// <summary>
    ///PIC S9(04) COMP. 2      C      4      0      0：正確，其他皆有誤(訊息代號)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRREPLYCODE {
      get { return wRREPLYCODE_; }
      set {
        wRREPLYCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_ADVISORY" field.</summary>
    public const int WRADVISORYFieldNumber = 2;
    private string wRADVISORY_ = "";
    /// <summary>
    ///PIC X(78).             78    X      78    0      中文訊息(回傳之中文訊息)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRADVISORY {
      get { return wRADVISORY_; }
      set {
        wRADVISORY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_EMAIL_ADDRESS" field.</summary>
    public const int WREMAILADDRESSFieldNumber = 3;
    private string wREMAILADDRESS_ = "";
    /// <summary>
    ///PIC X(80).             80    X      80    0      "EMAIL TRANS_CODE=14時此欄位會回覆空白"(E_MAIL ADDRESS)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WREMAILADDRESS {
      get { return wREMAILADDRESS_; }
      set {
        wREMAILADDRESS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_POST_FLAG" field.</summary>
    public const int WRPOSTFLAGFieldNumber = 4;
    private string wRPOSTFLAG_ = "";
    /// <summary>
    ///PIC X(01).             1      X      1      0      1:同戶籍地址 2:同通訊地址 3:自取 4:寄送地址      5:寄送電子對帳單 (買賣報告書寄送處)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRPOSTFLAG {
      get { return wRPOSTFLAG_; }
      set {
        wRPOSTFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_AUTO_429_FLAG" field.</summary>
    public const int WRAUTO429FLAGFieldNumber = 5;
    private string wRAUTO429FLAG_ = "";
    /// <summary>
    ///PIC X(01).             1      X      1      0      ' '：取消保證金最佳化(取消智慧型及半智慧型保證金最佳化)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRAUTO429FLAG {
      get { return wRAUTO429FLAG_; }
      set {
        wRAUTO429FLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_TICK_FLAG" field.</summary>
    public const int WRTICKFLAGFieldNumber = 6;
    private string wRTICKFLAG_ = "";
    /// <summary>
    ///                                                                   Y：全部重拆組                                                                                                                                                                                智慧型保證金最佳化
    ///                                                                   B：僅組合成新成交部份                                                                                                                                                                半智慧型保證金最佳化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRTICKFLAG {
      get { return wRTICKFLAG_; }
      set {
        wRTICKFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_AUTO_MARGIN_FLAG" field.</summary>
    public const int WRAUTOMARGINFLAGFieldNumber = 7;
    private string wRAUTOMARGINFLAG_ = "";
    /// <summary>
    ///                                                                   "N" 取消(不檢核)
    ///                                                                   " "：依本公司規定辦理(檢核)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRAUTOMARGINFLAG {
      get { return wRAUTOMARGINFLAG_; }
      set {
        wRAUTOMARGINFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_EUREX_SIGN_FLAG" field.</summary>
    public const int WREUREXSIGNFLAGFieldNumber = 8;
    private string wREUREXSIGNFLAG_ = "";
    /// <summary>
    ///                                                                   A：申請虛擬最佳化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WREUREXSIGNFLAG {
      get { return wREUREXSIGNFLAG_; }
      set {
        wREUREXSIGNFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_EUREX_FF_ACNO" field.</summary>
    public const int WREUREXFFACNOFieldNumber = 9;
    private string wREUREXFFACNO_ = "";
    /// <summary>
    ///                                                                     " " 無簽署狀態
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WREUREXFFACNO {
      get { return wREUREXFFACNO_; }
      set {
        wREUREXFFACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_BROKER_ID" field.</summary>
    public const int WRBROKERIDFieldNumber = 10;
    private string wRBROKERID_ = "";
    /// <summary>
    ///PIC X(7).                       7      X      7      0      客戶所屬期商代號                                                                                                                                                                        期貨商代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRBROKERID {
      get { return wRBROKERID_; }
      set {
        wRBROKERID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_KIND" field.</summary>
    public const int WRKINDFieldNumber = 11;
    private string wRKIND_ = "";
    /// <summary>
    ///PIC X(1).                       1      X      1      0      戶別依期交所規則制定                                                                                                                                                                戶別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRKIND {
      get { return wRKIND_; }
      set {
        wRKIND_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_DMA_FLAG" field.</summary>
    public const int WRDMAFLAGFieldNumber = 12;
    private string wRDMAFLAG_ = "";
    /// <summary>
    ///PIC X(1).                       1      X      1      0      Y: 有申請                                                                                                                                                                                       DMA註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRDMAFLAG {
      get { return wRDMAFLAG_; }
      set {
        wRDMAFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_VIP_FLAG" field.</summary>
    public const int WRVIPFLAGFieldNumber = 13;
    private string wRVIPFLAG_ = "";
    /// <summary>
    ///PIC X(1).                       1      X      1      0      Y: 有申請                                                                                                                                                                                       凱衛大戶註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRVIPFLAG {
      get { return wRVIPFLAG_; }
      set {
        wRVIPFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_TPVIP_FLAG" field.</summary>
    public const int WRTPVIPFLAGFieldNumber = 14;
    private string wRTPVIPFLAG_ = "";
    /// <summary>
    ///PIC X(1).                       1      X      1      0      Y: 有申請                                                                                                                                                                                       TPass客戶註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRTPVIPFLAG {
      get { return wRTPVIPFLAG_; }
      set {
        wRTPVIPFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_API_FLAG" field.</summary>
    public const int WRAPIFLAGFieldNumber = 15;
    private string wRAPIFLAG_ = "";
    /// <summary>
    ///PIC X(1).                       1      X      1      0      Y: 有申請                                                                                                                                                                                       API註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRAPIFLAG {
      get { return wRAPIFLAG_; }
      set {
        wRAPIFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER" field.</summary>
    public const int FILLERFieldNumber = 16;
    private string fILLER_ = "";
    /// <summary>
    ///PIC X(1).                       1      X      1      0      SPACE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER {
      get { return fILLER_; }
      set {
        fILLER_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_STATUS_FLAG" field.</summary>
    public const int WRSTATUSFLAGFieldNumber = 17;
    private string wRSTATUSFLAG_ = "";
    /// <summary>
    ///PIC X(1).                       1      X      1      0      1:可交易                                                                                                                                                                                 交易狀態碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRSTATUSFLAG {
      get { return wRSTATUSFLAG_; }
      set {
        wRSTATUSFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_AE_ID" field.</summary>
    public const int WRAEIDFieldNumber = 18;
    private string wRAEID_ = "";
    /// <summary>
    ///                                                                   2:暫停(不可下新倉單)
    ///                                                                   3:註銷
    ///                                                                   ' ':新開戶,未傳期交所
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRAEID {
      get { return wRAEID_; }
      set {
        wRAEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_NAE_ID" field.</summary>
    public const int WRNAEIDFieldNumber = 19;
    private string wRNAEID_ = "";
    /// <summary>
    ///PIC 9(4) COMP.    2      C      4      0      網路單營業員                                                                                                                                                                                網路營業員
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRNAEID {
      get { return wRNAEID_; }
      set {
        wRNAEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_TRADE_DATE" field.</summary>
    public const int WRTRADEDATEFieldNumber = 20;
    private string wRTRADEDATE_ = "";
    /// <summary>
    ///PIC 9(8) COMP.    4      C      8      0      承作當沖日期大於等於今日,且累計之當沖委託金額小於原申請的當沖上限金額表示該帳號可以承做當沖商品           承作當沖日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRTRADEDATE {
      get { return wRTRADEDATE_; }
      set {
        wRTRADEDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_TRA_INVEST_AMT_LIMIT" field.</summary>
    public const int WRTRAINVESTAMTLIMITFieldNumber = 21;
    private string wRTRAINVESTAMTLIMIT_ = "";
    /// <summary>
    ///PIC 9(14) COMP.  8      C      14    0                                                                                                                                                                                                              當沖上限金額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRTRAINVESTAMTLIMIT {
      get { return wRTRAINVESTAMTLIMIT_; }
      set {
        wRTRAINVESTAMTLIMIT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER1" field.</summary>
    public const int FILLER1FieldNumber = 22;
    private string fILLER1_ = "";
    /// <summary>
    ///PIC X(198).           198  X      198  0      SPACE      原來X(28)+X(200)_>X(198)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER1 {
      get { return fILLER1_; }
      set {
        fILLER1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER2" field.</summary>
    public const int FILLER2FieldNumber = 23;
    private string fILLER2_ = "";
    /// <summary>
    ///PIC X(200).           200  X      198  0      SPACE      FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER2 {
      get { return fILLER2_; }
      set {
        fILLER2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemAccountResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemAccountResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WRREPLYCODE != other.WRREPLYCODE) return false;
      if (WRADVISORY != other.WRADVISORY) return false;
      if (WREMAILADDRESS != other.WREMAILADDRESS) return false;
      if (WRPOSTFLAG != other.WRPOSTFLAG) return false;
      if (WRAUTO429FLAG != other.WRAUTO429FLAG) return false;
      if (WRTICKFLAG != other.WRTICKFLAG) return false;
      if (WRAUTOMARGINFLAG != other.WRAUTOMARGINFLAG) return false;
      if (WREUREXSIGNFLAG != other.WREUREXSIGNFLAG) return false;
      if (WREUREXFFACNO != other.WREUREXFFACNO) return false;
      if (WRBROKERID != other.WRBROKERID) return false;
      if (WRKIND != other.WRKIND) return false;
      if (WRDMAFLAG != other.WRDMAFLAG) return false;
      if (WRVIPFLAG != other.WRVIPFLAG) return false;
      if (WRTPVIPFLAG != other.WRTPVIPFLAG) return false;
      if (WRAPIFLAG != other.WRAPIFLAG) return false;
      if (FILLER != other.FILLER) return false;
      if (WRSTATUSFLAG != other.WRSTATUSFLAG) return false;
      if (WRAEID != other.WRAEID) return false;
      if (WRNAEID != other.WRNAEID) return false;
      if (WRTRADEDATE != other.WRTRADEDATE) return false;
      if (WRTRAINVESTAMTLIMIT != other.WRTRAINVESTAMTLIMIT) return false;
      if (FILLER1 != other.FILLER1) return false;
      if (FILLER2 != other.FILLER2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WRREPLYCODE.Length != 0) hash ^= WRREPLYCODE.GetHashCode();
      if (WRADVISORY.Length != 0) hash ^= WRADVISORY.GetHashCode();
      if (WREMAILADDRESS.Length != 0) hash ^= WREMAILADDRESS.GetHashCode();
      if (WRPOSTFLAG.Length != 0) hash ^= WRPOSTFLAG.GetHashCode();
      if (WRAUTO429FLAG.Length != 0) hash ^= WRAUTO429FLAG.GetHashCode();
      if (WRTICKFLAG.Length != 0) hash ^= WRTICKFLAG.GetHashCode();
      if (WRAUTOMARGINFLAG.Length != 0) hash ^= WRAUTOMARGINFLAG.GetHashCode();
      if (WREUREXSIGNFLAG.Length != 0) hash ^= WREUREXSIGNFLAG.GetHashCode();
      if (WREUREXFFACNO.Length != 0) hash ^= WREUREXFFACNO.GetHashCode();
      if (WRBROKERID.Length != 0) hash ^= WRBROKERID.GetHashCode();
      if (WRKIND.Length != 0) hash ^= WRKIND.GetHashCode();
      if (WRDMAFLAG.Length != 0) hash ^= WRDMAFLAG.GetHashCode();
      if (WRVIPFLAG.Length != 0) hash ^= WRVIPFLAG.GetHashCode();
      if (WRTPVIPFLAG.Length != 0) hash ^= WRTPVIPFLAG.GetHashCode();
      if (WRAPIFLAG.Length != 0) hash ^= WRAPIFLAG.GetHashCode();
      if (FILLER.Length != 0) hash ^= FILLER.GetHashCode();
      if (WRSTATUSFLAG.Length != 0) hash ^= WRSTATUSFLAG.GetHashCode();
      if (WRAEID.Length != 0) hash ^= WRAEID.GetHashCode();
      if (WRNAEID.Length != 0) hash ^= WRNAEID.GetHashCode();
      if (WRTRADEDATE.Length != 0) hash ^= WRTRADEDATE.GetHashCode();
      if (WRTRAINVESTAMTLIMIT.Length != 0) hash ^= WRTRAINVESTAMTLIMIT.GetHashCode();
      if (FILLER1.Length != 0) hash ^= FILLER1.GetHashCode();
      if (FILLER2.Length != 0) hash ^= FILLER2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WRREPLYCODE.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WRREPLYCODE);
      }
      if (WRADVISORY.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WRADVISORY);
      }
      if (WREMAILADDRESS.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WREMAILADDRESS);
      }
      if (WRPOSTFLAG.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WRPOSTFLAG);
      }
      if (WRAUTO429FLAG.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WRAUTO429FLAG);
      }
      if (WRTICKFLAG.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WRTICKFLAG);
      }
      if (WRAUTOMARGINFLAG.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WRAUTOMARGINFLAG);
      }
      if (WREUREXSIGNFLAG.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WREUREXSIGNFLAG);
      }
      if (WREUREXFFACNO.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WREUREXFFACNO);
      }
      if (WRBROKERID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WRBROKERID);
      }
      if (WRKIND.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(WRKIND);
      }
      if (WRDMAFLAG.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WRDMAFLAG);
      }
      if (WRVIPFLAG.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WRVIPFLAG);
      }
      if (WRTPVIPFLAG.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(WRTPVIPFLAG);
      }
      if (WRAPIFLAG.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(WRAPIFLAG);
      }
      if (FILLER.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(FILLER);
      }
      if (WRSTATUSFLAG.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(WRSTATUSFLAG);
      }
      if (WRAEID.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(WRAEID);
      }
      if (WRNAEID.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(WRNAEID);
      }
      if (WRTRADEDATE.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WRTRADEDATE);
      }
      if (WRTRAINVESTAMTLIMIT.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(WRTRAINVESTAMTLIMIT);
      }
      if (FILLER1.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(FILLER1);
      }
      if (FILLER2.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(FILLER2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WRREPLYCODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRREPLYCODE);
      }
      if (WRADVISORY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRADVISORY);
      }
      if (WREMAILADDRESS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WREMAILADDRESS);
      }
      if (WRPOSTFLAG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRPOSTFLAG);
      }
      if (WRAUTO429FLAG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRAUTO429FLAG);
      }
      if (WRTICKFLAG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRTICKFLAG);
      }
      if (WRAUTOMARGINFLAG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRAUTOMARGINFLAG);
      }
      if (WREUREXSIGNFLAG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WREUREXSIGNFLAG);
      }
      if (WREUREXFFACNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WREUREXFFACNO);
      }
      if (WRBROKERID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRBROKERID);
      }
      if (WRKIND.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRKIND);
      }
      if (WRDMAFLAG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRDMAFLAG);
      }
      if (WRVIPFLAG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRVIPFLAG);
      }
      if (WRTPVIPFLAG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRTPVIPFLAG);
      }
      if (WRAPIFLAG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRAPIFLAG);
      }
      if (FILLER.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER);
      }
      if (WRSTATUSFLAG.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRSTATUSFLAG);
      }
      if (WRAEID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRAEID);
      }
      if (WRNAEID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRNAEID);
      }
      if (WRTRADEDATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRTRADEDATE);
      }
      if (WRTRAINVESTAMTLIMIT.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WRTRAINVESTAMTLIMIT);
      }
      if (FILLER1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER1);
      }
      if (FILLER2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FILLER2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemAccountResult other) {
      if (other == null) {
        return;
      }
      if (other.WRREPLYCODE.Length != 0) {
        WRREPLYCODE = other.WRREPLYCODE;
      }
      if (other.WRADVISORY.Length != 0) {
        WRADVISORY = other.WRADVISORY;
      }
      if (other.WREMAILADDRESS.Length != 0) {
        WREMAILADDRESS = other.WREMAILADDRESS;
      }
      if (other.WRPOSTFLAG.Length != 0) {
        WRPOSTFLAG = other.WRPOSTFLAG;
      }
      if (other.WRAUTO429FLAG.Length != 0) {
        WRAUTO429FLAG = other.WRAUTO429FLAG;
      }
      if (other.WRTICKFLAG.Length != 0) {
        WRTICKFLAG = other.WRTICKFLAG;
      }
      if (other.WRAUTOMARGINFLAG.Length != 0) {
        WRAUTOMARGINFLAG = other.WRAUTOMARGINFLAG;
      }
      if (other.WREUREXSIGNFLAG.Length != 0) {
        WREUREXSIGNFLAG = other.WREUREXSIGNFLAG;
      }
      if (other.WREUREXFFACNO.Length != 0) {
        WREUREXFFACNO = other.WREUREXFFACNO;
      }
      if (other.WRBROKERID.Length != 0) {
        WRBROKERID = other.WRBROKERID;
      }
      if (other.WRKIND.Length != 0) {
        WRKIND = other.WRKIND;
      }
      if (other.WRDMAFLAG.Length != 0) {
        WRDMAFLAG = other.WRDMAFLAG;
      }
      if (other.WRVIPFLAG.Length != 0) {
        WRVIPFLAG = other.WRVIPFLAG;
      }
      if (other.WRTPVIPFLAG.Length != 0) {
        WRTPVIPFLAG = other.WRTPVIPFLAG;
      }
      if (other.WRAPIFLAG.Length != 0) {
        WRAPIFLAG = other.WRAPIFLAG;
      }
      if (other.FILLER.Length != 0) {
        FILLER = other.FILLER;
      }
      if (other.WRSTATUSFLAG.Length != 0) {
        WRSTATUSFLAG = other.WRSTATUSFLAG;
      }
      if (other.WRAEID.Length != 0) {
        WRAEID = other.WRAEID;
      }
      if (other.WRNAEID.Length != 0) {
        WRNAEID = other.WRNAEID;
      }
      if (other.WRTRADEDATE.Length != 0) {
        WRTRADEDATE = other.WRTRADEDATE;
      }
      if (other.WRTRAINVESTAMTLIMIT.Length != 0) {
        WRTRAINVESTAMTLIMIT = other.WRTRAINVESTAMTLIMIT;
      }
      if (other.FILLER1.Length != 0) {
        FILLER1 = other.FILLER1;
      }
      if (other.FILLER2.Length != 0) {
        FILLER2 = other.FILLER2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WRREPLYCODE = input.ReadString();
            break;
          }
          case 18: {
            WRADVISORY = input.ReadString();
            break;
          }
          case 26: {
            WREMAILADDRESS = input.ReadString();
            break;
          }
          case 34: {
            WRPOSTFLAG = input.ReadString();
            break;
          }
          case 42: {
            WRAUTO429FLAG = input.ReadString();
            break;
          }
          case 50: {
            WRTICKFLAG = input.ReadString();
            break;
          }
          case 58: {
            WRAUTOMARGINFLAG = input.ReadString();
            break;
          }
          case 66: {
            WREUREXSIGNFLAG = input.ReadString();
            break;
          }
          case 74: {
            WREUREXFFACNO = input.ReadString();
            break;
          }
          case 82: {
            WRBROKERID = input.ReadString();
            break;
          }
          case 90: {
            WRKIND = input.ReadString();
            break;
          }
          case 98: {
            WRDMAFLAG = input.ReadString();
            break;
          }
          case 106: {
            WRVIPFLAG = input.ReadString();
            break;
          }
          case 114: {
            WRTPVIPFLAG = input.ReadString();
            break;
          }
          case 122: {
            WRAPIFLAG = input.ReadString();
            break;
          }
          case 130: {
            FILLER = input.ReadString();
            break;
          }
          case 138: {
            WRSTATUSFLAG = input.ReadString();
            break;
          }
          case 146: {
            WRAEID = input.ReadString();
            break;
          }
          case 154: {
            WRNAEID = input.ReadString();
            break;
          }
          case 162: {
            WRTRADEDATE = input.ReadString();
            break;
          }
          case 170: {
            WRTRAINVESTAMTLIMIT = input.ReadString();
            break;
          }
          case 178: {
            FILLER1 = input.ReadString();
            break;
          }
          case 186: {
            FILLER2 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TandemSubAccountResult : pb::IMessage<TandemSubAccountResult> {
    private static readonly pb::MessageParser<TandemSubAccountResult> _parser = new pb::MessageParser<TandemSubAccountResult>(() => new TandemSubAccountResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemSubAccountResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemSubAccountResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemSubAccountResult(TandemSubAccountResult other) : this() {
      wRREPLYCODE_ = other.wRREPLYCODE_;
      wRADVISORY_ = other.wRADVISORY_;
      wRKEY_ = other.wRKEY_;
      wRKEYFILLER_ = other.wRKEYFILLER_;
      wRTELLERNO_ = other.wRTELLERNO_;
      wRACNO_ = other.wRACNO_;
      wRSKACNO_ = other.wRSKACNO_;
      wRPHONENOO_ = other.wRPHONENOO_;
      wRPHONENOH_ = other.wRPHONENOH_;
      wRACTPHONENO_ = other.wRACTPHONENO_;
      fILLER_ = other.fILLER_;
      wRCOUNT_ = other.wRCOUNT_;
      wRREADDATA_ = other.wRREADDATA_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemSubAccountResult Clone() {
      return new TandemSubAccountResult(this);
    }

    /// <summary>Field number for the "WR_REPLY_CODE" field.</summary>
    public const int WRREPLYCODEFieldNumber = 1;
    private string wRREPLYCODE_ = "";
    /// <summary>
    ///PIC S9(04) COMP.                         2              C      4        0      0：正確                                                  訊息代號 1：續查             其他皆有誤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRREPLYCODE {
      get { return wRREPLYCODE_; }
      set {
        wRREPLYCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_ADVISORY" field.</summary>
    public const int WRADVISORYFieldNumber = 2;
    private string wRADVISORY_ = "";
    /// <summary>
    ///PIC X(78).                                     78            X        78    0      中文訊息                                                回傳之中文訊息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRADVISORY {
      get { return wRADVISORY_; }
      set {
        wRADVISORY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_KEY" field.</summary>
    public const int WRKEYFieldNumber = 3;
    private string wRKEY_ = "";
    /// <summary>
    ///PIC X(58).                                     33            X        33    0                                                                      KEY值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRKEY {
      get { return wRKEY_; }
      set {
        wRKEY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_KEY_FILLER" field.</summary>
    public const int WRKEYFILLERFieldNumber = 4;
    private string wRKEYFILLER_ = "";
    /// <summary>
    ///PIC X(42).                                     42            X        42    0      SPACE                                                      FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRKEYFILLER {
      get { return wRKEYFILLER_; }
      set {
        wRKEYFILLER_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_TELLER_NO" field.</summary>
    public const int WRTELLERNOFieldNumber = 5;
    private string wRTELLERNO_ = "";
    /// <summary>
    ///PIC 9(04)  COMP.                               2              C        4      0      0                                                              櫃員代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRTELLERNO {
      get { return wRTELLERNO_; }
      set {
        wRTELLERNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_ACNO" field.</summary>
    public const int WRACNOFieldNumber = 6;
    private string wRACNO_ = "";
    /// <summary>
    ///PIC 9(07)  COMP.                               4              C        7      0                                                                      期貨帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRACNO {
      get { return wRACNO_; }
      set {
        wRACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_SK_ACNO" field.</summary>
    public const int WRSKACNOFieldNumber = 7;
    private string wRSKACNO_ = "";
    /// <summary>
    ///PIC 9(07)  COMP.                               4              C        7      0      0                                                              證券帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRSKACNO {
      get { return wRSKACNO_; }
      set {
        wRSKACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_PHONE_NO_O" field.</summary>
    public const int WRPHONENOOFieldNumber = 8;
    private string wRPHONENOO_ = "";
    /// <summary>
    ///PIC X(16).                                     16            X        16    0      TRANS_CODE=14時此欄位會回覆空白        客戶公司電話
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRPHONENOO {
      get { return wRPHONENOO_; }
      set {
        wRPHONENOO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_PHONE_NO_H" field.</summary>
    public const int WRPHONENOHFieldNumber = 9;
    private string wRPHONENOH_ = "";
    /// <summary>
    ///PIC X(16).                                     16            X        16    0      TRANS_CODE=14時此欄位會回覆空白        客戶家裡電話
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRPHONENOH {
      get { return wRPHONENOH_; }
      set {
        wRPHONENOH_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_ACT_PHONE_NO" field.</summary>
    public const int WRACTPHONENOFieldNumber = 10;
    private string wRACTPHONENO_ = "";
    /// <summary>
    ///PIC X(16).                                     16            X        16    0      TRANS_CODE=14時此欄位會回覆空白        客戶其他電話
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRACTPHONENO {
      get { return wRACTPHONENO_; }
      set {
        wRACTPHONENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER" field.</summary>
    public const int FILLERFieldNumber = 11;
    private string fILLER_ = "";
    /// <summary>
    ///PIC X(185).                                   185          X        185  0      SPACES                                                    FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER {
      get { return fILLER_; }
      set {
        fILLER_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_COUNT" field.</summary>
    public const int WRCOUNTFieldNumber = 12;
    private string wRCOUNT_ = "";
    /// <summary>
    ///PIC 9(04)  COMP.                               2              C        4      0                                                                      資料筆數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRCOUNT {
      get { return wRCOUNT_; }
      set {
        wRCOUNT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_READ_DATA" field.</summary>
    public const int WRREADDATAFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Jsunfutures.Messages.TandemSubAccountOCCURS> _repeated_wRREADDATA_codec
        = pb::FieldCodec.ForMessage(106, global::Jsunfutures.Messages.TandemSubAccountOCCURS.Parser);
    private readonly pbc::RepeatedField<global::Jsunfutures.Messages.TandemSubAccountOCCURS> wRREADDATA_ = new pbc::RepeatedField<global::Jsunfutures.Messages.TandemSubAccountOCCURS>();
    /// <summary>
    ///PIC X(200) OCCURS 12 TIMES.      2400        X        200  0                                                                      資料內容參考TandemSubAccountOCCURS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jsunfutures.Messages.TandemSubAccountOCCURS> WRREADDATA {
      get { return wRREADDATA_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemSubAccountResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemSubAccountResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WRREPLYCODE != other.WRREPLYCODE) return false;
      if (WRADVISORY != other.WRADVISORY) return false;
      if (WRKEY != other.WRKEY) return false;
      if (WRKEYFILLER != other.WRKEYFILLER) return false;
      if (WRTELLERNO != other.WRTELLERNO) return false;
      if (WRACNO != other.WRACNO) return false;
      if (WRSKACNO != other.WRSKACNO) return false;
      if (WRPHONENOO != other.WRPHONENOO) return false;
      if (WRPHONENOH != other.WRPHONENOH) return false;
      if (WRACTPHONENO != other.WRACTPHONENO) return false;
      if (FILLER != other.FILLER) return false;
      if (WRCOUNT != other.WRCOUNT) return false;
      if(!wRREADDATA_.Equals(other.wRREADDATA_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WRREPLYCODE.Length != 0) hash ^= WRREPLYCODE.GetHashCode();
      if (WRADVISORY.Length != 0) hash ^= WRADVISORY.GetHashCode();
      if (WRKEY.Length != 0) hash ^= WRKEY.GetHashCode();
      if (WRKEYFILLER.Length != 0) hash ^= WRKEYFILLER.GetHashCode();
      if (WRTELLERNO.Length != 0) hash ^= WRTELLERNO.GetHashCode();
      if (WRACNO.Length != 0) hash ^= WRACNO.GetHashCode();
      if (WRSKACNO.Length != 0) hash ^= WRSKACNO.GetHashCode();
      if (WRPHONENOO.Length != 0) hash ^= WRPHONENOO.GetHashCode();
      if (WRPHONENOH.Length != 0) hash ^= WRPHONENOH.GetHashCode();
      if (WRACTPHONENO.Length != 0) hash ^= WRACTPHONENO.GetHashCode();
      if (FILLER.Length != 0) hash ^= FILLER.GetHashCode();
      if (WRCOUNT.Length != 0) hash ^= WRCOUNT.GetHashCode();
      hash ^= wRREADDATA_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WRREPLYCODE.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WRREPLYCODE);
      }
      if (WRADVISORY.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WRADVISORY);
      }
      if (WRKEY.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WRKEY);
      }
      if (WRKEYFILLER.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WRKEYFILLER);
      }
      if (WRTELLERNO.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WRTELLERNO);
      }
      if (WRACNO.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WRACNO);
      }
      if (WRSKACNO.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WRSKACNO);
      }
      if (WRPHONENOO.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WRPHONENOO);
      }
      if (WRPHONENOH.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WRPHONENOH);
      }
      if (WRACTPHONENO.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WRACTPHONENO);
      }
      if (FILLER.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(FILLER);
      }
      if (WRCOUNT.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WRCOUNT);
      }
      wRREADDATA_.WriteTo(output, _repeated_wRREADDATA_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WRREPLYCODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRREPLYCODE);
      }
      if (WRADVISORY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRADVISORY);
      }
      if (WRKEY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRKEY);
      }
      if (WRKEYFILLER.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRKEYFILLER);
      }
      if (WRTELLERNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRTELLERNO);
      }
      if (WRACNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRACNO);
      }
      if (WRSKACNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRSKACNO);
      }
      if (WRPHONENOO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRPHONENOO);
      }
      if (WRPHONENOH.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRPHONENOH);
      }
      if (WRACTPHONENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRACTPHONENO);
      }
      if (FILLER.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FILLER);
      }
      if (WRCOUNT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRCOUNT);
      }
      size += wRREADDATA_.CalculateSize(_repeated_wRREADDATA_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemSubAccountResult other) {
      if (other == null) {
        return;
      }
      if (other.WRREPLYCODE.Length != 0) {
        WRREPLYCODE = other.WRREPLYCODE;
      }
      if (other.WRADVISORY.Length != 0) {
        WRADVISORY = other.WRADVISORY;
      }
      if (other.WRKEY.Length != 0) {
        WRKEY = other.WRKEY;
      }
      if (other.WRKEYFILLER.Length != 0) {
        WRKEYFILLER = other.WRKEYFILLER;
      }
      if (other.WRTELLERNO.Length != 0) {
        WRTELLERNO = other.WRTELLERNO;
      }
      if (other.WRACNO.Length != 0) {
        WRACNO = other.WRACNO;
      }
      if (other.WRSKACNO.Length != 0) {
        WRSKACNO = other.WRSKACNO;
      }
      if (other.WRPHONENOO.Length != 0) {
        WRPHONENOO = other.WRPHONENOO;
      }
      if (other.WRPHONENOH.Length != 0) {
        WRPHONENOH = other.WRPHONENOH;
      }
      if (other.WRACTPHONENO.Length != 0) {
        WRACTPHONENO = other.WRACTPHONENO;
      }
      if (other.FILLER.Length != 0) {
        FILLER = other.FILLER;
      }
      if (other.WRCOUNT.Length != 0) {
        WRCOUNT = other.WRCOUNT;
      }
      wRREADDATA_.Add(other.wRREADDATA_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WRREPLYCODE = input.ReadString();
            break;
          }
          case 18: {
            WRADVISORY = input.ReadString();
            break;
          }
          case 26: {
            WRKEY = input.ReadString();
            break;
          }
          case 34: {
            WRKEYFILLER = input.ReadString();
            break;
          }
          case 42: {
            WRTELLERNO = input.ReadString();
            break;
          }
          case 50: {
            WRACNO = input.ReadString();
            break;
          }
          case 58: {
            WRSKACNO = input.ReadString();
            break;
          }
          case 66: {
            WRPHONENOO = input.ReadString();
            break;
          }
          case 74: {
            WRPHONENOH = input.ReadString();
            break;
          }
          case 82: {
            WRACTPHONENO = input.ReadString();
            break;
          }
          case 90: {
            FILLER = input.ReadString();
            break;
          }
          case 98: {
            WRCOUNT = input.ReadString();
            break;
          }
          case 106: {
            wRREADDATA_.AddEntriesFrom(input, _repeated_wRREADDATA_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TandemSubAccountOCCURS : pb::IMessage<TandemSubAccountOCCURS> {
    private static readonly pb::MessageParser<TandemSubAccountOCCURS> _parser = new pb::MessageParser<TandemSubAccountOCCURS>(() => new TandemSubAccountOCCURS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TandemSubAccountOCCURS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemSubAccountOCCURS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemSubAccountOCCURS(TandemSubAccountOCCURS other) : this() {
      wRFUACNO_ = other.wRFUACNO_;
      wRFVACNO_ = other.wRFVACNO_;
      wRFUNAME_ = other.wRFUNAME_;
      wRFVNAME_ = other.wRFVNAME_;
      wRFUDEGREE_ = other.wRFUDEGREE_;
      wRFUNETDEGREE_ = other.wRFUNETDEGREE_;
      wRFVDEGREE_ = other.wRFVDEGREE_;
      wRFVNETDEGREE_ = other.wRFVNETDEGREE_;
      wRFVOPENDATE_ = other.wRFVOPENDATE_;
      fILLER_ = other.fILLER_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TandemSubAccountOCCURS Clone() {
      return new TandemSubAccountOCCURS(this);
    }

    /// <summary>Field number for the "WR_FU_ACNO" field.</summary>
    public const int WRFUACNOFieldNumber = 1;
    private string wRFUACNO_ = "";
    /// <summary>
    ///PIC 9(07).                                7      9      7      0                                                                      母帳戶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRFUACNO {
      get { return wRFUACNO_; }
      set {
        wRFUACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_FV_ACNO" field.</summary>
    public const int WRFVACNOFieldNumber = 2;
    private string wRFVACNO_ = "";
    /// <summary>
    ///PIC 9(07).                         7      9      7      0                                                                      子帳戶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRFVACNO {
      get { return wRFVACNO_; }
      set {
        wRFVACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_FU_NAME" field.</summary>
    public const int WRFUNAMEFieldNumber = 3;
    private string wRFUNAME_ = "";
    /// <summary>
    ///PIC X(10).                                10    X      10    0      TRANS_CODE=14時此欄位會回覆空白        母帳戶姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRFUNAME {
      get { return wRFUNAME_; }
      set {
        wRFUNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_FV_NAME" field.</summary>
    public const int WRFVNAMEFieldNumber = 4;
    private string wRFVNAME_ = "";
    /// <summary>
    ///PIC X(10).                                10    X      10    0      TRANS_CODE=14時此欄位會回覆空白        子帳戶姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRFVNAME {
      get { return wRFVNAME_; }
      set {
        wRFVNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_FU_DEGREE" field.</summary>
    public const int WRFUDEGREEFieldNumber = 5;
    private string wRFUDEGREE_ = "";
    /// <summary>
    ///PIC X(07).                         7      X      7      0                                                                      母帳人工單費用等級
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRFUDEGREE {
      get { return wRFUDEGREE_; }
      set {
        wRFUDEGREE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_FU_NET_DEGREE" field.</summary>
    public const int WRFUNETDEGREEFieldNumber = 6;
    private string wRFUNETDEGREE_ = "";
    /// <summary>
    ///PIC X(07).                                7      X      7      2                                                                      母帳網路單費用等級
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRFUNETDEGREE {
      get { return wRFUNETDEGREE_; }
      set {
        wRFUNETDEGREE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_FV_DEGREE" field.</summary>
    public const int WRFVDEGREEFieldNumber = 7;
    private string wRFVDEGREE_ = "";
    /// <summary>
    ///PIC X(07).                         7      X      7      0                                                                      子帳人工單費用等級
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRFVDEGREE {
      get { return wRFVDEGREE_; }
      set {
        wRFVDEGREE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_FV_NET_DEGREE" field.</summary>
    public const int WRFVNETDEGREEFieldNumber = 8;
    private string wRFVNETDEGREE_ = "";
    /// <summary>
    ///PIC X(07).                         7      X      7      0                                                                      子帳網路單費用等級
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRFVNETDEGREE {
      get { return wRFVNETDEGREE_; }
      set {
        wRFVNETDEGREE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WR_FV_OPEN_DATE" field.</summary>
    public const int WRFVOPENDATEFieldNumber = 9;
    private string wRFVOPENDATE_ = "";
    /// <summary>
    ///PIC 9(08).                         8      9      8      0      西元年月日                                            開戶日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WRFVOPENDATE {
      get { return wRFVOPENDATE_; }
      set {
        wRFVOPENDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FILLER" field.</summary>
    public const int FILLERFieldNumber = 10;
    private string fILLER_ = "";
    /// <summary>
    ///PIC X(130) VALUE SPACE.     130  X      130  0      SPASE                                                       FILLER
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FILLER {
      get { return fILLER_; }
      set {
        fILLER_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TandemSubAccountOCCURS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TandemSubAccountOCCURS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WRFUACNO != other.WRFUACNO) return false;
      if (WRFVACNO != other.WRFVACNO) return false;
      if (WRFUNAME != other.WRFUNAME) return false;
      if (WRFVNAME != other.WRFVNAME) return false;
      if (WRFUDEGREE != other.WRFUDEGREE) return false;
      if (WRFUNETDEGREE != other.WRFUNETDEGREE) return false;
      if (WRFVDEGREE != other.WRFVDEGREE) return false;
      if (WRFVNETDEGREE != other.WRFVNETDEGREE) return false;
      if (WRFVOPENDATE != other.WRFVOPENDATE) return false;
      if (FILLER != other.FILLER) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WRFUACNO.Length != 0) hash ^= WRFUACNO.GetHashCode();
      if (WRFVACNO.Length != 0) hash ^= WRFVACNO.GetHashCode();
      if (WRFUNAME.Length != 0) hash ^= WRFUNAME.GetHashCode();
      if (WRFVNAME.Length != 0) hash ^= WRFVNAME.GetHashCode();
      if (WRFUDEGREE.Length != 0) hash ^= WRFUDEGREE.GetHashCode();
      if (WRFUNETDEGREE.Length != 0) hash ^= WRFUNETDEGREE.GetHashCode();
      if (WRFVDEGREE.Length != 0) hash ^= WRFVDEGREE.GetHashCode();
      if (WRFVNETDEGREE.Length != 0) hash ^= WRFVNETDEGREE.GetHashCode();
      if (WRFVOPENDATE.Length != 0) hash ^= WRFVOPENDATE.GetHashCode();
      if (FILLER.Length != 0) hash ^= FILLER.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WRFUACNO.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WRFUACNO);
      }
      if (WRFVACNO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WRFVACNO);
      }
      if (WRFUNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WRFUNAME);
      }
      if (WRFVNAME.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WRFVNAME);
      }
      if (WRFUDEGREE.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WRFUDEGREE);
      }
      if (WRFUNETDEGREE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WRFUNETDEGREE);
      }
      if (WRFVDEGREE.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WRFVDEGREE);
      }
      if (WRFVNETDEGREE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WRFVNETDEGREE);
      }
      if (WRFVOPENDATE.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WRFVOPENDATE);
      }
      if (FILLER.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(FILLER);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WRFUACNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRFUACNO);
      }
      if (WRFVACNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRFVACNO);
      }
      if (WRFUNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRFUNAME);
      }
      if (WRFVNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRFVNAME);
      }
      if (WRFUDEGREE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRFUDEGREE);
      }
      if (WRFUNETDEGREE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRFUNETDEGREE);
      }
      if (WRFVDEGREE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRFVDEGREE);
      }
      if (WRFVNETDEGREE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRFVNETDEGREE);
      }
      if (WRFVOPENDATE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WRFVOPENDATE);
      }
      if (FILLER.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FILLER);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TandemSubAccountOCCURS other) {
      if (other == null) {
        return;
      }
      if (other.WRFUACNO.Length != 0) {
        WRFUACNO = other.WRFUACNO;
      }
      if (other.WRFVACNO.Length != 0) {
        WRFVACNO = other.WRFVACNO;
      }
      if (other.WRFUNAME.Length != 0) {
        WRFUNAME = other.WRFUNAME;
      }
      if (other.WRFVNAME.Length != 0) {
        WRFVNAME = other.WRFVNAME;
      }
      if (other.WRFUDEGREE.Length != 0) {
        WRFUDEGREE = other.WRFUDEGREE;
      }
      if (other.WRFUNETDEGREE.Length != 0) {
        WRFUNETDEGREE = other.WRFUNETDEGREE;
      }
      if (other.WRFVDEGREE.Length != 0) {
        WRFVDEGREE = other.WRFVDEGREE;
      }
      if (other.WRFVNETDEGREE.Length != 0) {
        WRFVNETDEGREE = other.WRFVNETDEGREE;
      }
      if (other.WRFVOPENDATE.Length != 0) {
        WRFVOPENDATE = other.WRFVOPENDATE;
      }
      if (other.FILLER.Length != 0) {
        FILLER = other.FILLER;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WRFUACNO = input.ReadString();
            break;
          }
          case 18: {
            WRFVACNO = input.ReadString();
            break;
          }
          case 26: {
            WRFUNAME = input.ReadString();
            break;
          }
          case 34: {
            WRFVNAME = input.ReadString();
            break;
          }
          case 42: {
            WRFUDEGREE = input.ReadString();
            break;
          }
          case 50: {
            WRFUNETDEGREE = input.ReadString();
            break;
          }
          case 58: {
            WRFVDEGREE = input.ReadString();
            break;
          }
          case 66: {
            WRFVNETDEGREE = input.ReadString();
            break;
          }
          case 74: {
            WRFVOPENDATE = input.ReadString();
            break;
          }
          case 82: {
            FILLER = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///出金查詢回覆
  /// </summary>
  public sealed partial class WithdrawMarginInquireResult : pb::IMessage<WithdrawMarginInquireResult> {
    private static readonly pb::MessageParser<WithdrawMarginInquireResult> _parser = new pb::MessageParser<WithdrawMarginInquireResult>(() => new WithdrawMarginInquireResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WithdrawMarginInquireResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawMarginInquireResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawMarginInquireResult(WithdrawMarginInquireResult other) : this() {
      wKNDATE_ = other.wKNDATE_;
      wKNTXTIME_ = other.wKNTXTIME_;
      wKNBANKID_ = other.wKNBANKID_;
      wKNBANKNO_ = other.wKNBANKNO_;
      wKNTXCODE_ = other.wKNTXCODE_;
      wKNCURRENCY_ = other.wKNCURRENCY_;
      wKNORIAMT_ = other.wKNORIAMT_;
      wKNDAWAPPLYSEQNO_ = other.wKNDAWAPPLYSEQNO_;
      wKNCANCELFLAG_ = other.wKNCANCELFLAG_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawMarginInquireResult Clone() {
      return new WithdrawMarginInquireResult(this);
    }

    /// <summary>Field number for the "WK_N_DATE" field.</summary>
    public const int WKNDATEFieldNumber = 1;
    private string wKNDATE_ = "";
    /// <summary>
    ///交易日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WKNDATE {
      get { return wKNDATE_; }
      set {
        wKNDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WK_N_TX_TIME" field.</summary>
    public const int WKNTXTIMEFieldNumber = 2;
    private string wKNTXTIME_ = "";
    /// <summary>
    ///時間 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WKNTXTIME {
      get { return wKNTXTIME_; }
      set {
        wKNTXTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WK_N_BANK_ID" field.</summary>
    public const int WKNBANKIDFieldNumber = 3;
    private string wKNBANKID_ = "";
    /// <summary>
    ///銀行代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WKNBANKID {
      get { return wKNBANKID_; }
      set {
        wKNBANKID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WK_N_BANK_NO" field.</summary>
    public const int WKNBANKNOFieldNumber = 4;
    private string wKNBANKNO_ = "";
    /// <summary>
    ///銀行帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WKNBANKNO {
      get { return wKNBANKNO_; }
      set {
        wKNBANKNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WK_N_TX_CODE" field.</summary>
    public const int WKNTXCODEFieldNumber = 5;
    private string wKNTXCODE_ = "";
    /// <summary>
    ///存/提
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WKNTXCODE {
      get { return wKNTXCODE_; }
      set {
        wKNTXCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WK_N_CURRENCY" field.</summary>
    public const int WKNCURRENCYFieldNumber = 6;
    private global::Jsunfutures.Messages.Currency wKNCURRENCY_ = 0;
    /// <summary>
    ///交易幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Currency WKNCURRENCY {
      get { return wKNCURRENCY_; }
      set {
        wKNCURRENCY_ = value;
      }
    }

    /// <summary>Field number for the "WK_N_ORI_AMT" field.</summary>
    public const int WKNORIAMTFieldNumber = 7;
    private double wKNORIAMT_;
    /// <summary>
    ///交易金額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WKNORIAMT {
      get { return wKNORIAMT_; }
      set {
        wKNORIAMT_ = value;
      }
    }

    /// <summary>Field number for the "WK_N_DAW_APPLY_SEQNO" field.</summary>
    public const int WKNDAWAPPLYSEQNOFieldNumber = 8;
    private string wKNDAWAPPLYSEQNO_ = "";
    /// <summary>
    ///客戶網頁申請序號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WKNDAWAPPLYSEQNO {
      get { return wKNDAWAPPLYSEQNO_; }
      set {
        wKNDAWAPPLYSEQNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WK_N_CANCEL_FLAG" field.</summary>
    public const int WKNCANCELFLAGFieldNumber = 9;
    private global::Jsunfutures.Messages.CancelFlag wKNCANCELFLAG_ = 0;
    /// <summary>
    ///註銷註記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.CancelFlag WKNCANCELFLAG {
      get { return wKNCANCELFLAG_; }
      set {
        wKNCANCELFLAG_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WithdrawMarginInquireResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WithdrawMarginInquireResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WKNDATE != other.WKNDATE) return false;
      if (WKNTXTIME != other.WKNTXTIME) return false;
      if (WKNBANKID != other.WKNBANKID) return false;
      if (WKNBANKNO != other.WKNBANKNO) return false;
      if (WKNTXCODE != other.WKNTXCODE) return false;
      if (WKNCURRENCY != other.WKNCURRENCY) return false;
      if (WKNORIAMT != other.WKNORIAMT) return false;
      if (WKNDAWAPPLYSEQNO != other.WKNDAWAPPLYSEQNO) return false;
      if (WKNCANCELFLAG != other.WKNCANCELFLAG) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WKNDATE.Length != 0) hash ^= WKNDATE.GetHashCode();
      if (WKNTXTIME.Length != 0) hash ^= WKNTXTIME.GetHashCode();
      if (WKNBANKID.Length != 0) hash ^= WKNBANKID.GetHashCode();
      if (WKNBANKNO.Length != 0) hash ^= WKNBANKNO.GetHashCode();
      if (WKNTXCODE.Length != 0) hash ^= WKNTXCODE.GetHashCode();
      if (WKNCURRENCY != 0) hash ^= WKNCURRENCY.GetHashCode();
      if (WKNORIAMT != 0D) hash ^= WKNORIAMT.GetHashCode();
      if (WKNDAWAPPLYSEQNO.Length != 0) hash ^= WKNDAWAPPLYSEQNO.GetHashCode();
      if (WKNCANCELFLAG != 0) hash ^= WKNCANCELFLAG.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WKNDATE.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WKNDATE);
      }
      if (WKNTXTIME.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WKNTXTIME);
      }
      if (WKNBANKID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WKNBANKID);
      }
      if (WKNBANKNO.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WKNBANKNO);
      }
      if (WKNTXCODE.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WKNTXCODE);
      }
      if (WKNCURRENCY != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) WKNCURRENCY);
      }
      if (WKNORIAMT != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(WKNORIAMT);
      }
      if (WKNDAWAPPLYSEQNO.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WKNDAWAPPLYSEQNO);
      }
      if (WKNCANCELFLAG != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) WKNCANCELFLAG);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WKNDATE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WKNDATE);
      }
      if (WKNTXTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WKNTXTIME);
      }
      if (WKNBANKID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WKNBANKID);
      }
      if (WKNBANKNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WKNBANKNO);
      }
      if (WKNTXCODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WKNTXCODE);
      }
      if (WKNCURRENCY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WKNCURRENCY);
      }
      if (WKNORIAMT != 0D) {
        size += 1 + 8;
      }
      if (WKNDAWAPPLYSEQNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WKNDAWAPPLYSEQNO);
      }
      if (WKNCANCELFLAG != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WKNCANCELFLAG);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WithdrawMarginInquireResult other) {
      if (other == null) {
        return;
      }
      if (other.WKNDATE.Length != 0) {
        WKNDATE = other.WKNDATE;
      }
      if (other.WKNTXTIME.Length != 0) {
        WKNTXTIME = other.WKNTXTIME;
      }
      if (other.WKNBANKID.Length != 0) {
        WKNBANKID = other.WKNBANKID;
      }
      if (other.WKNBANKNO.Length != 0) {
        WKNBANKNO = other.WKNBANKNO;
      }
      if (other.WKNTXCODE.Length != 0) {
        WKNTXCODE = other.WKNTXCODE;
      }
      if (other.WKNCURRENCY != 0) {
        WKNCURRENCY = other.WKNCURRENCY;
      }
      if (other.WKNORIAMT != 0D) {
        WKNORIAMT = other.WKNORIAMT;
      }
      if (other.WKNDAWAPPLYSEQNO.Length != 0) {
        WKNDAWAPPLYSEQNO = other.WKNDAWAPPLYSEQNO;
      }
      if (other.WKNCANCELFLAG != 0) {
        WKNCANCELFLAG = other.WKNCANCELFLAG;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WKNDATE = input.ReadString();
            break;
          }
          case 18: {
            WKNTXTIME = input.ReadString();
            break;
          }
          case 26: {
            WKNBANKID = input.ReadString();
            break;
          }
          case 34: {
            WKNBANKNO = input.ReadString();
            break;
          }
          case 42: {
            WKNTXCODE = input.ReadString();
            break;
          }
          case 48: {
            wKNCURRENCY_ = (global::Jsunfutures.Messages.Currency) input.ReadEnum();
            break;
          }
          case 57: {
            WKNORIAMT = input.ReadDouble();
            break;
          }
          case 66: {
            WKNDAWAPPLYSEQNO = input.ReadString();
            break;
          }
          case 72: {
            wKNCANCELFLAG_ = (global::Jsunfutures.Messages.CancelFlag) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///出金取消
  /// </summary>
  public sealed partial class WithdrawMarginCancelResult : pb::IMessage<WithdrawMarginCancelResult> {
    private static readonly pb::MessageParser<WithdrawMarginCancelResult> _parser = new pb::MessageParser<WithdrawMarginCancelResult>(() => new WithdrawMarginCancelResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WithdrawMarginCancelResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawMarginCancelResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawMarginCancelResult(WithdrawMarginCancelResult other) : this() {
      wSADVISORY_ = other.wSADVISORY_;
      wSSEQNO_ = other.wSSEQNO_;
      wSTXDATE_ = other.wSTXDATE_;
      wSTXTIME_ = other.wSTXTIME_;
      wSINVESTORACNO_ = other.wSINVESTORACNO_;
      wSNTAMT_ = other.wSNTAMT_;
      statusFlag_ = other.statusFlag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawMarginCancelResult Clone() {
      return new WithdrawMarginCancelResult(this);
    }

    /// <summary>Field number for the "WS_ADVISORY" field.</summary>
    public const int WSADVISORYFieldNumber = 1;
    private string wSADVISORY_ = "";
    /// <summary>
    ///各筆回復訊息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSADVISORY {
      get { return wSADVISORY_; }
      set {
        wSADVISORY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_SEQNO" field.</summary>
    public const int WSSEQNOFieldNumber = 2;
    private string wSSEQNO_ = "";
    /// <summary>
    ///單據流水號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSSEQNO {
      get { return wSSEQNO_; }
      set {
        wSSEQNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_TX_DATE" field.</summary>
    public const int WSTXDATEFieldNumber = 3;
    private string wSTXDATE_ = "";
    /// <summary>
    ///異動日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSTXDATE {
      get { return wSTXDATE_; }
      set {
        wSTXDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_TX_TIME" field.</summary>
    public const int WSTXTIMEFieldNumber = 4;
    private string wSTXTIME_ = "";
    /// <summary>
    ///申請時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSTXTIME {
      get { return wSTXTIME_; }
      set {
        wSTXTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_INVESTOR_ACNO" field.</summary>
    public const int WSINVESTORACNOFieldNumber = 5;
    private string wSINVESTORACNO_ = "";
    /// <summary>
    ///投資人帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSINVESTORACNO {
      get { return wSINVESTORACNO_; }
      set {
        wSINVESTORACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_NT_AMT" field.</summary>
    public const int WSNTAMTFieldNumber = 6;
    private double wSNTAMT_;
    /// <summary>
    ///臺幣金額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WSNTAMT {
      get { return wSNTAMT_; }
      set {
        wSNTAMT_ = value;
      }
    }

    /// <summary>Field number for the "Status_Flag" field.</summary>
    public const int StatusFlagFieldNumber = 7;
    private global::Jsunfutures.Messages.CancelFlag statusFlag_ = 0;
    /// <summary>
    ///狀態標記
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.CancelFlag StatusFlag {
      get { return statusFlag_; }
      set {
        statusFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WithdrawMarginCancelResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WithdrawMarginCancelResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WSADVISORY != other.WSADVISORY) return false;
      if (WSSEQNO != other.WSSEQNO) return false;
      if (WSTXDATE != other.WSTXDATE) return false;
      if (WSTXTIME != other.WSTXTIME) return false;
      if (WSINVESTORACNO != other.WSINVESTORACNO) return false;
      if (WSNTAMT != other.WSNTAMT) return false;
      if (StatusFlag != other.StatusFlag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WSADVISORY.Length != 0) hash ^= WSADVISORY.GetHashCode();
      if (WSSEQNO.Length != 0) hash ^= WSSEQNO.GetHashCode();
      if (WSTXDATE.Length != 0) hash ^= WSTXDATE.GetHashCode();
      if (WSTXTIME.Length != 0) hash ^= WSTXTIME.GetHashCode();
      if (WSINVESTORACNO.Length != 0) hash ^= WSINVESTORACNO.GetHashCode();
      if (WSNTAMT != 0D) hash ^= WSNTAMT.GetHashCode();
      if (StatusFlag != 0) hash ^= StatusFlag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WSADVISORY.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WSADVISORY);
      }
      if (WSSEQNO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WSSEQNO);
      }
      if (WSTXDATE.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WSTXDATE);
      }
      if (WSTXTIME.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WSTXTIME);
      }
      if (WSINVESTORACNO.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WSINVESTORACNO);
      }
      if (WSNTAMT != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(WSNTAMT);
      }
      if (StatusFlag != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) StatusFlag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WSADVISORY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSADVISORY);
      }
      if (WSSEQNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSSEQNO);
      }
      if (WSTXDATE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSTXDATE);
      }
      if (WSTXTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSTXTIME);
      }
      if (WSINVESTORACNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSINVESTORACNO);
      }
      if (WSNTAMT != 0D) {
        size += 1 + 8;
      }
      if (StatusFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatusFlag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WithdrawMarginCancelResult other) {
      if (other == null) {
        return;
      }
      if (other.WSADVISORY.Length != 0) {
        WSADVISORY = other.WSADVISORY;
      }
      if (other.WSSEQNO.Length != 0) {
        WSSEQNO = other.WSSEQNO;
      }
      if (other.WSTXDATE.Length != 0) {
        WSTXDATE = other.WSTXDATE;
      }
      if (other.WSTXTIME.Length != 0) {
        WSTXTIME = other.WSTXTIME;
      }
      if (other.WSINVESTORACNO.Length != 0) {
        WSINVESTORACNO = other.WSINVESTORACNO;
      }
      if (other.WSNTAMT != 0D) {
        WSNTAMT = other.WSNTAMT;
      }
      if (other.StatusFlag != 0) {
        StatusFlag = other.StatusFlag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WSADVISORY = input.ReadString();
            break;
          }
          case 18: {
            WSSEQNO = input.ReadString();
            break;
          }
          case 26: {
            WSTXDATE = input.ReadString();
            break;
          }
          case 34: {
            WSTXTIME = input.ReadString();
            break;
          }
          case 42: {
            WSINVESTORACNO = input.ReadString();
            break;
          }
          case 49: {
            WSNTAMT = input.ReadDouble();
            break;
          }
          case 56: {
            statusFlag_ = (global::Jsunfutures.Messages.CancelFlag) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class futseqno : pb::IMessage<futseqno> {
    private static readonly pb::MessageParser<futseqno> _parser = new pb::MessageParser<futseqno>(() => new futseqno());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<futseqno> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public futseqno() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public futseqno(futseqno other) : this() {
      sEQNO_ = other.sEQNO_;
      aPPLYDATE_ = other.aPPLYDATE_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public futseqno Clone() {
      return new futseqno(this);
    }

    /// <summary>Field number for the "SEQNO" field.</summary>
    public const int SEQNOFieldNumber = 1;
    private string sEQNO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SEQNO {
      get { return sEQNO_; }
      set {
        sEQNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "APPLYDATE" field.</summary>
    public const int APPLYDATEFieldNumber = 2;
    private string aPPLYDATE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string APPLYDATE {
      get { return aPPLYDATE_; }
      set {
        aPPLYDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as futseqno);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(futseqno other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SEQNO != other.SEQNO) return false;
      if (APPLYDATE != other.APPLYDATE) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SEQNO.Length != 0) hash ^= SEQNO.GetHashCode();
      if (APPLYDATE.Length != 0) hash ^= APPLYDATE.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SEQNO.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SEQNO);
      }
      if (APPLYDATE.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(APPLYDATE);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SEQNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SEQNO);
      }
      if (APPLYDATE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(APPLYDATE);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(futseqno other) {
      if (other == null) {
        return;
      }
      if (other.SEQNO.Length != 0) {
        SEQNO = other.SEQNO;
      }
      if (other.APPLYDATE.Length != 0) {
        APPLYDATE = other.APPLYDATE;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SEQNO = input.ReadString();
            break;
          }
          case 18: {
            APPLYDATE = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///保證金互轉
  /// </summary>
  public sealed partial class TransferMarginResult : pb::IMessage<TransferMarginResult> {
    private static readonly pb::MessageParser<TransferMarginResult> _parser = new pb::MessageParser<TransferMarginResult>(() => new TransferMarginResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferMarginResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferMarginResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferMarginResult(TransferMarginResult other) : this() {
      wKNINOUTFLAG_ = other.wKNINOUTFLAG_;
      wKNBANKID_ = other.wKNBANKID_;
      wKNBANKNO_ = other.wKNBANKNO_;
      wKNINOUTINVESTORACNO_ = other.wKNINOUTINVESTORACNO_;
      wKNORIAMT_ = other.wKNORIAMT_;
      wKNCURRENCY_ = other.wKNCURRENCY_;
      wKNAPPLYDATE_ = other.wKNAPPLYDATE_;
      wKNAPPLYTIME_ = other.wKNAPPLYTIME_;
      wKNCANCELFLAG_ = other.wKNCANCELFLAG_;
      wKNDAWAPPLYSEQNO_ = other.wKNDAWAPPLYSEQNO_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferMarginResult Clone() {
      return new TransferMarginResult(this);
    }

    /// <summary>Field number for the "WK_N_IN_OUT_FLAG" field.</summary>
    public const int WKNINOUTFLAGFieldNumber = 1;
    private global::Jsunfutures.Messages.TransferFlag wKNINOUTFLAG_ = 0;
    /// <summary>
    ///內外互轉
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.TransferFlag WKNINOUTFLAG {
      get { return wKNINOUTFLAG_; }
      set {
        wKNINOUTFLAG_ = value;
      }
    }

    /// <summary>Field number for the "WK_N_BANK_ID" field.</summary>
    public const int WKNBANKIDFieldNumber = 2;
    private string wKNBANKID_ = "";
    /// <summary>
    ///銀行代碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WKNBANKID {
      get { return wKNBANKID_; }
      set {
        wKNBANKID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WK_N_BANK_NO" field.</summary>
    public const int WKNBANKNOFieldNumber = 3;
    private string wKNBANKNO_ = "";
    /// <summary>
    ///銀行帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WKNBANKNO {
      get { return wKNBANKNO_; }
      set {
        wKNBANKNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WK_N_IN_OUT_INVESTOR_ACNO" field.</summary>
    public const int WKNINOUTINVESTORACNOFieldNumber = 4;
    private string wKNINOUTINVESTORACNO_ = "";
    /// <summary>
    ///撥轉帳號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WKNINOUTINVESTORACNO {
      get { return wKNINOUTINVESTORACNO_; }
      set {
        wKNINOUTINVESTORACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WK_N_ORI_AMT" field.</summary>
    public const int WKNORIAMTFieldNumber = 5;
    private double wKNORIAMT_;
    /// <summary>
    ///交易金額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WKNORIAMT {
      get { return wKNORIAMT_; }
      set {
        wKNORIAMT_ = value;
      }
    }

    /// <summary>Field number for the "WK_N_CURRENCY" field.</summary>
    public const int WKNCURRENCYFieldNumber = 6;
    private global::Jsunfutures.Messages.Currency wKNCURRENCY_ = 0;
    /// <summary>
    ///出金幣別
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.Currency WKNCURRENCY {
      get { return wKNCURRENCY_; }
      set {
        wKNCURRENCY_ = value;
      }
    }

    /// <summary>Field number for the "WK_N_APPLY_DATE" field.</summary>
    public const int WKNAPPLYDATEFieldNumber = 7;
    private string wKNAPPLYDATE_ = "";
    /// <summary>
    ///申請日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WKNAPPLYDATE {
      get { return wKNAPPLYDATE_; }
      set {
        wKNAPPLYDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WK_N_APPLY_TIME" field.</summary>
    public const int WKNAPPLYTIMEFieldNumber = 8;
    private string wKNAPPLYTIME_ = "";
    /// <summary>
    ///申請時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WKNAPPLYTIME {
      get { return wKNAPPLYTIME_; }
      set {
        wKNAPPLYTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WK_N_CANCEL_FLAG" field.</summary>
    public const int WKNCANCELFLAGFieldNumber = 9;
    private global::Jsunfutures.Messages.CancelFlag wKNCANCELFLAG_ = 0;
    /// <summary>
    ///申請狀態
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.CancelFlag WKNCANCELFLAG {
      get { return wKNCANCELFLAG_; }
      set {
        wKNCANCELFLAG_ = value;
      }
    }

    /// <summary>Field number for the "WK_N_DAW_APPLY_SEQNO" field.</summary>
    public const int WKNDAWAPPLYSEQNOFieldNumber = 10;
    private string wKNDAWAPPLYSEQNO_ = "";
    /// <summary>
    ///客戶網頁申請序號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WKNDAWAPPLYSEQNO {
      get { return wKNDAWAPPLYSEQNO_; }
      set {
        wKNDAWAPPLYSEQNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferMarginResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferMarginResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WKNINOUTFLAG != other.WKNINOUTFLAG) return false;
      if (WKNBANKID != other.WKNBANKID) return false;
      if (WKNBANKNO != other.WKNBANKNO) return false;
      if (WKNINOUTINVESTORACNO != other.WKNINOUTINVESTORACNO) return false;
      if (WKNORIAMT != other.WKNORIAMT) return false;
      if (WKNCURRENCY != other.WKNCURRENCY) return false;
      if (WKNAPPLYDATE != other.WKNAPPLYDATE) return false;
      if (WKNAPPLYTIME != other.WKNAPPLYTIME) return false;
      if (WKNCANCELFLAG != other.WKNCANCELFLAG) return false;
      if (WKNDAWAPPLYSEQNO != other.WKNDAWAPPLYSEQNO) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WKNINOUTFLAG != 0) hash ^= WKNINOUTFLAG.GetHashCode();
      if (WKNBANKID.Length != 0) hash ^= WKNBANKID.GetHashCode();
      if (WKNBANKNO.Length != 0) hash ^= WKNBANKNO.GetHashCode();
      if (WKNINOUTINVESTORACNO.Length != 0) hash ^= WKNINOUTINVESTORACNO.GetHashCode();
      if (WKNORIAMT != 0D) hash ^= WKNORIAMT.GetHashCode();
      if (WKNCURRENCY != 0) hash ^= WKNCURRENCY.GetHashCode();
      if (WKNAPPLYDATE.Length != 0) hash ^= WKNAPPLYDATE.GetHashCode();
      if (WKNAPPLYTIME.Length != 0) hash ^= WKNAPPLYTIME.GetHashCode();
      if (WKNCANCELFLAG != 0) hash ^= WKNCANCELFLAG.GetHashCode();
      if (WKNDAWAPPLYSEQNO.Length != 0) hash ^= WKNDAWAPPLYSEQNO.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WKNINOUTFLAG != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) WKNINOUTFLAG);
      }
      if (WKNBANKID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WKNBANKID);
      }
      if (WKNBANKNO.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WKNBANKNO);
      }
      if (WKNINOUTINVESTORACNO.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WKNINOUTINVESTORACNO);
      }
      if (WKNORIAMT != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(WKNORIAMT);
      }
      if (WKNCURRENCY != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) WKNCURRENCY);
      }
      if (WKNAPPLYDATE.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WKNAPPLYDATE);
      }
      if (WKNAPPLYTIME.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WKNAPPLYTIME);
      }
      if (WKNCANCELFLAG != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) WKNCANCELFLAG);
      }
      if (WKNDAWAPPLYSEQNO.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WKNDAWAPPLYSEQNO);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WKNINOUTFLAG != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WKNINOUTFLAG);
      }
      if (WKNBANKID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WKNBANKID);
      }
      if (WKNBANKNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WKNBANKNO);
      }
      if (WKNINOUTINVESTORACNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WKNINOUTINVESTORACNO);
      }
      if (WKNORIAMT != 0D) {
        size += 1 + 8;
      }
      if (WKNCURRENCY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WKNCURRENCY);
      }
      if (WKNAPPLYDATE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WKNAPPLYDATE);
      }
      if (WKNAPPLYTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WKNAPPLYTIME);
      }
      if (WKNCANCELFLAG != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WKNCANCELFLAG);
      }
      if (WKNDAWAPPLYSEQNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WKNDAWAPPLYSEQNO);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferMarginResult other) {
      if (other == null) {
        return;
      }
      if (other.WKNINOUTFLAG != 0) {
        WKNINOUTFLAG = other.WKNINOUTFLAG;
      }
      if (other.WKNBANKID.Length != 0) {
        WKNBANKID = other.WKNBANKID;
      }
      if (other.WKNBANKNO.Length != 0) {
        WKNBANKNO = other.WKNBANKNO;
      }
      if (other.WKNINOUTINVESTORACNO.Length != 0) {
        WKNINOUTINVESTORACNO = other.WKNINOUTINVESTORACNO;
      }
      if (other.WKNORIAMT != 0D) {
        WKNORIAMT = other.WKNORIAMT;
      }
      if (other.WKNCURRENCY != 0) {
        WKNCURRENCY = other.WKNCURRENCY;
      }
      if (other.WKNAPPLYDATE.Length != 0) {
        WKNAPPLYDATE = other.WKNAPPLYDATE;
      }
      if (other.WKNAPPLYTIME.Length != 0) {
        WKNAPPLYTIME = other.WKNAPPLYTIME;
      }
      if (other.WKNCANCELFLAG != 0) {
        WKNCANCELFLAG = other.WKNCANCELFLAG;
      }
      if (other.WKNDAWAPPLYSEQNO.Length != 0) {
        WKNDAWAPPLYSEQNO = other.WKNDAWAPPLYSEQNO;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            wKNINOUTFLAG_ = (global::Jsunfutures.Messages.TransferFlag) input.ReadEnum();
            break;
          }
          case 18: {
            WKNBANKID = input.ReadString();
            break;
          }
          case 26: {
            WKNBANKNO = input.ReadString();
            break;
          }
          case 34: {
            WKNINOUTINVESTORACNO = input.ReadString();
            break;
          }
          case 41: {
            WKNORIAMT = input.ReadDouble();
            break;
          }
          case 48: {
            wKNCURRENCY_ = (global::Jsunfutures.Messages.Currency) input.ReadEnum();
            break;
          }
          case 58: {
            WKNAPPLYDATE = input.ReadString();
            break;
          }
          case 66: {
            WKNAPPLYTIME = input.ReadString();
            break;
          }
          case 72: {
            wKNCANCELFLAG_ = (global::Jsunfutures.Messages.CancelFlag) input.ReadEnum();
            break;
          }
          case 82: {
            WKNDAWAPPLYSEQNO = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///For FUT7047
  /// </summary>
  public sealed partial class que_detail : pb::IMessage<que_detail> {
    private static readonly pb::MessageParser<que_detail> _parser = new pb::MessageParser<que_detail>(() => new que_detail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<que_detail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public que_detail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public que_detail(que_detail other) : this() {
      wSBROKERID_ = other.wSBROKERID_;
      wSBROKERBANKID_ = other.wSBROKERBANKID_;
      wSBROKERACCNO_ = other.wSBROKERACCNO_;
      wSINVESTORBANKID_ = other.wSINVESTORBANKID_;
      wSINVESTORBANKACCNO_ = other.wSINVESTORBANKACCNO_;
      wSCANCELFLAG_ = other.wSCANCELFLAG_;
      wSCURRENCY_ = other.wSCURRENCY_;
      wSMEMO_ = other.wSMEMO_;
      wSIBNO_ = other.wSIBNO_;
      wSINVESTORNAME_ = other.wSINVESTORNAME_;
      wSTXMETHOD_ = other.wSTXMETHOD_;
      wSBANKSEQNO_ = other.wSBANKSEQNO_;
      wSINVESTORACNO_ = other.wSINVESTORACNO_;
      wSNTAMT_ = other.wSNTAMT_;
      wSTXDATE_ = other.wSTXDATE_;
      wSSEQNO_ = other.wSSEQNO_;
      wSTRANRATE_ = other.wSTRANRATE_;
      wSORIGINALAMT_ = other.wSORIGINALAMT_;
      wSTXTIME_ = other.wSTXTIME_;
      wSMSGSEQNO_ = other.wSMSGSEQNO_;
      wSBANKACCDATE_ = other.wSBANKACCDATE_;
      wSTEL_ = other.wSTEL_;
      wSTRANSFERMARK_ = other.wSTRANSFERMARK_;
      wSSOURCEMARK_ = other.wSSOURCEMARK_;
      wS707ACCOUNTNAME_ = other.wS707ACCOUNTNAME_;
      wS707INVBANKNAME_ = other.wS707INVBANKNAME_;
      wS707BATCHDATE_ = other.wS707BATCHDATE_;
      wS707BATCHTIME_ = other.wS707BATCHTIME_;
      wS707APPLYTIME8_ = other.wS707APPLYTIME8_;
      wSTXFLAG_ = other.wSTXFLAG_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public que_detail Clone() {
      return new que_detail(this);
    }

    /// <summary>Field number for the "WS_BROKER_ID" field.</summary>
    public const int WSBROKERIDFieldNumber = 1;
    private string wSBROKERID_ = "";
    /// <summary>
    ///704
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSBROKERID {
      get { return wSBROKERID_; }
      set {
        wSBROKERID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_BROKER_BANK_ID" field.</summary>
    public const int WSBROKERBANKIDFieldNumber = 2;
    private string wSBROKERBANKID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSBROKERBANKID {
      get { return wSBROKERBANKID_; }
      set {
        wSBROKERBANKID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_BROKER_ACCNO" field.</summary>
    public const int WSBROKERACCNOFieldNumber = 3;
    private string wSBROKERACCNO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSBROKERACCNO {
      get { return wSBROKERACCNO_; }
      set {
        wSBROKERACCNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_INVESTOR_BANK_ID" field.</summary>
    public const int WSINVESTORBANKIDFieldNumber = 4;
    private string wSINVESTORBANKID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSINVESTORBANKID {
      get { return wSINVESTORBANKID_; }
      set {
        wSINVESTORBANKID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_INVESTOR_BANK_ACCNO" field.</summary>
    public const int WSINVESTORBANKACCNOFieldNumber = 5;
    private string wSINVESTORBANKACCNO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSINVESTORBANKACCNO {
      get { return wSINVESTORBANKACCNO_; }
      set {
        wSINVESTORBANKACCNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_CANCEL_FLAG" field.</summary>
    public const int WSCANCELFLAGFieldNumber = 6;
    private string wSCANCELFLAG_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSCANCELFLAG {
      get { return wSCANCELFLAG_; }
      set {
        wSCANCELFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_CURRENCY" field.</summary>
    public const int WSCURRENCYFieldNumber = 7;
    private string wSCURRENCY_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSCURRENCY {
      get { return wSCURRENCY_; }
      set {
        wSCURRENCY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_MEMO" field.</summary>
    public const int WSMEMOFieldNumber = 8;
    private string wSMEMO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSMEMO {
      get { return wSMEMO_; }
      set {
        wSMEMO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_IB_NO" field.</summary>
    public const int WSIBNOFieldNumber = 9;
    private string wSIBNO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSIBNO {
      get { return wSIBNO_; }
      set {
        wSIBNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_INVESTOR_NAME" field.</summary>
    public const int WSINVESTORNAMEFieldNumber = 10;
    private string wSINVESTORNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSINVESTORNAME {
      get { return wSINVESTORNAME_; }
      set {
        wSINVESTORNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_TX_METHOD" field.</summary>
    public const int WSTXMETHODFieldNumber = 11;
    private string wSTXMETHOD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSTXMETHOD {
      get { return wSTXMETHOD_; }
      set {
        wSTXMETHOD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_BANK_SEQNO" field.</summary>
    public const int WSBANKSEQNOFieldNumber = 12;
    private string wSBANKSEQNO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSBANKSEQNO {
      get { return wSBANKSEQNO_; }
      set {
        wSBANKSEQNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_INVESTOR_ACNO" field.</summary>
    public const int WSINVESTORACNOFieldNumber = 13;
    private string wSINVESTORACNO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSINVESTORACNO {
      get { return wSINVESTORACNO_; }
      set {
        wSINVESTORACNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_NT_AMT" field.</summary>
    public const int WSNTAMTFieldNumber = 14;
    private string wSNTAMT_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSNTAMT {
      get { return wSNTAMT_; }
      set {
        wSNTAMT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_TX_DATE" field.</summary>
    public const int WSTXDATEFieldNumber = 15;
    private string wSTXDATE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSTXDATE {
      get { return wSTXDATE_; }
      set {
        wSTXDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_SEQNO" field.</summary>
    public const int WSSEQNOFieldNumber = 16;
    private string wSSEQNO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSSEQNO {
      get { return wSSEQNO_; }
      set {
        wSSEQNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_TRAN_RATE" field.</summary>
    public const int WSTRANRATEFieldNumber = 17;
    private string wSTRANRATE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSTRANRATE {
      get { return wSTRANRATE_; }
      set {
        wSTRANRATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_ORIGINAL_AMT" field.</summary>
    public const int WSORIGINALAMTFieldNumber = 18;
    private string wSORIGINALAMT_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSORIGINALAMT {
      get { return wSORIGINALAMT_; }
      set {
        wSORIGINALAMT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_TX_TIME" field.</summary>
    public const int WSTXTIMEFieldNumber = 19;
    private string wSTXTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSTXTIME {
      get { return wSTXTIME_; }
      set {
        wSTXTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_MSG_SEQNO" field.</summary>
    public const int WSMSGSEQNOFieldNumber = 20;
    private string wSMSGSEQNO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSMSGSEQNO {
      get { return wSMSGSEQNO_; }
      set {
        wSMSGSEQNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_BANK_ACC_DATE" field.</summary>
    public const int WSBANKACCDATEFieldNumber = 21;
    private string wSBANKACCDATE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSBANKACCDATE {
      get { return wSBANKACCDATE_; }
      set {
        wSBANKACCDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_TEL" field.</summary>
    public const int WSTELFieldNumber = 22;
    private string wSTEL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSTEL {
      get { return wSTEL_; }
      set {
        wSTEL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_TRANSFER_MARK" field.</summary>
    public const int WSTRANSFERMARKFieldNumber = 23;
    private string wSTRANSFERMARK_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSTRANSFERMARK {
      get { return wSTRANSFERMARK_; }
      set {
        wSTRANSFERMARK_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_SOURCE_MARK" field.</summary>
    public const int WSSOURCEMARKFieldNumber = 24;
    private string wSSOURCEMARK_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSSOURCEMARK {
      get { return wSSOURCEMARK_; }
      set {
        wSSOURCEMARK_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_707_ACCOUNT_NAME" field.</summary>
    public const int WS707ACCOUNTNAMEFieldNumber = 25;
    private string wS707ACCOUNTNAME_ = "";
    /// <summary>
    ///707
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WS707ACCOUNTNAME {
      get { return wS707ACCOUNTNAME_; }
      set {
        wS707ACCOUNTNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_707_INV_BANK_NAME" field.</summary>
    public const int WS707INVBANKNAMEFieldNumber = 26;
    private string wS707INVBANKNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WS707INVBANKNAME {
      get { return wS707INVBANKNAME_; }
      set {
        wS707INVBANKNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_707_BATCH_DATE" field.</summary>
    public const int WS707BATCHDATEFieldNumber = 27;
    private string wS707BATCHDATE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WS707BATCHDATE {
      get { return wS707BATCHDATE_; }
      set {
        wS707BATCHDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_707_BATCH_TIME" field.</summary>
    public const int WS707BATCHTIMEFieldNumber = 28;
    private string wS707BATCHTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WS707BATCHTIME {
      get { return wS707BATCHTIME_; }
      set {
        wS707BATCHTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_707_APPLY_TIME_8" field.</summary>
    public const int WS707APPLYTIME8FieldNumber = 29;
    private string wS707APPLYTIME8_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WS707APPLYTIME8 {
      get { return wS707APPLYTIME8_; }
      set {
        wS707APPLYTIME8_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WS_TX_FLAG" field.</summary>
    public const int WSTXFLAGFieldNumber = 30;
    private string wSTXFLAG_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WSTXFLAG {
      get { return wSTXFLAG_; }
      set {
        wSTXFLAG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as que_detail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(que_detail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WSBROKERID != other.WSBROKERID) return false;
      if (WSBROKERBANKID != other.WSBROKERBANKID) return false;
      if (WSBROKERACCNO != other.WSBROKERACCNO) return false;
      if (WSINVESTORBANKID != other.WSINVESTORBANKID) return false;
      if (WSINVESTORBANKACCNO != other.WSINVESTORBANKACCNO) return false;
      if (WSCANCELFLAG != other.WSCANCELFLAG) return false;
      if (WSCURRENCY != other.WSCURRENCY) return false;
      if (WSMEMO != other.WSMEMO) return false;
      if (WSIBNO != other.WSIBNO) return false;
      if (WSINVESTORNAME != other.WSINVESTORNAME) return false;
      if (WSTXMETHOD != other.WSTXMETHOD) return false;
      if (WSBANKSEQNO != other.WSBANKSEQNO) return false;
      if (WSINVESTORACNO != other.WSINVESTORACNO) return false;
      if (WSNTAMT != other.WSNTAMT) return false;
      if (WSTXDATE != other.WSTXDATE) return false;
      if (WSSEQNO != other.WSSEQNO) return false;
      if (WSTRANRATE != other.WSTRANRATE) return false;
      if (WSORIGINALAMT != other.WSORIGINALAMT) return false;
      if (WSTXTIME != other.WSTXTIME) return false;
      if (WSMSGSEQNO != other.WSMSGSEQNO) return false;
      if (WSBANKACCDATE != other.WSBANKACCDATE) return false;
      if (WSTEL != other.WSTEL) return false;
      if (WSTRANSFERMARK != other.WSTRANSFERMARK) return false;
      if (WSSOURCEMARK != other.WSSOURCEMARK) return false;
      if (WS707ACCOUNTNAME != other.WS707ACCOUNTNAME) return false;
      if (WS707INVBANKNAME != other.WS707INVBANKNAME) return false;
      if (WS707BATCHDATE != other.WS707BATCHDATE) return false;
      if (WS707BATCHTIME != other.WS707BATCHTIME) return false;
      if (WS707APPLYTIME8 != other.WS707APPLYTIME8) return false;
      if (WSTXFLAG != other.WSTXFLAG) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WSBROKERID.Length != 0) hash ^= WSBROKERID.GetHashCode();
      if (WSBROKERBANKID.Length != 0) hash ^= WSBROKERBANKID.GetHashCode();
      if (WSBROKERACCNO.Length != 0) hash ^= WSBROKERACCNO.GetHashCode();
      if (WSINVESTORBANKID.Length != 0) hash ^= WSINVESTORBANKID.GetHashCode();
      if (WSINVESTORBANKACCNO.Length != 0) hash ^= WSINVESTORBANKACCNO.GetHashCode();
      if (WSCANCELFLAG.Length != 0) hash ^= WSCANCELFLAG.GetHashCode();
      if (WSCURRENCY.Length != 0) hash ^= WSCURRENCY.GetHashCode();
      if (WSMEMO.Length != 0) hash ^= WSMEMO.GetHashCode();
      if (WSIBNO.Length != 0) hash ^= WSIBNO.GetHashCode();
      if (WSINVESTORNAME.Length != 0) hash ^= WSINVESTORNAME.GetHashCode();
      if (WSTXMETHOD.Length != 0) hash ^= WSTXMETHOD.GetHashCode();
      if (WSBANKSEQNO.Length != 0) hash ^= WSBANKSEQNO.GetHashCode();
      if (WSINVESTORACNO.Length != 0) hash ^= WSINVESTORACNO.GetHashCode();
      if (WSNTAMT.Length != 0) hash ^= WSNTAMT.GetHashCode();
      if (WSTXDATE.Length != 0) hash ^= WSTXDATE.GetHashCode();
      if (WSSEQNO.Length != 0) hash ^= WSSEQNO.GetHashCode();
      if (WSTRANRATE.Length != 0) hash ^= WSTRANRATE.GetHashCode();
      if (WSORIGINALAMT.Length != 0) hash ^= WSORIGINALAMT.GetHashCode();
      if (WSTXTIME.Length != 0) hash ^= WSTXTIME.GetHashCode();
      if (WSMSGSEQNO.Length != 0) hash ^= WSMSGSEQNO.GetHashCode();
      if (WSBANKACCDATE.Length != 0) hash ^= WSBANKACCDATE.GetHashCode();
      if (WSTEL.Length != 0) hash ^= WSTEL.GetHashCode();
      if (WSTRANSFERMARK.Length != 0) hash ^= WSTRANSFERMARK.GetHashCode();
      if (WSSOURCEMARK.Length != 0) hash ^= WSSOURCEMARK.GetHashCode();
      if (WS707ACCOUNTNAME.Length != 0) hash ^= WS707ACCOUNTNAME.GetHashCode();
      if (WS707INVBANKNAME.Length != 0) hash ^= WS707INVBANKNAME.GetHashCode();
      if (WS707BATCHDATE.Length != 0) hash ^= WS707BATCHDATE.GetHashCode();
      if (WS707BATCHTIME.Length != 0) hash ^= WS707BATCHTIME.GetHashCode();
      if (WS707APPLYTIME8.Length != 0) hash ^= WS707APPLYTIME8.GetHashCode();
      if (WSTXFLAG.Length != 0) hash ^= WSTXFLAG.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WSBROKERID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WSBROKERID);
      }
      if (WSBROKERBANKID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WSBROKERBANKID);
      }
      if (WSBROKERACCNO.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WSBROKERACCNO);
      }
      if (WSINVESTORBANKID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WSINVESTORBANKID);
      }
      if (WSINVESTORBANKACCNO.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WSINVESTORBANKACCNO);
      }
      if (WSCANCELFLAG.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WSCANCELFLAG);
      }
      if (WSCURRENCY.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WSCURRENCY);
      }
      if (WSMEMO.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WSMEMO);
      }
      if (WSIBNO.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WSIBNO);
      }
      if (WSINVESTORNAME.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WSINVESTORNAME);
      }
      if (WSTXMETHOD.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(WSTXMETHOD);
      }
      if (WSBANKSEQNO.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WSBANKSEQNO);
      }
      if (WSINVESTORACNO.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WSINVESTORACNO);
      }
      if (WSNTAMT.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(WSNTAMT);
      }
      if (WSTXDATE.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(WSTXDATE);
      }
      if (WSSEQNO.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WSSEQNO);
      }
      if (WSTRANRATE.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(WSTRANRATE);
      }
      if (WSORIGINALAMT.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(WSORIGINALAMT);
      }
      if (WSTXTIME.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(WSTXTIME);
      }
      if (WSMSGSEQNO.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WSMSGSEQNO);
      }
      if (WSBANKACCDATE.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(WSBANKACCDATE);
      }
      if (WSTEL.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(WSTEL);
      }
      if (WSTRANSFERMARK.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(WSTRANSFERMARK);
      }
      if (WSSOURCEMARK.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(WSSOURCEMARK);
      }
      if (WS707ACCOUNTNAME.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(WS707ACCOUNTNAME);
      }
      if (WS707INVBANKNAME.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(WS707INVBANKNAME);
      }
      if (WS707BATCHDATE.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(WS707BATCHDATE);
      }
      if (WS707BATCHTIME.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(WS707BATCHTIME);
      }
      if (WS707APPLYTIME8.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(WS707APPLYTIME8);
      }
      if (WSTXFLAG.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(WSTXFLAG);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WSBROKERID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSBROKERID);
      }
      if (WSBROKERBANKID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSBROKERBANKID);
      }
      if (WSBROKERACCNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSBROKERACCNO);
      }
      if (WSINVESTORBANKID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSINVESTORBANKID);
      }
      if (WSINVESTORBANKACCNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSINVESTORBANKACCNO);
      }
      if (WSCANCELFLAG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSCANCELFLAG);
      }
      if (WSCURRENCY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSCURRENCY);
      }
      if (WSMEMO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSMEMO);
      }
      if (WSIBNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSIBNO);
      }
      if (WSINVESTORNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSINVESTORNAME);
      }
      if (WSTXMETHOD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSTXMETHOD);
      }
      if (WSBANKSEQNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSBANKSEQNO);
      }
      if (WSINVESTORACNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSINVESTORACNO);
      }
      if (WSNTAMT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSNTAMT);
      }
      if (WSTXDATE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WSTXDATE);
      }
      if (WSSEQNO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSSEQNO);
      }
      if (WSTRANRATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSTRANRATE);
      }
      if (WSORIGINALAMT.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSORIGINALAMT);
      }
      if (WSTXTIME.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSTXTIME);
      }
      if (WSMSGSEQNO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSMSGSEQNO);
      }
      if (WSBANKACCDATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSBANKACCDATE);
      }
      if (WSTEL.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSTEL);
      }
      if (WSTRANSFERMARK.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSTRANSFERMARK);
      }
      if (WSSOURCEMARK.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSSOURCEMARK);
      }
      if (WS707ACCOUNTNAME.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WS707ACCOUNTNAME);
      }
      if (WS707INVBANKNAME.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WS707INVBANKNAME);
      }
      if (WS707BATCHDATE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WS707BATCHDATE);
      }
      if (WS707BATCHTIME.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WS707BATCHTIME);
      }
      if (WS707APPLYTIME8.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WS707APPLYTIME8);
      }
      if (WSTXFLAG.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WSTXFLAG);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(que_detail other) {
      if (other == null) {
        return;
      }
      if (other.WSBROKERID.Length != 0) {
        WSBROKERID = other.WSBROKERID;
      }
      if (other.WSBROKERBANKID.Length != 0) {
        WSBROKERBANKID = other.WSBROKERBANKID;
      }
      if (other.WSBROKERACCNO.Length != 0) {
        WSBROKERACCNO = other.WSBROKERACCNO;
      }
      if (other.WSINVESTORBANKID.Length != 0) {
        WSINVESTORBANKID = other.WSINVESTORBANKID;
      }
      if (other.WSINVESTORBANKACCNO.Length != 0) {
        WSINVESTORBANKACCNO = other.WSINVESTORBANKACCNO;
      }
      if (other.WSCANCELFLAG.Length != 0) {
        WSCANCELFLAG = other.WSCANCELFLAG;
      }
      if (other.WSCURRENCY.Length != 0) {
        WSCURRENCY = other.WSCURRENCY;
      }
      if (other.WSMEMO.Length != 0) {
        WSMEMO = other.WSMEMO;
      }
      if (other.WSIBNO.Length != 0) {
        WSIBNO = other.WSIBNO;
      }
      if (other.WSINVESTORNAME.Length != 0) {
        WSINVESTORNAME = other.WSINVESTORNAME;
      }
      if (other.WSTXMETHOD.Length != 0) {
        WSTXMETHOD = other.WSTXMETHOD;
      }
      if (other.WSBANKSEQNO.Length != 0) {
        WSBANKSEQNO = other.WSBANKSEQNO;
      }
      if (other.WSINVESTORACNO.Length != 0) {
        WSINVESTORACNO = other.WSINVESTORACNO;
      }
      if (other.WSNTAMT.Length != 0) {
        WSNTAMT = other.WSNTAMT;
      }
      if (other.WSTXDATE.Length != 0) {
        WSTXDATE = other.WSTXDATE;
      }
      if (other.WSSEQNO.Length != 0) {
        WSSEQNO = other.WSSEQNO;
      }
      if (other.WSTRANRATE.Length != 0) {
        WSTRANRATE = other.WSTRANRATE;
      }
      if (other.WSORIGINALAMT.Length != 0) {
        WSORIGINALAMT = other.WSORIGINALAMT;
      }
      if (other.WSTXTIME.Length != 0) {
        WSTXTIME = other.WSTXTIME;
      }
      if (other.WSMSGSEQNO.Length != 0) {
        WSMSGSEQNO = other.WSMSGSEQNO;
      }
      if (other.WSBANKACCDATE.Length != 0) {
        WSBANKACCDATE = other.WSBANKACCDATE;
      }
      if (other.WSTEL.Length != 0) {
        WSTEL = other.WSTEL;
      }
      if (other.WSTRANSFERMARK.Length != 0) {
        WSTRANSFERMARK = other.WSTRANSFERMARK;
      }
      if (other.WSSOURCEMARK.Length != 0) {
        WSSOURCEMARK = other.WSSOURCEMARK;
      }
      if (other.WS707ACCOUNTNAME.Length != 0) {
        WS707ACCOUNTNAME = other.WS707ACCOUNTNAME;
      }
      if (other.WS707INVBANKNAME.Length != 0) {
        WS707INVBANKNAME = other.WS707INVBANKNAME;
      }
      if (other.WS707BATCHDATE.Length != 0) {
        WS707BATCHDATE = other.WS707BATCHDATE;
      }
      if (other.WS707BATCHTIME.Length != 0) {
        WS707BATCHTIME = other.WS707BATCHTIME;
      }
      if (other.WS707APPLYTIME8.Length != 0) {
        WS707APPLYTIME8 = other.WS707APPLYTIME8;
      }
      if (other.WSTXFLAG.Length != 0) {
        WSTXFLAG = other.WSTXFLAG;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WSBROKERID = input.ReadString();
            break;
          }
          case 18: {
            WSBROKERBANKID = input.ReadString();
            break;
          }
          case 26: {
            WSBROKERACCNO = input.ReadString();
            break;
          }
          case 34: {
            WSINVESTORBANKID = input.ReadString();
            break;
          }
          case 42: {
            WSINVESTORBANKACCNO = input.ReadString();
            break;
          }
          case 50: {
            WSCANCELFLAG = input.ReadString();
            break;
          }
          case 58: {
            WSCURRENCY = input.ReadString();
            break;
          }
          case 66: {
            WSMEMO = input.ReadString();
            break;
          }
          case 74: {
            WSIBNO = input.ReadString();
            break;
          }
          case 82: {
            WSINVESTORNAME = input.ReadString();
            break;
          }
          case 90: {
            WSTXMETHOD = input.ReadString();
            break;
          }
          case 98: {
            WSBANKSEQNO = input.ReadString();
            break;
          }
          case 106: {
            WSINVESTORACNO = input.ReadString();
            break;
          }
          case 114: {
            WSNTAMT = input.ReadString();
            break;
          }
          case 122: {
            WSTXDATE = input.ReadString();
            break;
          }
          case 130: {
            WSSEQNO = input.ReadString();
            break;
          }
          case 138: {
            WSTRANRATE = input.ReadString();
            break;
          }
          case 146: {
            WSORIGINALAMT = input.ReadString();
            break;
          }
          case 154: {
            WSTXTIME = input.ReadString();
            break;
          }
          case 162: {
            WSMSGSEQNO = input.ReadString();
            break;
          }
          case 170: {
            WSBANKACCDATE = input.ReadString();
            break;
          }
          case 178: {
            WSTEL = input.ReadString();
            break;
          }
          case 186: {
            WSTRANSFERMARK = input.ReadString();
            break;
          }
          case 194: {
            WSSOURCEMARK = input.ReadString();
            break;
          }
          case 202: {
            WS707ACCOUNTNAME = input.ReadString();
            break;
          }
          case 210: {
            WS707INVBANKNAME = input.ReadString();
            break;
          }
          case 218: {
            WS707BATCHDATE = input.ReadString();
            break;
          }
          case 226: {
            WS707BATCHTIME = input.ReadString();
            break;
          }
          case 234: {
            WS707APPLYTIME8 = input.ReadString();
            break;
          }
          case 242: {
            WSTXFLAG = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WithdrawMarginCancelQuery : pb::IMessage<WithdrawMarginCancelQuery> {
    private static readonly pb::MessageParser<WithdrawMarginCancelQuery> _parser = new pb::MessageParser<WithdrawMarginCancelQuery>(() => new WithdrawMarginCancelQuery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WithdrawMarginCancelQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsunfutures.Messages.JSunFuturesMessageReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawMarginCancelQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawMarginCancelQuery(WithdrawMarginCancelQuery other) : this() {
      wKNDAWAPPLYSEQNO_ = other.wKNDAWAPPLYSEQNO_;
      wKNDAWAPPLYDATE_ = other.wKNDAWAPPLYDATE_;
      wKNCANCELFLAG_ = other.wKNCANCELFLAG_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawMarginCancelQuery Clone() {
      return new WithdrawMarginCancelQuery(this);
    }

    /// <summary>Field number for the "WK_N_DAW_APPLY_SEQNO" field.</summary>
    public const int WKNDAWAPPLYSEQNOFieldNumber = 1;
    private string wKNDAWAPPLYSEQNO_ = "";
    /// <summary>
    ///客戶網頁申請序號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WKNDAWAPPLYSEQNO {
      get { return wKNDAWAPPLYSEQNO_; }
      set {
        wKNDAWAPPLYSEQNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WK_N_DAW_APPLY_DATE" field.</summary>
    public const int WKNDAWAPPLYDATEFieldNumber = 2;
    private string wKNDAWAPPLYDATE_ = "";
    /// <summary>
    ///客戶網頁申請日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WKNDAWAPPLYDATE {
      get { return wKNDAWAPPLYDATE_; }
      set {
        wKNDAWAPPLYDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WK_N_CANCEL_FLAG" field.</summary>
    public const int WKNCANCELFLAGFieldNumber = 3;
    private global::Jsunfutures.Messages.CancelFlag wKNCANCELFLAG_ = 0;
    /// <summary>
    ///申請狀態
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jsunfutures.Messages.CancelFlag WKNCANCELFLAG {
      get { return wKNCANCELFLAG_; }
      set {
        wKNCANCELFLAG_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WithdrawMarginCancelQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WithdrawMarginCancelQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WKNDAWAPPLYSEQNO != other.WKNDAWAPPLYSEQNO) return false;
      if (WKNDAWAPPLYDATE != other.WKNDAWAPPLYDATE) return false;
      if (WKNCANCELFLAG != other.WKNCANCELFLAG) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WKNDAWAPPLYSEQNO.Length != 0) hash ^= WKNDAWAPPLYSEQNO.GetHashCode();
      if (WKNDAWAPPLYDATE.Length != 0) hash ^= WKNDAWAPPLYDATE.GetHashCode();
      if (WKNCANCELFLAG != 0) hash ^= WKNCANCELFLAG.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WKNDAWAPPLYSEQNO.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WKNDAWAPPLYSEQNO);
      }
      if (WKNDAWAPPLYDATE.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WKNDAWAPPLYDATE);
      }
      if (WKNCANCELFLAG != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) WKNCANCELFLAG);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WKNDAWAPPLYSEQNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WKNDAWAPPLYSEQNO);
      }
      if (WKNDAWAPPLYDATE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WKNDAWAPPLYDATE);
      }
      if (WKNCANCELFLAG != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WKNCANCELFLAG);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WithdrawMarginCancelQuery other) {
      if (other == null) {
        return;
      }
      if (other.WKNDAWAPPLYSEQNO.Length != 0) {
        WKNDAWAPPLYSEQNO = other.WKNDAWAPPLYSEQNO;
      }
      if (other.WKNDAWAPPLYDATE.Length != 0) {
        WKNDAWAPPLYDATE = other.WKNDAWAPPLYDATE;
      }
      if (other.WKNCANCELFLAG != 0) {
        WKNCANCELFLAG = other.WKNCANCELFLAG;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WKNDAWAPPLYSEQNO = input.ReadString();
            break;
          }
          case 18: {
            WKNDAWAPPLYDATE = input.ReadString();
            break;
          }
          case 24: {
            wKNCANCELFLAG_ = (global::Jsunfutures.Messages.CancelFlag) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
